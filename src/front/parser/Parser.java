
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package front.parser;

import front.symbols.*;
import front.scanner.LexicalScanner;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\164\000\002\002\004\000\002\002\005\000\002\003" +
    "\003\000\002\003\003\000\002\003\002\000\002\005\004" +
    "\000\002\006\004\000\002\004\016\000\002\011\004\000" +
    "\002\055\003\000\002\055\002\000\002\012\004\000\002" +
    "\012\004\000\002\012\004\000\002\012\005\000\002\012" +
    "\005\000\002\012\004\000\002\012\004\000\002\012\004" +
    "\000\002\012\004\000\002\026\005\000\002\026\003\000" +
    "\002\026\002\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\034\006\000\002\034\003\000\002\034\003" +
    "\000\002\062\004\000\002\062\002\000\002\061\003\000" +
    "\002\061\003\000\002\015\014\000\002\040\006\000\002" +
    "\040\002\000\002\017\013\000\002\020\013\000\002\007" +
    "\015\000\002\010\017\000\002\044\005\000\002\021\006" +
    "\000\002\021\005\000\002\022\005\000\002\022\005\000" +
    "\002\060\005\000\002\057\005\000\002\057\002\000\002" +
    "\045\006\000\002\023\005\000\002\037\004\000\002\056" +
    "\004\000\002\056\002\000\002\024\006\000\002\025\006" +
    "\000\002\025\005\000\002\033\004\000\002\032\006\000" +
    "\002\032\005\000\002\072\005\000\002\072\005\000\002" +
    "\041\003\000\002\041\005\000\002\041\002\000\002\042" +
    "\004\000\002\043\003\000\002\043\003\000\002\043\003" +
    "\000\002\036\003\000\002\036\005\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\051\003\000\002" +
    "\051\003\000\002\051\003\000\002\051\003\000\002\051" +
    "\003\000\002\052\003\000\002\052\003\000\002\052\003" +
    "\000\002\052\003\000\002\052\003\000\002\052\003\000" +
    "\002\053\003\000\002\053\003\000\002\054\003\000\002" +
    "\054\003\000\002\054\003\000\002\054\003\000\002\054" +
    "\003\000\002\046\003\000\002\047\003\000\002\047\003" +
    "\000\002\031\003\000\002\050\003\000\002\013\006\000" +
    "\002\013\006\000\002\035\004\000\002\035\004\000\002" +
    "\035\002\000\002\014\006\000\002\016\002\000\002\063" +
    "\002\000\002\064\002\000\002\065\002\000\002\066\002" +
    "\000\002\067\002\000\002\070\002\000\002\071\002\000" +
    "\002\074\002\000\002\075\002\000\002\073\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\341\000\014\041\uff92\043\uff92\046\uff92\047\uff92\050" +
    "\uff92\001\002\000\014\041\ufffd\043\007\046\013\047\014" +
    "\050\010\001\002\000\004\002\006\001\002\000\004\002" +
    "\001\001\002\000\004\054\024\001\002\000\010\004\uffbb" +
    "\044\uffbb\054\uffbb\001\002\000\014\041\ufffd\043\007\046" +
    "\013\047\014\050\010\001\002\000\014\041\ufffd\043\007" +
    "\046\013\047\014\050\010\001\002\000\010\004\uffbd\044" +
    "\uffbd\054\uffbd\001\002\000\010\004\uffbc\044\uffbc\054\uffbc" +
    "\001\002\000\004\044\304\001\002\000\004\041\ufffe\001" +
    "\002\000\004\041\022\001\002\000\004\041\uffff\001\002" +
    "\000\004\002\000\001\002\000\004\054\024\001\002\000" +
    "\004\016\uff91\001\002\000\074\005\uffa0\006\uffa0\007\uffa0" +
    "\010\uffa0\011\uffa0\012\uffa0\013\uffa0\014\uffa0\015\uffa0\016" +
    "\uffa0\017\uffa0\020\uffa0\021\uffa0\022\uffa0\023\uffa0\024\uffa0" +
    "\031\uffa0\037\uffa0\040\uffa0\051\uffa0\053\uffa0\054\uffa0\055" +
    "\uffa0\056\uffa0\057\uffa0\060\uffa0\061\uffa0\062\uffa0\063\uffa0" +
    "\001\002\000\004\016\026\001\002\000\012\017\uffbf\046" +
    "\013\047\014\050\010\001\002\000\004\017\035\001\002" +
    "\000\006\017\uffc1\051\033\001\002\000\004\054\024\001" +
    "\002\000\006\017\uffbe\051\uffbe\001\002\000\012\017\uffbf" +
    "\046\013\047\014\050\010\001\002\000\004\017\uffc0\001" +
    "\002\000\030\025\uff8e\026\uff8e\027\uff8e\030\uff8e\034\uff8e" +
    "\035\uff8e\045\uff8e\046\uff8e\047\uff8e\050\uff8e\054\uff8e\001" +
    "\002\000\030\025\uff90\026\uff90\027\uff90\030\uff90\034\uff90" +
    "\035\uff90\045\uff90\046\uff90\047\uff90\050\uff90\054\uff90\001" +
    "\002\000\030\025\uffcf\026\uffcf\027\uffcf\030\uffcf\034\uffcf" +
    "\035\uffcf\045\041\046\uffcf\047\uffcf\050\uffcf\054\uffcf\001" +
    "\002\000\026\025\131\026\116\027\126\030\132\034\uff94" +
    "\035\uff94\046\013\047\014\050\010\054\024\001\002\000" +
    "\010\046\013\047\014\050\010\001\002\000\030\025\uffcf" +
    "\026\uffcf\027\uffcf\030\uffcf\034\uffcf\035\uffcf\045\041\046" +
    "\uffcf\047\uffcf\050\uffcf\054\uffcf\001\002\000\004\004\044" +
    "\001\002\000\004\054\024\001\002\000\004\005\050\001" +
    "\002\000\004\006\047\001\002\000\030\025\uffce\026\uffce" +
    "\027\uffce\030\uffce\034\uffce\035\uffce\045\uffce\046\uffce\047" +
    "\uffce\050\uffce\054\uffce\001\002\000\030\006\uffeb\011\uffeb" +
    "\012\uffeb\013\uffeb\014\uffeb\015\uffeb\053\052\054\024\055" +
    "\054\062\060\063\057\001\002\000\046\006\uffe8\007\uffe8" +
    "\010\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\021" +
    "\uffe8\023\uffe8\024\uffe8\031\uffe8\037\uffe8\040\uffe8\056\uffe8" +
    "\057\uffe8\060\uffe8\061\uffe8\001\002\000\066\006\uffa3\007" +
    "\uffa3\010\uffa3\011\uffa3\012\uffa3\013\uffa3\014\uffa3\015\uffa3" +
    "\017\uffa3\021\uffa3\022\uffa3\023\uffa3\024\uffa3\031\uffa3\037" +
    "\uffa3\040\uffa3\051\uffa3\053\uffa3\054\uffa3\055\uffa3\056\uffa3" +
    "\057\uffa3\060\uffa3\061\uffa3\062\uffa3\063\uffa3\001\002\000" +
    "\046\006\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5" +
    "\014\uffe5\015\uffe5\021\uffe5\023\uffe5\024\uffe5\031\uffe5\037" +
    "\uffe5\040\uffe5\056\uffe5\057\uffe5\060\uffe5\061\uffe5\001\002" +
    "\000\064\006\uff9f\007\uff9f\010\uff9f\011\uff9f\012\uff9f\013" +
    "\uff9f\014\uff9f\015\uff9f\017\uff9f\021\uff9f\023\uff9f\024\uff9f" +
    "\031\uff9f\037\uff9f\040\uff9f\051\uff9f\053\uff9f\054\uff9f\055" +
    "\uff9f\056\uff9f\057\uff9f\060\uff9f\061\uff9f\062\uff9f\063\uff9f" +
    "\001\002\000\046\006\uffe7\007\uffe7\010\uffe7\011\uffe7\012" +
    "\uffe7\013\uffe7\014\uffe7\015\uffe7\021\uffe7\023\uffe7\024\uffe7" +
    "\031\uffe7\037\uffe7\040\uffe7\056\uffe7\057\uffe7\060\uffe7\061" +
    "\uffe7\001\002\000\052\006\uffea\007\uffea\010\uffea\011\uffea" +
    "\012\uffea\013\uffea\014\uffea\015\uffea\016\076\020\075\021" +
    "\uffea\023\uffea\024\uffea\031\uffea\037\uffea\040\uffea\056\uffea" +
    "\057\uffea\060\uffea\061\uffea\001\002\000\064\006\uffa1\007" +
    "\uffa1\010\uffa1\011\uffa1\012\uffa1\013\uffa1\014\uffa1\015\uffa1" +
    "\017\uffa1\021\uffa1\023\uffa1\024\uffa1\031\uffa1\037\uffa1\040" +
    "\uffa1\051\uffa1\053\uffa1\054\uffa1\055\uffa1\056\uffa1\057\uffa1" +
    "\060\uffa1\061\uffa1\062\uffa1\063\uffa1\001\002\000\064\006" +
    "\uffa2\007\uffa2\010\uffa2\011\uffa2\012\uffa2\013\uffa2\014\uffa2" +
    "\015\uffa2\017\uffa2\021\uffa2\023\uffa2\024\uffa2\031\uffa2\037" +
    "\uffa2\040\uffa2\051\uffa2\053\uffa2\054\uffa2\055\uffa2\056\uffa2" +
    "\057\uffa2\060\uffa2\061\uffa2\062\uffa2\063\uffa2\001\002\000" +
    "\046\006\uffe9\007\uffe9\010\uffe9\011\uffe9\012\uffe9\013\uffe9" +
    "\014\uffe9\015\uffe9\021\uffe9\023\uffe9\024\uffe9\031\uffe9\037" +
    "\uffe9\040\uffe9\056\uffe9\057\uffe9\060\uffe9\061\uffe9\001\002" +
    "\000\016\006\uffd1\011\071\012\067\013\070\014\072\015" +
    "\066\001\002\000\046\006\uffe6\007\uffe6\010\uffe6\011\uffe6" +
    "\012\uffe6\013\uffe6\014\uffe6\015\uffe6\021\uffe6\023\uffe6\024" +
    "\uffe6\031\uffe6\037\uffe6\040\uffe6\056\uffe6\057\uffe6\060\uffe6" +
    "\061\uffe6\001\002\000\046\006\uffec\007\uffec\010\uffec\011" +
    "\uffec\012\uffec\013\uffec\014\uffec\015\uffec\021\uffec\023\uffec" +
    "\024\uffec\031\uffec\037\uffec\040\uffec\056\uffec\057\uffec\060" +
    "\uffec\061\uffec\001\002\000\014\053\052\054\024\055\054" +
    "\062\060\063\057\001\002\000\014\053\uffb1\054\uffb1\055" +
    "\uffb1\062\uffb1\063\uffb1\001\002\000\014\053\uffb4\054\uffb4" +
    "\055\uffb4\062\uffb4\063\uffb4\001\002\000\014\053\uffb3\054" +
    "\uffb3\055\uffb3\062\uffb3\063\uffb3\001\002\000\014\053\uffb5" +
    "\054\uffb5\055\uffb5\062\uffb5\063\uffb5\001\002\000\014\053" +
    "\uffb2\054\uffb2\055\uffb2\062\uffb2\063\uffb2\001\002\000\046" +
    "\006\uffed\007\uffed\010\uffed\011\uffed\012\uffed\013\uffed\014" +
    "\uffed\015\uffed\021\uffed\023\uffed\024\uffed\031\uffed\037\uffed" +
    "\040\uffed\056\uffed\057\uffed\060\uffed\061\uffed\001\002\000" +
    "\052\005\uffc6\006\uffc6\007\uffc6\010\uffc6\011\uffc6\012\uffc6" +
    "\013\uffc6\014\uffc6\015\uffc6\020\110\021\uffc6\023\uffc6\024" +
    "\uffc6\031\uffc6\037\uffc6\040\uffc6\056\uffc6\057\uffc6\060\uffc6" +
    "\061\uffc6\001\002\000\030\011\uffeb\012\uffeb\013\uffeb\014" +
    "\uffeb\015\uffeb\021\uffeb\053\052\054\024\055\054\062\060" +
    "\063\057\001\002\000\006\017\100\054\024\001\002\000" +
    "\022\006\uffca\017\uffca\051\103\053\uffca\054\uffca\055\uffca" +
    "\062\uffca\063\uffca\001\002\000\046\006\uffd4\007\uffd4\010" +
    "\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4\021\uffd4" +
    "\023\uffd4\024\uffd4\031\uffd4\037\uffd4\040\uffd4\056\uffd4\057" +
    "\uffd4\060\uffd4\061\uffd4\001\002\000\004\017\102\001\002" +
    "\000\046\006\uffd5\007\uffd5\010\uffd5\011\uffd5\012\uffd5\013" +
    "\uffd5\014\uffd5\015\uffd5\021\uffd5\023\uffd5\024\uffd5\031\uffd5" +
    "\037\uffd5\040\uffd5\056\uffd5\057\uffd5\060\uffd5\061\uffd5\001" +
    "\002\000\004\054\024\001\002\000\020\006\uffcc\017\uffcc" +
    "\053\uffcc\054\uffcc\055\uffcc\062\uffcc\063\uffcc\001\002\000" +
    "\020\006\uffcb\017\uffcb\053\uffcb\054\uffcb\055\uffcb\062\uffcb" +
    "\063\uffcb\001\002\000\016\011\071\012\067\013\070\014" +
    "\072\015\066\021\107\001\002\000\052\005\uffc4\006\uffc4" +
    "\007\uffc4\010\uffc4\011\uffc4\012\uffc4\013\uffc4\014\uffc4\015" +
    "\uffc4\020\uffc4\021\uffc4\023\uffc4\024\uffc4\031\uffc4\037\uffc4" +
    "\040\uffc4\056\uffc4\057\uffc4\060\uffc4\061\uffc4\001\002\000" +
    "\030\011\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb\021\uffeb" +
    "\053\052\054\024\055\054\062\060\063\057\001\002\000" +
    "\016\011\071\012\067\013\070\014\072\015\066\021\112" +
    "\001\002\000\052\005\uffc5\006\uffc5\007\uffc5\010\uffc5\011" +
    "\uffc5\012\uffc5\013\uffc5\014\uffc5\015\uffc5\020\uffc5\021\uffc5" +
    "\023\uffc5\024\uffc5\031\uffc5\037\uffc5\040\uffc5\056\uffc5\057" +
    "\uffc5\060\uffc5\061\uffc5\001\002\000\026\025\uffd0\026\uffd0" +
    "\027\uffd0\030\uffd0\034\uffd0\035\uffd0\046\uffd0\047\uffd0\050" +
    "\uffd0\054\uffd0\001\002\000\004\006\303\001\002\000\004" +
    "\006\302\001\002\000\004\016\277\001\002\000\004\040" +
    "\uff8f\001\002\000\004\006\274\001\002\000\042\025\131" +
    "\026\116\027\126\030\132\032\ufff7\033\ufff7\034\uff94\035" +
    "\uff94\036\ufff7\040\ufff7\042\ufff7\046\013\047\014\050\010" +
    "\052\ufff7\054\024\001\002\000\004\005\270\001\002\000" +
    "\010\005\266\016\076\020\075\001\002\000\004\040\uff8f" +
    "\001\002\000\004\042\uff8f\001\002\000\004\016\245\001" +
    "\002\000\004\004\225\001\002\000\006\034\205\035\206" +
    "\001\002\000\046\007\uff98\010\uff98\011\uff98\012\uff98\013" +
    "\uff98\014\uff98\015\uff98\023\uff98\024\uff98\053\uff98\054\uff98" +
    "\055\uff98\056\uff98\057\uff98\060\uff98\061\uff98\062\uff98\063" +
    "\uff98\001\002\000\004\016\143\001\002\000\004\006\142" +
    "\001\002\000\004\032\141\001\002\000\004\006\140\001" +
    "\002\000\004\006\137\001\002\000\042\025\uffee\026\uffee" +
    "\027\uffee\030\uffee\032\uffee\033\uffee\034\uffee\035\uffee\036" +
    "\uffee\040\uffee\042\uffee\046\uffee\047\uffee\050\uffee\052\uffee" +
    "\054\uffee\001\002\000\042\025\ufff6\026\ufff6\027\ufff6\030" +
    "\ufff6\032\ufff6\033\ufff6\034\ufff6\035\ufff6\036\ufff6\040\ufff6" +
    "\042\ufff6\046\ufff6\047\ufff6\050\ufff6\052\ufff6\054\ufff6\001" +
    "\002\000\042\025\ufff4\026\ufff4\027\ufff4\030\ufff4\032\ufff4" +
    "\033\ufff4\034\ufff4\035\ufff4\036\ufff4\040\ufff4\042\ufff4\046" +
    "\ufff4\047\ufff4\050\ufff4\052\ufff4\054\ufff4\001\002\000\042" +
    "\025\ufff0\026\ufff0\027\ufff0\030\ufff0\032\ufff0\033\ufff0\034" +
    "\ufff0\035\ufff0\036\ufff0\040\ufff0\042\ufff0\046\ufff0\047\ufff0" +
    "\050\ufff0\052\ufff0\054\ufff0\001\002\000\004\054\024\001" +
    "\002\000\004\017\145\001\002\000\004\006\uff99\001\002" +
    "\000\046\007\uffeb\010\uffeb\011\uffeb\012\uffeb\013\uffeb\014" +
    "\uffeb\015\uffeb\023\uffeb\024\uffeb\053\052\054\024\055\054" +
    "\056\uffeb\057\uffeb\060\uffeb\061\uffeb\062\060\063\057\001" +
    "\002\000\004\031\172\001\002\000\046\007\uffea\010\uffea" +
    "\011\uffea\012\uffea\013\uffea\014\uffea\015\uffea\016\076\020" +
    "\075\023\uffea\024\uffea\031\uffe3\037\uffe3\040\uffe3\056\uffea" +
    "\057\uffea\060\uffea\061\uffea\001\002\000\042\007\uffe9\010" +
    "\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\023\uffe9" +
    "\024\uffe9\031\uffe2\037\uffe2\040\uffe2\056\uffe9\057\uffe9\060" +
    "\uffe9\061\uffe9\001\002\000\034\007\165\010\156\011\071" +
    "\012\067\013\070\014\072\015\066\023\160\024\157\056" +
    "\162\057\161\060\153\061\154\001\002\000\054\007\uffad" +
    "\010\uffad\011\uffad\012\uffad\013\uffad\014\uffad\015\uffad\023" +
    "\uffad\024\uffad\031\uffad\037\uffad\040\uffad\053\uffad\054\uffad" +
    "\055\uffad\056\uffad\057\uffad\060\uffad\061\uffad\062\uffad\063" +
    "\uffad\001\002\000\054\007\uffae\010\uffae\011\uffae\012\uffae" +
    "\013\uffae\014\uffae\015\uffae\023\uffae\024\uffae\031\uffae\037" +
    "\uffae\040\uffae\053\uffae\054\uffae\055\uffae\056\uffae\057\uffae" +
    "\060\uffae\061\uffae\062\uffae\063\uffae\001\002\000\054\007" +
    "\uffde\010\uffde\011\uffde\012\uffde\013\uffde\014\uffde\015\uffde" +
    "\023\uffde\024\uffde\031\uffde\037\uffde\040\uffde\053\uffde\054" +
    "\uffde\055\uffde\056\uffde\057\uffde\060\uffde\061\uffde\062\uffde" +
    "\063\uffde\001\002\000\054\007\uffa9\010\uffa9\011\uffa9\012" +
    "\uffa9\013\uffa9\014\uffa9\015\uffa9\023\uffa9\024\uffa9\031\uffa9" +
    "\037\uffa9\040\uffa9\053\uffa9\054\uffa9\055\uffa9\056\uffa9\057" +
    "\uffa9\060\uffa9\061\uffa9\062\uffa9\063\uffa9\001\002\000\054" +
    "\007\uffaf\010\uffaf\011\uffaf\012\uffaf\013\uffaf\014\uffaf\015" +
    "\uffaf\023\uffaf\024\uffaf\031\uffaf\037\uffaf\040\uffaf\053\uffaf" +
    "\054\uffaf\055\uffaf\056\uffaf\057\uffaf\060\uffaf\061\uffaf\062" +
    "\uffaf\063\uffaf\001\002\000\054\007\uffb0\010\uffb0\011\uffb0" +
    "\012\uffb0\013\uffb0\014\uffb0\015\uffb0\023\uffb0\024\uffb0\031" +
    "\uffb0\037\uffb0\040\uffb0\053\uffb0\054\uffb0\055\uffb0\056\uffb0" +
    "\057\uffb0\060\uffb0\061\uffb0\062\uffb0\063\uffb0\001\002\000" +
    "\054\007\uffab\010\uffab\011\uffab\012\uffab\013\uffab\014\uffab" +
    "\015\uffab\023\uffab\024\uffab\031\uffab\037\uffab\040\uffab\053" +
    "\uffab\054\uffab\055\uffab\056\uffab\057\uffab\060\uffab\061\uffab" +
    "\062\uffab\063\uffab\001\002\000\054\007\uffac\010\uffac\011" +
    "\uffac\012\uffac\013\uffac\014\uffac\015\uffac\023\uffac\024\uffac" +
    "\031\uffac\037\uffac\040\uffac\053\uffac\054\uffac\055\uffac\056" +
    "\uffac\057\uffac\060\uffac\061\uffac\062\uffac\063\uffac\001\002" +
    "\000\054\007\uffdf\010\uffdf\011\uffdf\012\uffdf\013\uffdf\014" +
    "\uffdf\015\uffdf\023\uffdf\024\uffdf\031\uffdf\037\uffdf\040\uffdf" +
    "\053\uffdf\054\uffdf\055\uffdf\056\uffdf\057\uffdf\060\uffdf\061" +
    "\uffdf\062\uffdf\063\uffdf\001\002\000\054\007\uffeb\010\uffeb" +
    "\011\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb\023\uffeb\024" +
    "\uffeb\031\uffeb\037\uffeb\040\uffeb\053\052\054\024\055\054" +
    "\056\uffeb\057\uffeb\060\uffeb\061\uffeb\062\060\063\057\001" +
    "\002\000\054\007\uffaa\010\uffaa\011\uffaa\012\uffaa\013\uffaa" +
    "\014\uffaa\015\uffaa\023\uffaa\024\uffaa\031\uffaa\037\uffaa\040" +
    "\uffaa\053\uffaa\054\uffaa\055\uffaa\056\uffaa\057\uffaa\060\uffaa" +
    "\061\uffaa\062\uffaa\063\uffaa\001\002\000\042\007\165\010" +
    "\156\011\071\012\067\013\070\014\072\015\066\023\160" +
    "\024\157\031\uffe0\037\uffe0\040\uffe0\056\162\057\161\060" +
    "\153\061\154\001\002\000\010\031\uffe4\037\uffe4\040\uffe4" +
    "\001\002\000\046\007\uffeb\010\uffeb\011\uffeb\012\uffeb\013" +
    "\uffeb\014\uffeb\015\uffeb\023\uffeb\024\uffeb\053\052\054\024" +
    "\055\054\056\uffeb\057\uffeb\060\uffeb\061\uffeb\062\060\063" +
    "\057\001\002\000\010\031\uffe1\037\uffe1\040\uffe1\001\002" +
    "\000\026\025\uff97\026\uff97\027\uff97\030\uff97\034\uff97\035" +
    "\uff97\046\uff97\047\uff97\050\uff97\054\uff97\001\002\000\026" +
    "\025\uff90\026\uff90\027\uff90\030\uff90\034\uff90\035\uff90\046" +
    "\uff90\047\uff90\050\uff90\054\uff90\001\002\000\026\025\131" +
    "\026\116\027\126\030\132\034\uff94\035\uff94\046\013\047" +
    "\014\050\010\054\024\001\002\000\006\032\uff8f\033\uff8f" +
    "\001\002\000\006\032\uff95\033\uff95\001\002\000\006\032" +
    "\uffdb\033\201\001\002\000\004\032\uffdd\001\002\000\026" +
    "\025\uff90\026\uff90\027\uff90\030\uff90\034\uff90\035\uff90\046" +
    "\uff90\047\uff90\050\uff90\054\uff90\001\002\000\026\025\131" +
    "\026\116\027\126\030\132\034\uff94\035\uff94\046\013\047" +
    "\014\050\010\054\024\001\002\000\004\032\uff8f\001\002" +
    "\000\004\032\uffdc\001\002\000\046\007\uff98\010\uff98\011" +
    "\uff98\012\uff98\013\uff98\014\uff98\015\uff98\023\uff98\024\uff98" +
    "\053\uff98\054\uff98\055\uff98\056\uff98\057\uff98\060\uff98\061" +
    "\uff98\062\uff98\063\uff98\001\002\000\026\025\uff90\026\uff90" +
    "\027\uff90\030\uff90\034\uff90\035\uff90\046\uff90\047\uff90\050" +
    "\uff90\054\uff90\001\002\000\026\025\131\026\116\027\126" +
    "\030\132\034\uff94\035\uff94\046\013\047\014\050\010\054" +
    "\024\001\002\000\004\036\211\001\002\000\046\007\uff98" +
    "\010\uff98\011\uff98\012\uff98\013\uff98\014\uff98\015\uff98\023" +
    "\uff98\024\uff98\053\uff98\054\uff98\055\uff98\056\uff98\057\uff98" +
    "\060\uff98\061\uff98\062\uff98\063\uff98\001\002\000\046\007" +
    "\uffeb\010\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb" +
    "\023\uffeb\024\uffeb\053\052\054\024\055\054\056\uffeb\057" +
    "\uffeb\060\uffeb\061\uffeb\062\060\063\057\001\002\000\004" +
    "\040\uff96\001\002\000\004\040\uff93\001\002\000\004\040" +
    "\uffd9\001\002\000\046\007\uffeb\010\uffeb\011\uffeb\012\uffeb" +
    "\013\uffeb\014\uffeb\015\uffeb\023\uffeb\024\uffeb\053\052\054" +
    "\024\055\054\056\uffeb\057\uffeb\060\uffeb\061\uffeb\062\060" +
    "\063\057\001\002\000\004\037\220\001\002\000\026\025" +
    "\uff97\026\uff97\027\uff97\030\uff97\034\uff97\035\uff97\046\uff97" +
    "\047\uff97\050\uff97\054\uff97\001\002\000\026\025\uff90\026" +
    "\uff90\027\uff90\030\uff90\034\uff90\035\uff90\046\uff90\047\uff90" +
    "\050\uff90\054\uff90\001\002\000\026\025\131\026\116\027" +
    "\126\030\132\034\uff94\035\uff94\046\013\047\014\050\010" +
    "\054\024\001\002\000\004\040\uff93\001\002\000\004\040" +
    "\uffda\001\002\000\004\054\024\001\002\000\010\006\uffca" +
    "\020\231\051\103\001\002\000\004\006\uffcd\001\002\000" +
    "\006\006\uffc9\020\242\001\002\000\006\053\052\054\024" +
    "\001\002\000\004\022\240\001\002\000\004\022\236\001" +
    "\002\000\004\021\235\001\002\000\006\006\uffc7\020\uffc7" +
    "\001\002\000\004\053\052\001\002\000\004\021\uffc2\001" +
    "\002\000\004\054\024\001\002\000\004\021\uffc3\001\002" +
    "\000\006\053\052\054\024\001\002\000\004\021\244\001" +
    "\002\000\006\006\uffc8\020\uffc8\001\002\000\016\017\uff9a" +
    "\053\052\054\024\055\054\062\060\063\057\001\002\000" +
    "\020\017\uffb8\051\uffb8\053\uffb8\054\uffb8\055\uffb8\062\uffb8" +
    "\063\uffb8\001\002\000\016\017\uff9a\053\052\054\024\055" +
    "\054\062\060\063\057\001\002\000\016\017\uff9a\053\052" +
    "\054\024\055\054\062\060\063\057\001\002\000\020\017" +
    "\uffb6\051\uffb6\053\uffb6\054\uffb6\055\uffb6\062\uffb6\063\uffb6" +
    "\001\002\000\020\017\uffba\051\256\053\uffba\054\uffba\055" +
    "\uffba\062\uffba\063\uffba\001\002\000\004\017\255\001\002" +
    "\000\020\017\uffb7\051\uffb7\053\uffb7\054\uffb7\055\uffb7\062" +
    "\uffb7\063\uffb7\001\002\000\004\006\uff9d\001\002\000\012" +
    "\053\052\055\054\062\060\063\057\001\002\000\016\017" +
    "\uffb9\053\uffb9\054\uffb9\055\uffb9\062\uffb9\063\uffb9\001\002" +
    "\000\004\017\uff9c\001\002\000\004\017\uff9b\001\002\000" +
    "\004\042\263\001\002\000\004\002\ufffa\001\002\000\004" +
    "\040\265\001\002\000\042\025\ufff2\026\ufff2\027\ufff2\030" +
    "\ufff2\032\ufff2\033\ufff2\034\ufff2\035\ufff2\036\ufff2\040\ufff2" +
    "\042\ufff2\046\ufff2\047\ufff2\050\ufff2\052\ufff2\054\ufff2\001" +
    "\002\000\030\006\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb" +
    "\015\uffeb\053\052\054\024\055\054\062\060\063\057\001" +
    "\002\000\016\006\uffd3\011\071\012\067\013\070\014\072" +
    "\015\066\001\002\000\030\006\uffeb\011\uffeb\012\uffeb\013" +
    "\uffeb\014\uffeb\015\uffeb\053\052\054\024\055\054\062\060" +
    "\063\057\001\002\000\016\006\uffd2\011\071\012\067\013" +
    "\070\014\072\015\066\001\002\000\016\032\ufff8\033\ufff8" +
    "\036\ufff8\040\ufff8\042\ufff8\052\ufff8\001\002\000\016\032" +
    "\ufff9\033\ufff9\036\ufff9\040\ufff9\042\ufff9\052\ufff9\001\002" +
    "\000\042\025\uffef\026\uffef\027\uffef\030\uffef\032\uffef\033" +
    "\uffef\034\uffef\035\uffef\036\uffef\040\uffef\042\uffef\046\uffef" +
    "\047\uffef\050\uffef\052\uffef\054\uffef\001\002\000\004\040" +
    "\276\001\002\000\042\025\ufff3\026\ufff3\027\ufff3\030\ufff3" +
    "\032\ufff3\033\ufff3\034\ufff3\035\ufff3\036\ufff3\040\ufff3\042" +
    "\ufff3\046\ufff3\047\ufff3\050\ufff3\052\ufff3\054\ufff3\001\002" +
    "\000\016\017\uff9a\053\052\054\024\055\054\062\060\063" +
    "\057\001\002\000\004\017\301\001\002\000\004\006\uff9e" +
    "\001\002\000\042\025\ufff1\026\ufff1\027\ufff1\030\ufff1\032" +
    "\ufff1\033\ufff1\034\ufff1\035\ufff1\036\ufff1\040\ufff1\042\ufff1" +
    "\046\ufff1\047\ufff1\050\ufff1\052\ufff1\054\ufff1\001\002\000" +
    "\042\025\ufff5\026\ufff5\027\ufff5\030\ufff5\032\ufff5\033\ufff5" +
    "\034\ufff5\035\ufff5\036\ufff5\040\ufff5\042\ufff5\046\ufff5\047" +
    "\ufff5\050\ufff5\052\ufff5\054\ufff5\001\002\000\004\054\024" +
    "\001\002\000\004\016\uff91\001\002\000\004\016\307\001" +
    "\002\000\012\017\uffbf\046\013\047\014\050\010\001\002" +
    "\000\004\017\311\001\002\000\026\025\uff8e\026\uff8e\027" +
    "\uff8e\030\uff8e\034\uff8e\035\uff8e\046\uff8e\047\uff8e\050\uff8e" +
    "\054\uff8e\001\002\000\026\025\uff90\026\uff90\027\uff90\030" +
    "\uff90\034\uff90\035\uff90\046\uff90\047\uff90\050\uff90\054\uff90" +
    "\001\002\000\026\025\131\026\116\027\126\030\132\034" +
    "\uff94\035\uff94\046\013\047\014\050\010\054\024\001\002" +
    "\000\004\052\316\001\002\000\004\042\uff8f\001\002\000" +
    "\014\053\052\054\024\055\054\062\060\063\057\001\002" +
    "\000\004\006\uffa8\001\002\000\004\006\uffa4\001\002\000" +
    "\004\006\325\001\002\000\004\006\uffa6\001\002\000\006" +
    "\006\uffa7\016\076\001\002\000\004\006\uffa5\001\002\000" +
    "\004\042\uffd6\001\002\000\004\042\327\001\002\000\014" +
    "\041\uffd7\043\uffd7\046\uffd7\047\uffd7\050\uffd7\001\002\000" +
    "\004\041\ufffb\001\002\000\004\041\ufffc\001\002\000\004" +
    "\016\uff91\001\002\000\004\016\334\001\002\000\012\017" +
    "\uffbf\046\013\047\014\050\010\001\002\000\004\017\336" +
    "\001\002\000\026\025\uff8e\026\uff8e\027\uff8e\030\uff8e\034" +
    "\uff8e\035\uff8e\046\uff8e\047\uff8e\050\uff8e\054\uff8e\001\002" +
    "\000\026\025\uff90\026\uff90\027\uff90\030\uff90\034\uff90\035" +
    "\uff90\046\uff90\047\uff90\050\uff90\054\uff90\001\002\000\026" +
    "\025\131\026\116\027\126\030\132\034\uff94\035\uff94\046" +
    "\013\047\014\050\010\054\024\001\002\000\004\042\uff8f" +
    "\001\002\000\004\042\343\001\002\000\014\041\uffd8\043" +
    "\uffd8\046\uffd8\047\uffd8\050\uffd8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\341\000\006\002\004\070\003\001\001\000\016\003" +
    "\016\005\017\006\015\007\010\010\011\043\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\031\331\001" +
    "\001\000\002\001\001\000\016\003\330\005\017\006\015" +
    "\007\010\010\011\043\014\001\001\000\016\003\327\005" +
    "\017\006\015\007\010\010\011\043\014\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\020\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\031\022\001\001\000\004\071\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\041\026" +
    "\042\027\043\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\031\031\001\001\000\002\001\001\000\010" +
    "\041\033\042\027\043\030\001\001\000\002\001\001\000" +
    "\004\073\035\001\001\000\004\074\036\001\001\000\004" +
    "\057\037\001\001\000\040\011\124\012\120\013\134\014" +
    "\113\015\133\017\116\020\123\021\114\022\132\023\117" +
    "\024\135\031\122\033\121\043\126\066\127\001\001\000" +
    "\006\043\042\045\041\001\001\000\004\057\112\001\001" +
    "\000\002\001\001\000\006\031\044\060\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\021\054\026\061\027\063\031\055\033\060\046\050\047" +
    "\062\050\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\051\064\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\021\054\027\072\031\055" +
    "\033\060\046\050\047\062\050\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\021\054\026\105\027\063\031\055\033\060\046\050" +
    "\047\062\050\052\001\001\000\006\031\076\037\100\001" +
    "\001\000\004\056\103\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\031\076\037\104\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\051\064" +
    "\001\001\000\002\001\001\000\022\021\054\026\110\027" +
    "\063\031\055\033\060\046\050\047\062\050\052\001\001" +
    "\000\004\051\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\075\274\001\001\000\002\001\001\000\042\011" +
    "\271\012\120\013\134\014\113\015\133\017\116\020\123" +
    "\021\114\022\132\023\117\024\135\031\122\033\121\043" +
    "\126\055\272\066\127\001\001\000\002\001\001\000\004" +
    "\032\073\001\001\000\004\075\263\001\001\000\004\075" +
    "\261\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\145\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\031\143\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\021\054\026\151\027" +
    "\063\031\147\033\150\034\146\046\050\047\062\050\052" +
    "\001\001\000\002\001\001\000\004\032\073\001\001\000" +
    "\002\001\001\000\012\051\064\052\154\053\162\061\163" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\021\054\026\165\027\063\031\055\033\060\046\050" +
    "\047\062\050\052\001\001\000\002\001\001\000\014\051" +
    "\064\052\154\053\162\061\167\062\166\001\001\000\002" +
    "\001\001\000\024\021\054\026\151\027\063\031\147\033" +
    "\150\034\170\046\050\047\062\050\052\001\001\000\002" +
    "\001\001\000\004\063\172\001\001\000\004\074\173\001" +
    "\001\000\040\011\174\012\120\013\134\014\113\015\133" +
    "\017\116\020\123\021\114\022\132\023\117\024\135\031" +
    "\122\033\121\043\126\066\127\001\001\000\004\075\175" +
    "\001\001\000\004\065\176\001\001\000\004\040\177\001" +
    "\001\000\002\001\001\000\004\074\201\001\001\000\040" +
    "\011\202\012\120\013\134\014\113\015\133\017\116\020" +
    "\123\021\114\022\132\023\117\024\135\031\122\033\121" +
    "\043\126\066\127\001\001\000\004\075\203\001\001\000" +
    "\002\001\001\000\004\016\215\001\001\000\004\074\206" +
    "\001\001\000\040\011\207\012\120\013\134\014\113\015" +
    "\133\017\116\020\123\021\114\022\132\023\117\024\135" +
    "\031\122\033\121\043\126\066\127\001\001\000\002\001" +
    "\001\000\004\016\211\001\001\000\024\021\054\026\151" +
    "\027\063\031\147\033\150\034\212\046\050\047\062\050" +
    "\052\001\001\000\004\064\213\001\001\000\004\067\214" +
    "\001\001\000\002\001\001\000\024\021\054\026\151\027" +
    "\063\031\147\033\150\034\216\046\050\047\062\050\052" +
    "\001\001\000\002\001\001\000\004\063\220\001\001\000" +
    "\004\074\221\001\001\000\040\011\222\012\120\013\134" +
    "\014\113\015\133\017\116\020\123\021\114\022\132\023" +
    "\117\024\135\031\122\033\121\043\126\066\127\001\001" +
    "\000\004\067\223\001\001\000\002\001\001\000\006\031" +
    "\225\037\226\001\001\000\006\025\227\056\103\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\031\231\046" +
    "\232\072\233\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\046\236\001" +
    "\001\000\002\001\001\000\004\031\240\001\001\000\002" +
    "\001\001\000\010\031\231\046\232\072\242\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\030\251\031\076" +
    "\035\252\036\247\037\246\046\245\047\253\050\250\001" +
    "\001\000\002\001\001\000\022\030\251\031\076\035\260" +
    "\036\247\037\246\046\245\047\253\050\250\001\001\000" +
    "\022\030\251\031\076\035\257\036\247\037\246\046\245" +
    "\047\253\050\250\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\030\251\036\256\046\245\047\253\050\250\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\021\054\026\266\027\063\031\055" +
    "\033\060\046\050\047\062\050\052\001\001\000\004\051" +
    "\064\001\001\000\022\021\054\026\270\027\063\031\055" +
    "\033\060\046\050\047\062\050\052\001\001\000\004\051" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\030" +
    "\251\031\076\035\277\036\247\037\246\046\245\047\253" +
    "\050\250\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\031\304\001\001" +
    "\000\004\071\305\001\001\000\002\001\001\000\010\041" +
    "\307\042\027\043\030\001\001\000\002\001\001\000\004" +
    "\073\311\001\001\000\004\074\312\001\001\000\040\011" +
    "\313\012\120\013\134\014\113\015\133\017\116\020\123" +
    "\021\114\022\132\023\117\024\135\031\122\033\121\043" +
    "\126\066\127\001\001\000\004\044\314\001\001\000\004" +
    "\075\325\001\001\000\016\021\321\031\322\046\316\047" +
    "\323\050\317\054\320\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\071\332\001\001\000\002\001\001\000\010\041\334" +
    "\042\027\043\030\001\001\000\002\001\001\000\004\073" +
    "\336\001\001\000\004\074\337\001\001\000\040\011\340" +
    "\012\120\013\134\014\113\015\133\017\116\020\123\021" +
    "\114\022\132\023\117\024\135\031\122\033\121\043\126" +
    "\066\127\001\001\000\004\075\341\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private LexicalScanner scanner;

    public Parser(LexicalScanner scanner, java_cup.runtime.SymbolFactory sf) {
        super(scanner, sf);
        this.scanner = scanner;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= START EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymSTART start_val = (SymSTART)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // START ::= STARTMAIN METFUNC DECMP 
            {
              SymSTART RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymMETFUNC a = (SymMETFUNC)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymDECMP b = (SymDECMP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymSTART(a, b);
     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // METFUNC ::= DECMETLIST 
            {
              SymMETFUNC RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymDECMETLIST a = (SymDECMETLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymMETFUNC(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METFUNC",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // METFUNC ::= DECFUNCLIST 
            {
              SymMETFUNC RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymDECFUNCLIST b = (SymDECFUNCLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymMETFUNC(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METFUNC",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // METFUNC ::= 
            {
              SymMETFUNC RESULT =null;
		 RESULT = new SymMETFUNC(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METFUNC",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECMETLIST ::= DECMET METFUNC 
            {
              SymDECMETLIST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymDECMET a = (SymDECMET)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymMETFUNC b = (SymMETFUNC)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymDECMETLIST(a, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECMETLIST",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECFUNCLIST ::= DECFUNC METFUNC 
            {
              SymDECFUNCLIST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymDECFUNC a = (SymDECFUNC)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymMETFUNC b = (SymMETFUNC)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymDECFUNCLIST(a, b, scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECFUNCLIST",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECMP ::= prog ID STARTPROC lparen ARGLIST rparen PMB INCSCOPE DECCONSTLIST SENTLIST DICSCOPE end 
            {
              SymDECMP RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		SymID a = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		SymARGLIST b = (SymARGLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymDECCONSTLIST c = (SymDECCONSTLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymSENTLIST d = (SymSENTLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new SymDECMP(a, b, c, d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECMP",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTLIST ::= SENT SENTLISTSEP 
            {
              SymSENTLIST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymSENT a = (SymSENT)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymSENTLISTSEP b = (SymSENTLISTSEP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymSENTLIST(a, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTLISTSEP ::= SENTLIST 
            {
              SymSENTLISTSEP RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymSENTLIST a = (SymSENTLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymSENTLISTSEP(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTLISTSEP",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTLISTSEP ::= 
            {
              SymSENTLISTSEP RESULT =null;
		 RESULT = new SymSENTLISTSEP();  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTLISTSEP",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENT ::= OUTPUT scolon 
            {
              SymSENT RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymOUTPUT a = (SymOUTPUT)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymSENT(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENT ::= INPUT scolon 
            {
              SymSENT RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymINPUT b = (SymINPUT)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymSENT(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENT ::= CONDIF endif 
            {
              SymSENT RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymCONDIF c = (SymCONDIF)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymSENT(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENT ::= WHILE DICSCOPE endloop 
            {
              SymSENT RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymWHILE d = (SymWHILE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new SymSENT(d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENT ::= REPUNTIL DICSCOPE endloop 
            {
              SymSENT RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymREPUNTIL e = (SymREPUNTIL)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new SymSENT(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENT ::= CALLPROC scolon 
            {
              SymSENT RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymCALLPROC f = (SymCALLPROC)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymSENT(f); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENT ::= ASSIGN scolon 
            {
              SymSENT RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymASSIGN g = (SymASSIGN)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymSENT(g); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENT ::= DECVAR scolon 
            {
              SymSENT RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymDECVAR h = (SymDECVAR)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymSENT(h); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENT ::= DECARRAY scolon 
            {
              SymSENT RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymDECARRAY i = (SymDECARRAY)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymSENT(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // OPERANDX ::= OPERANDX OPARITH SUBTYPE 
            {
              SymOPERANDX RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymOPERANDX a = (SymOPERANDX)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymOPARITH b = (SymOPARITH)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymSUBTYPE c = (SymSUBTYPE)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new SymOPERANDX(a, b, c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERANDX",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // OPERANDX ::= SUBTYPE 
            {
              SymOPERANDX RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymSUBTYPE b = (SymSUBTYPE)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new SymOPERANDX(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERANDX",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // OPERANDX ::= 
            {
              SymOPERANDX RESULT =null;
		  RESULT = new SymOPERANDX(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERANDX",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SUBTYPE ::= ID 
            {
              SymSUBTYPE RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymID a = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new SymSUBTYPE(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SUBTYPE",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SUBTYPE ::= IDARRAY 
            {
              SymSUBTYPE RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymIDARRAY b = (SymIDARRAY)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new SymSUBTYPE(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SUBTYPE",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SUBTYPE ::= NUM 
            {
              SymSUBTYPE RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymNUM c = (SymNUM)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new SymSUBTYPE(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SUBTYPE",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SUBTYPE ::= CALLPROC 
            {
              SymSUBTYPE RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymCALLPROC d = (SymCALLPROC)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new SymSUBTYPE(d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SUBTYPE",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SUBTYPE ::= LOGIC 
            {
              SymSUBTYPE RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymLOGIC e = (SymLOGIC)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new SymSUBTYPE(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SUBTYPE",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SUBTYPE ::= STR 
            {
              SymSUBTYPE RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymSTR f = (SymSTR)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new SymSUBTYPE(f); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SUBTYPE",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CONDITION ::= OPERANDX OPERATION OPERANDX CONDEXT 
            {
              SymCONDITION RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymOPERANDX a = (SymOPERANDX)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymOPERATION b = (SymOPERATION)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymOPERANDX c = (SymOPERANDX)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymCONDEXT d = (SymCONDEXT)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymCONDITION(a, b, c, d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDITION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CONDITION ::= ID 
            {
              SymCONDITION RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymID a = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymCONDITION(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDITION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CONDITION ::= IDARRAY 
            {
              SymCONDITION RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymIDARRAY a = (SymIDARRAY)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymCONDITION(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDITION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CONDEXT ::= OPERATION CONDITION 
            {
              SymCONDEXT RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymOPERATION a = (SymOPERATION)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymCONDITION b = (SymCONDITION)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymCONDEXT(a, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDEXT",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CONDEXT ::= 
            {
              SymCONDEXT RESULT =null;
		 RESULT = new SymCONDEXT(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDEXT",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OPERATION ::= ANDOR 
            {
              SymOPERATION RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymANDOR a = (SymANDOR)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymOPERATION(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERATION",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OPERATION ::= OPLOGIC 
            {
              SymOPERATION RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymOPLOGIC b = (SymOPLOGIC)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymOPERATION(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERATION",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CONDIF ::= If CONDLABEL CONDITION then CONDBRANCH INCSCOPE SENTLIST DICSCOPE ELSE CONDELSE 
            {
              SymCONDIF RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		SymCONDITION a = (SymCONDITION)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymSENTLIST b = (SymSENTLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymCONDELSE c = (SymCONDELSE)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymCONDIF(a, b, c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDIF",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CONDELSE ::= Else INCSCOPE SENTLIST DICSCOPE 
            {
              SymCONDELSE RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymSENTLIST a = (SymSENTLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymCONDELSE(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDELSE",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CONDELSE ::= 
            {
              SymCONDELSE RESULT =null;
		 RESULT = new SymCONDELSE(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDELSE",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // WHILE ::= STARTLOOP While CONDLABEL CONDITION loop CONDBRANCH INCSCOPE SENTLIST GSTARTLOOP 
            {
              SymWHILE RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		SymCONDITION a = (SymCONDITION)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymSENTLIST b = (SymSENTLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymWHILE(a, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WHILE",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // REPUNTIL ::= STARTLOOP Repeat INCSCOPE SENTLIST Until CONDLABEL CONDITION CONDBRANCHINV GSTARTLOOP 
            {
              SymREPUNTIL RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		SymSENTLIST a = (SymSENTLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymCONDITION b = (SymCONDITION)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new SymREPUNTIL(b, a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("REPUNTIL",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECMET ::= method ID STARTPROC lparen ARGLIST rparen PMB INCSCOPE SENTLIST DICSCOPE end 
            {
              SymDECMET RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		SymID a = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		SymARGLIST b = (SymARGLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymSENTLIST c = (SymSENTLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new SymDECMET(a, b, c, scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECMET",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECFUNC ::= TYPE func ID STARTPROC lparen ARGLIST rparen PMB INCSCOPE SENTLIST RETURN DICSCOPE end 
            {
              SymDECFUNC RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).right;
		SymTYPE a = (SymTYPE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-12)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		SymID b = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		SymARGLIST c = (SymARGLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymSENTLIST d = (SymSENTLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymRETURN e = (SymRETURN)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new SymDECFUNC(a, b, c, d, e, scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECFUNC",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // RETURN ::= Return RETURNTYPE scolon 
            {
              SymRETURN RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymRETURNTYPE a = (SymRETURNTYPE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymRETURN(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CALLPROC ::= ID lparen IDLIST rparen 
            {
              SymCALLPROC RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymID a = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymIDLIST b = (SymIDLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymCALLPROC(a, b, scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CALLPROC",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CALLPROC ::= ID lparen rparen 
            {
              SymCALLPROC RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymID a = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new SymCALLPROC(a, scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CALLPROC",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ASSIGN ::= ID assign OPERANDX 
            {
              SymASSIGN RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymID a = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymOPERANDX b = (SymOPERANDX)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymASSIGN(a, b, scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGN",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ASSIGN ::= IDARRAY assign OPERANDX 
            {
              SymASSIGN RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymIDARRAY a = (SymIDARRAY)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymOPERANDX b = (SymOPERANDX)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymASSIGN(a, b, scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGN",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ASSIGNCONST ::= ID assign OPERANDX 
            {
              SymASSIGNCONST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymID a = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymOPERANDX b = (SymOPERANDX)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymASSIGNCONST(a, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGNCONST",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECCONSTLIST ::= Const DECLARECONST DECCONSTLIST 
            {
              SymDECCONSTLIST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymDECLARECONST a = (SymDECLARECONST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymDECCONSTLIST b = (SymDECCONSTLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymDECCONSTLIST(a, b, scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECCONSTLIST",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECCONSTLIST ::= 
            {
              SymDECCONSTLIST RESULT =null;
		 RESULT = new SymDECCONSTLIST(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECCONSTLIST",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARECONST ::= TYPE colons ASSIGNCONST scolon 
            {
              SymDECLARECONST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymTYPE a = (SymTYPE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymASSIGNCONST b = (SymASSIGNCONST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymDECLARECONST(a, b, scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARECONST",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECVAR ::= TYPE colons IDLIST 
            {
              SymDECVAR RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymTYPE a = (SymTYPE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymIDLIST b = (SymIDLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new SymDECVAR(a, b, scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECVAR",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // IDLIST ::= ID IDLISTSEP 
            {
              SymIDLIST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymID a = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymIDLISTSEP b = (SymIDLISTSEP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new SymIDLIST(a, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDLIST",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // IDLISTSEP ::= comma IDLIST 
            {
              SymIDLISTSEP RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymIDLIST a = (SymIDLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new SymIDLISTSEP(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDLISTSEP",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // IDLISTSEP ::= 
            {
              SymIDLISTSEP RESULT =null;
		  RESULT = new SymIDLISTSEP(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDLISTSEP",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECARRAY ::= TYPE colons ID DECLISTDIM 
            {
              SymDECARRAY RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymTYPE a = (SymTYPE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymID b = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymDECLISTDIM c = (SymDECLISTDIM)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = new SymDECARRAY(a, b, c, scanner.getLineColumn());   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECARRAY",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLISTDIM ::= DECLISTDIM lbrckt SUBRANGE rbrckt 
            {
              SymDECLISTDIM RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymDECLISTDIM a = (SymDECLISTDIM)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymSUBRANGE b = (SymSUBRANGE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		   RESULT = new SymDECLISTDIM(a, b);     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLISTDIM",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECLISTDIM ::= lbrckt SUBRANGE rbrckt 
            {
              SymDECLISTDIM RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymSUBRANGE a = (SymSUBRANGE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		   RESULT = new SymDECLISTDIM(a);     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLISTDIM",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // IDARRAY ::= ID IDLISTDIM 
            {
              SymIDARRAY RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymID a = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymIDLISTDIM b = (SymIDLISTDIM)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new SymIDARRAY(a,b);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDARRAY",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // IDLISTDIM ::= IDLISTDIM lbrckt OPERANDX rbrckt 
            {
              SymIDLISTDIM RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymIDLISTDIM a = (SymIDLISTDIM)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymOPERANDX b = (SymOPERANDX)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new SymIDLISTDIM(a,b);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDLISTDIM",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // IDLISTDIM ::= lbrckt OPERANDX rbrckt 
            {
              SymIDLISTDIM RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymOPERANDX a = (SymOPERANDX)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new SymIDLISTDIM(a);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDLISTDIM",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SUBRANGE ::= ID dotdot ID 
            {
              SymSUBRANGE RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymID a = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymID b = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = new SymSUBRANGE(a, b);     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SUBRANGE",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SUBRANGE ::= NUM dotdot NUM 
            {
              SymSUBRANGE RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymNUM a = (SymNUM)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymNUM b = (SymNUM)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = new SymSUBRANGE(a,b);     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SUBRANGE",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ARGLIST ::= ARG 
            {
              SymARGLIST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymARG a = (SymARG)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymARGLIST(a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGLIST",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ARGLIST ::= ARG comma ARGLIST 
            {
              SymARGLIST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymARG a = (SymARG)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymARGLIST b = (SymARGLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymARGLIST(a, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGLIST",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ARGLIST ::= 
            {
              SymARGLIST RESULT =null;
		 RESULT = new SymARGLIST(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGLIST",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ARG ::= TYPE ID 
            {
              SymARG RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymTYPE a = (SymTYPE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymID b = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new SymARG(a, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARG",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // TYPE ::= integer 
            {
              SymTYPE RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymTYPE(a.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // TYPE ::= string 
            {
              SymTYPE RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymTYPE(a.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // TYPE ::= logic 
            {
              SymTYPE RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymTYPE(a.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // VALUELIST ::= VALUE 
            {
              SymVALUELIST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymVALUE a = (SymVALUE)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymVALUELIST(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUELIST",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // VALUELIST ::= VALUE comma VALUELIST 
            {
              SymVALUELIST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymVALUE a = (SymVALUE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymVALUELIST b = (SymVALUELIST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymVALUELIST(a, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUELIST",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // VALUE ::= NUM 
            {
              SymVALUE RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymNUM a = (SymNUM)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymVALUE(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // VALUE ::= LOGIC 
            {
              SymVALUE RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymLOGIC b = (SymLOGIC)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymVALUE(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // VALUE ::= STR 
            {
              SymVALUE RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymSTR c = (SymSTR)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymVALUE(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OPARITH ::= add 
            {
              SymOPARITH RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymOPARITH(a.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPARITH",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OPARITH ::= sub 
            {
              SymOPARITH RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymOPARITH(b.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPARITH",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OPARITH ::= mult 
            {
              SymOPARITH RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymOPARITH(c.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPARITH",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OPARITH ::= div 
            {
              SymOPARITH RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymOPARITH(d.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPARITH",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OPARITH ::= mod 
            {
              SymOPARITH RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymOPARITH(e.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPARITH",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OPLOGIC ::= gte 
            {
              SymOPLOGIC RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymOPLOGIC(a.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPLOGIC",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OPLOGIC ::= lt 
            {
              SymOPLOGIC RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymOPLOGIC(b.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPLOGIC",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OPLOGIC ::= equals 
            {
              SymOPLOGIC RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymOPLOGIC(c.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPLOGIC",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OPLOGIC ::= gt 
            {
              SymOPLOGIC RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymOPLOGIC(d.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPLOGIC",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OPLOGIC ::= lte 
            {
              SymOPLOGIC RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymOPLOGIC(e.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPLOGIC",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OPLOGIC ::= noteq 
            {
              SymOPLOGIC RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymOPLOGIC(f.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPLOGIC",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ANDOR ::= op_and 
            {
              SymANDOR RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymANDOR(a.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ANDOR",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ANDOR ::= op_or 
            {
              SymANDOR RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymANDOR(b.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ANDOR",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // RETURNTYPE ::= NUM 
            {
              SymRETURNTYPE RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymNUM a = (SymNUM)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymRETURNTYPE(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURNTYPE",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // RETURNTYPE ::= ID 
            {
              SymRETURNTYPE RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymID b = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymRETURNTYPE(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURNTYPE",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // RETURNTYPE ::= CALLPROC 
            {
              SymRETURNTYPE RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymCALLPROC c = (SymCALLPROC)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymRETURNTYPE(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURNTYPE",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // RETURNTYPE ::= LOGIC 
            {
              SymRETURNTYPE RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymLOGIC d = (SymLOGIC)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymRETURNTYPE(d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURNTYPE",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // RETURNTYPE ::= STR 
            {
              SymRETURNTYPE RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymSTR e = (SymSTR)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymRETURNTYPE(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURNTYPE",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // NUM ::= val_int 
            {
              SymNUM RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymNUM(Integer.valueOf(a.toString())); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NUM",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // LOGIC ::= True 
            {
              SymLOGIC RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymLOGIC(a.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOGIC",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // LOGIC ::= False 
            {
              SymLOGIC RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymLOGIC(b.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOGIC",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ID ::= val_id 
            {
              SymID RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymID(a.toString(), scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // STR ::= val_str 
            {
              SymSTR RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymSTR(a.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STR",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // OUTPUT ::= print lparen PRINT rparen 
            {
              SymOUTPUT RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymPRINT a = (SymPRINT)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymOUTPUT(a, false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OUTPUT",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // OUTPUT ::= line lparen PRINT rparen 
            {
              SymOUTPUT RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymPRINT a = (SymPRINT)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymOUTPUT(a, true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OUTPUT",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // PRINT ::= VALUELIST PRINT 
            {
              SymPRINT RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymVALUELIST a = (SymVALUELIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymPRINT b = (SymPRINT)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymPRINT(a, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRINT",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // PRINT ::= IDLIST PRINT 
            {
              SymPRINT RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymIDLIST c = (SymIDLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymPRINT b = (SymPRINT)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymPRINT(c, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRINT",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // PRINT ::= 
            {
              SymPRINT RESULT =null;
		 RESULT = new SymPRINT(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRINT",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // INPUT ::= read lparen ID rparen 
            {
              SymINPUT RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymID a = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymINPUT(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INPUT",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // CONDLABEL ::= 
            {
              SymCONDLABEL RESULT =null;
		 RESULT = new SymCONDLABEL(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDLABEL",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // CONDBRANCH ::= 
            {
              SymCONDBRANCH RESULT =null;
		 RESULT = new SymCONDBRANCH(false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDBRANCH",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // CONDBRANCHINV ::= 
            {
              SymCONDBRANCH RESULT =null;
		 RESULT = new SymCONDBRANCH(true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDBRANCHINV",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ELSE ::= 
            {
              SymELSE RESULT =null;
		 RESULT = new SymELSE(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // STARTLOOP ::= 
            {
              SymSTARTLOOP RESULT =null;
		 RESULT = new SymSTARTLOOP(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STARTLOOP",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // GSTARTLOOP ::= 
            {
              SymGSTARTLOOP RESULT =null;
		 RESULT = new SymGSTARTLOOP(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GSTARTLOOP",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // STARTMAIN ::= 
            {
              SymSTARTMAIN RESULT =null;
		 RESULT = new SymSTARTMAIN(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STARTMAIN",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // STARTPROC ::= 
            {
              SymSTARTPROC RESULT =null;
		 RESULT = new SymSTARTPROC(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STARTPROC",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // INCSCOPE ::= 
            {
              SymINCSCOPE RESULT =null;
		 RESULT = new SymINCSCOPE(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCSCOPE",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // DICSCOPE ::= 
            {
              SymDICSCOPE RESULT =null;
		 RESULT = new SymDICSCOPE(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DICSCOPE",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // PMB ::= 
            {
              SymPMB RESULT =null;
		 RESULT = new SymPMB(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PMB",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
