
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package front.parser;

import java_cup.runtime.*;
import front.symbols.*;
import front.data_structures.symbol.Symbol;
import front.scanner.LexicalScanner;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import front.error.ErrorSintax;
import front.error.ErrorFatalSintax;
import java.util.List;
import java.util.ArrayList;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\177\000\002\002\004\000\002\002\005\000\002\003" +
    "\003\000\002\003\003\000\002\003\002\000\002\005\004" +
    "\000\002\006\004\000\002\004\015\000\002\004\003\000" +
    "\002\011\004\000\002\056\003\000\002\056\002\000\002" +
    "\012\004\000\002\012\004\000\002\012\004\000\002\012" +
    "\005\000\002\012\005\000\002\012\004\000\002\012\004" +
    "\000\002\012\004\000\002\012\004\000\002\012\004\000" +
    "\002\030\005\000\002\030\003\000\002\030\002\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\036\006" +
    "\000\002\036\003\000\002\036\003\000\002\061\004\000" +
    "\002\061\002\000\002\060\003\000\002\060\003\000\002" +
    "\015\014\000\002\015\004\000\002\042\006\000\002\042" +
    "\002\000\002\017\013\000\002\017\005\000\002\020\013" +
    "\000\002\020\007\000\002\007\015\000\002\010\017\000" +
    "\002\046\005\000\002\021\006\000\002\021\005\000\002" +
    "\022\005\000\002\022\005\000\002\022\007\000\002\022" +
    "\005\000\002\022\005\000\002\023\005\000\002\024\005" +
    "\000\002\024\004\000\002\041\004\000\002\057\004\000" +
    "\002\057\002\000\002\025\006\000\002\025\004\000\002" +
    "\026\006\000\002\026\005\000\002\027\006\000\002\027" +
    "\005\000\002\035\004\000\002\034\006\000\002\034\005" +
    "\000\002\071\005\000\002\071\005\000\002\043\003\000" +
    "\002\043\005\000\002\043\002\000\002\044\004\000\002" +
    "\045\003\000\002\045\003\000\002\045\003\000\002\040" +
    "\003\000\002\040\005\000\002\032\003\000\002\032\003" +
    "\000\002\032\003\000\002\052\003\000\002\052\003\000" +
    "\002\052\003\000\002\052\003\000\002\053\003\000\002" +
    "\053\003\000\002\053\003\000\002\053\003\000\002\053" +
    "\003\000\002\053\003\000\002\054\003\000\002\054\003" +
    "\000\002\055\003\000\002\055\003\000\002\055\003\000" +
    "\002\055\003\000\002\055\003\000\002\047\003\000\002" +
    "\050\003\000\002\050\003\000\002\033\003\000\002\051" +
    "\003\000\002\013\006\000\002\013\006\000\002\013\004" +
    "\000\002\013\004\000\002\037\004\000\002\037\004\000" +
    "\002\037\002\000\002\014\006\000\002\014\004\000\002" +
    "\016\002\000\002\062\002\000\002\063\002\000\002\064" +
    "\002\000\002\065\002\000\002\066\002\000\002\067\002" +
    "\000\002\070\002\000\002\073\002\000\002\074\002\000" +
    "\002\072\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\355\000\016\003\uff87\040\uff87\042\uff87\045\uff87\046" +
    "\uff87\047\uff87\001\002\000\016\003\ufffd\040\ufffd\042\007" +
    "\045\013\046\014\047\010\001\002\000\004\002\006\001" +
    "\002\000\004\002\001\001\002\000\004\053\025\001\002" +
    "\000\012\003\uffb2\004\uffb2\043\uffb2\053\uffb2\001\002\000" +
    "\016\003\ufffd\040\ufffd\042\007\045\013\046\014\047\010" +
    "\001\002\000\016\003\ufffd\040\ufffd\042\007\045\013\046" +
    "\014\047\010\001\002\000\012\003\uffb4\004\uffb4\043\uffb4" +
    "\053\uffb4\001\002\000\012\003\uffb3\004\uffb3\043\uffb3\053" +
    "\uffb3\001\002\000\004\043\320\001\002\000\006\003\ufffe" +
    "\040\ufffe\001\002\000\006\003\021\040\023\001\002\000" +
    "\006\003\uffff\040\uffff\001\002\000\004\002\ufff9\001\002" +
    "\000\004\002\000\001\002\000\004\053\025\001\002\000" +
    "\004\015\uff86\001\002\000\072\005\uff98\006\uff98\007\uff98" +
    "\010\uff98\011\uff98\012\uff98\013\uff98\014\uff98\015\uff98\016" +
    "\uff98\017\uff98\020\uff98\021\uff98\022\uff98\023\uff98\030\uff98" +
    "\036\uff98\037\uff98\050\uff98\052\uff98\053\uff98\054\uff98\055" +
    "\uff98\056\uff98\057\uff98\060\uff98\061\uff98\062\uff98\001\002" +
    "\000\004\015\027\001\002\000\012\016\uffb6\045\013\046" +
    "\014\047\010\001\002\000\004\016\036\001\002\000\006" +
    "\016\uffb8\050\034\001\002\000\004\053\025\001\002\000" +
    "\006\016\uffb5\050\uffb5\001\002\000\012\016\uffb6\045\013" +
    "\046\014\047\010\001\002\000\004\016\uffb7\001\002\000" +
    "\030\024\uff83\025\uff83\026\uff83\027\uff83\033\uff83\034\uff83" +
    "\044\uff83\045\uff83\046\uff83\047\uff83\053\uff83\001\002\000" +
    "\030\024\uff85\025\uff85\026\uff85\027\uff85\033\uff85\034\uff85" +
    "\044\uff85\045\uff85\046\uff85\047\uff85\053\uff85\001\002\000" +
    "\030\024\060\025\044\026\055\027\061\033\uff89\034\uff89" +
    "\044\051\045\013\046\014\047\010\053\025\001\002\000" +
    "\004\006\317\001\002\000\004\006\316\001\002\000\004" +
    "\006\315\001\002\000\006\003\311\015\312\001\002\000" +
    "\004\006\310\001\002\000\004\037\uff84\001\002\000\044" +
    "\024\060\025\044\026\055\027\061\031\ufff6\032\ufff6\033" +
    "\uff89\034\uff89\035\ufff6\037\ufff6\041\ufff6\044\051\045\013" +
    "\046\014\047\010\051\ufff6\053\025\001\002\000\004\005" +
    "\301\001\002\000\012\003\272\045\013\046\014\047\010" +
    "\001\002\000\010\005\267\015\145\017\144\001\002\000" +
    "\004\037\uff84\001\002\000\004\041\uff84\001\002\000\006" +
    "\003\245\015\246\001\002\000\006\003\221\004\222\001" +
    "\002\000\006\033\176\034\177\001\002\000\046\003\076" +
    "\007\uff8d\010\uff8d\011\uff8d\012\uff8d\013\uff8d\014\uff8d\022" +
    "\uff8d\023\uff8d\052\uff8d\053\uff8d\054\uff8d\055\uff8d\056\uff8d" +
    "\057\uff8d\060\uff8d\061\uff8d\062\uff8d\001\002\000\006\003" +
    "\072\015\073\001\002\000\004\006\071\001\002\000\004" +
    "\006\070\001\002\000\004\031\067\001\002\000\004\006" +
    "\066\001\002\000\044\024\uffec\025\uffec\026\uffec\027\uffec" +
    "\031\uffec\032\uffec\033\uffec\034\uffec\035\uffec\037\uffec\041" +
    "\uffec\044\uffec\045\uffec\046\uffec\047\uffec\051\uffec\053\uffec" +
    "\001\002\000\044\024\ufff3\025\ufff3\026\ufff3\027\ufff3\031" +
    "\ufff3\032\ufff3\033\ufff3\034\ufff3\035\ufff3\037\ufff3\041\ufff3" +
    "\044\ufff3\045\ufff3\046\ufff3\047\ufff3\051\ufff3\053\ufff3\001" +
    "\002\000\044\024\ufff5\025\ufff5\026\ufff5\027\ufff5\031\ufff5" +
    "\032\ufff5\033\ufff5\034\ufff5\035\ufff5\037\ufff5\041\ufff5\044" +
    "\ufff5\045\ufff5\046\ufff5\047\ufff5\051\ufff5\053\ufff5\001\002" +
    "\000\044\024\uffef\025\uffef\026\uffef\027\uffef\031\uffef\032" +
    "\uffef\033\uffef\034\uffef\035\uffef\037\uffef\041\uffef\044\uffef" +
    "\045\uffef\046\uffef\047\uffef\051\uffef\053\uffef\001\002\000" +
    "\004\006\uff8e\001\002\000\004\053\025\001\002\000\004" +
    "\016\075\001\002\000\004\006\uff8f\001\002\000\004\031" +
    "\uffda\001\002\000\044\007\uffe9\010\uffe9\011\uffe9\012\uffe9" +
    "\013\uffe9\014\uffe9\022\uffe9\023\uffe9\052\101\053\025\054" +
    "\103\055\uffe9\056\uffe9\057\uffe9\060\uffe9\061\110\062\107" +
    "\001\002\000\044\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012" +
    "\uffe6\013\uffe6\014\uffe6\020\uffe6\022\uffe6\023\uffe6\030\uffe6" +
    "\036\uffe6\037\uffe6\055\uffe6\056\uffe6\057\uffe6\060\uffe6\001" +
    "\002\000\064\006\uff9b\007\uff9b\010\uff9b\011\uff9b\012\uff9b" +
    "\013\uff9b\014\uff9b\016\uff9b\020\uff9b\021\uff9b\022\uff9b\023" +
    "\uff9b\030\uff9b\036\uff9b\037\uff9b\050\uff9b\052\uff9b\053\uff9b" +
    "\054\uff9b\055\uff9b\056\uff9b\057\uff9b\060\uff9b\061\uff9b\062" +
    "\uff9b\001\002\000\044\006\uffe3\007\uffe3\010\uffe3\011\uffe3" +
    "\012\uffe3\013\uffe3\014\uffe3\020\uffe3\022\uffe3\023\uffe3\030" +
    "\uffe3\036\uffe3\037\uffe3\055\uffe3\056\uffe3\057\uffe3\060\uffe3" +
    "\001\002\000\062\006\uff97\007\uff97\010\uff97\011\uff97\012" +
    "\uff97\013\uff97\014\uff97\016\uff97\020\uff97\022\uff97\023\uff97" +
    "\030\uff97\036\uff97\037\uff97\050\uff97\052\uff97\053\uff97\054" +
    "\uff97\055\uff97\056\uff97\057\uff97\060\uff97\061\uff97\062\uff97" +
    "\001\002\000\044\006\uffe5\007\uffe5\010\uffe5\011\uffe5\012" +
    "\uffe5\013\uffe5\014\uffe5\020\uffe5\022\uffe5\023\uffe5\030\uffe5" +
    "\036\uffe5\037\uffe5\055\uffe5\056\uffe5\057\uffe5\060\uffe5\001" +
    "\002\000\004\030\163\001\002\000\044\007\uffe8\010\uffe8" +
    "\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015\145\017\144\022" +
    "\uffe8\023\uffe8\030\uffe1\036\uffe1\037\uffe1\055\uffe8\056\uffe8" +
    "\057\uffe8\060\uffe8\001\002\000\062\006\uff99\007\uff99\010" +
    "\uff99\011\uff99\012\uff99\013\uff99\014\uff99\016\uff99\020\uff99" +
    "\022\uff99\023\uff99\030\uff99\036\uff99\037\uff99\050\uff99\052" +
    "\uff99\053\uff99\054\uff99\055\uff99\056\uff99\057\uff99\060\uff99" +
    "\061\uff99\062\uff99\001\002\000\062\006\uff9a\007\uff9a\010" +
    "\uff9a\011\uff9a\012\uff9a\013\uff9a\014\uff9a\016\uff9a\020\uff9a" +
    "\022\uff9a\023\uff9a\030\uff9a\036\uff9a\037\uff9a\050\uff9a\052" +
    "\uff9a\053\uff9a\054\uff9a\055\uff9a\056\uff9a\057\uff9a\060\uff9a" +
    "\061\uff9a\062\uff9a\001\002\000\032\007\134\010\121\011" +
    "\133\012\115\013\123\014\116\022\126\023\124\055\127" +
    "\056\125\057\117\060\120\001\002\000\040\007\uffe7\010" +
    "\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\022\uffe7\023\uffe7" +
    "\030\uffe0\036\uffe0\037\uffe0\055\uffe7\056\uffe7\057\uffe7\060" +
    "\uffe7\001\002\000\044\006\uffe4\007\uffe4\010\uffe4\011\uffe4" +
    "\012\uffe4\013\uffe4\014\uffe4\020\uffe4\022\uffe4\023\uffe4\030" +
    "\uffe4\036\uffe4\037\uffe4\055\uffe4\056\uffe4\057\uffe4\060\uffe4" +
    "\001\002\000\044\006\uffea\007\uffea\010\uffea\011\uffea\012" +
    "\uffea\013\uffea\014\uffea\020\uffea\022\uffea\023\uffea\030\uffea" +
    "\036\uffea\037\uffea\055\uffea\056\uffea\057\uffea\060\uffea\001" +
    "\002\000\014\052\uffab\053\uffab\054\uffab\061\uffab\062\uffab" +
    "\001\002\000\014\052\uffa9\053\uffa9\054\uffa9\061\uffa9\062" +
    "\uffa9\001\002\000\052\007\uffa5\010\uffa5\011\uffa5\012\uffa5" +
    "\013\uffa5\014\uffa5\022\uffa5\023\uffa5\030\uffa5\036\uffa5\037" +
    "\uffa5\052\uffa5\053\uffa5\054\uffa5\055\uffa5\056\uffa5\057\uffa5" +
    "\060\uffa5\061\uffa5\062\uffa5\001\002\000\052\007\uffa6\010" +
    "\uffa6\011\uffa6\012\uffa6\013\uffa6\014\uffa6\022\uffa6\023\uffa6" +
    "\030\uffa6\036\uffa6\037\uffa6\052\uffa6\053\uffa6\054\uffa6\055" +
    "\uffa6\056\uffa6\057\uffa6\060\uffa6\061\uffa6\062\uffa6\001\002" +
    "\000\052\007\uffa1\010\uffa1\011\uffa1\012\uffa1\013\uffa1\014" +
    "\uffa1\022\uffa1\023\uffa1\030\uffa1\036\uffa1\037\uffa1\052\uffa1" +
    "\053\uffa1\054\uffa1\055\uffa1\056\uffa1\057\uffa1\060\uffa1\061" +
    "\uffa1\062\uffa1\001\002\000\052\007\uffdc\010\uffdc\011\uffdc" +
    "\012\uffdc\013\uffdc\014\uffdc\022\uffdc\023\uffdc\030\uffdc\036" +
    "\uffdc\037\uffdc\052\uffdc\053\uffdc\054\uffdc\055\uffdc\056\uffdc" +
    "\057\uffdc\060\uffdc\061\uffdc\062\uffdc\001\002\000\014\052" +
    "\uffaa\053\uffaa\054\uffaa\061\uffaa\062\uffaa\001\002\000\052" +
    "\007\uffa7\010\uffa7\011\uffa7\012\uffa7\013\uffa7\014\uffa7\022" +
    "\uffa7\023\uffa7\030\uffa7\036\uffa7\037\uffa7\052\uffa7\053\uffa7" +
    "\054\uffa7\055\uffa7\056\uffa7\057\uffa7\060\uffa7\061\uffa7\062" +
    "\uffa7\001\002\000\052\007\uffa3\010\uffa3\011\uffa3\012\uffa3" +
    "\013\uffa3\014\uffa3\022\uffa3\023\uffa3\030\uffa3\036\uffa3\037" +
    "\uffa3\052\uffa3\053\uffa3\054\uffa3\055\uffa3\056\uffa3\057\uffa3" +
    "\060\uffa3\061\uffa3\062\uffa3\001\002\000\052\007\uffa8\010" +
    "\uffa8\011\uffa8\012\uffa8\013\uffa8\014\uffa8\022\uffa8\023\uffa8" +
    "\030\uffa8\036\uffa8\037\uffa8\052\uffa8\053\uffa8\054\uffa8\055" +
    "\uffa8\056\uffa8\057\uffa8\060\uffa8\061\uffa8\062\uffa8\001\002" +
    "\000\052\007\uffa4\010\uffa4\011\uffa4\012\uffa4\013\uffa4\014" +
    "\uffa4\022\uffa4\023\uffa4\030\uffa4\036\uffa4\037\uffa4\052\uffa4" +
    "\053\uffa4\054\uffa4\055\uffa4\056\uffa4\057\uffa4\060\uffa4\061" +
    "\uffa4\062\uffa4\001\002\000\052\007\uffdd\010\uffdd\011\uffdd" +
    "\012\uffdd\013\uffdd\014\uffdd\022\uffdd\023\uffdd\030\uffdd\036" +
    "\uffdd\037\uffdd\052\uffdd\053\uffdd\054\uffdd\055\uffdd\056\uffdd" +
    "\057\uffdd\060\uffdd\061\uffdd\062\uffdd\001\002\000\014\052" +
    "\101\053\025\054\103\061\110\062\107\001\002\000\052" +
    "\007\uffe9\010\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9\022" +
    "\uffe9\023\uffe9\030\uffe9\036\uffe9\037\uffe9\052\101\053\025" +
    "\054\103\055\uffe9\056\uffe9\057\uffe9\060\uffe9\061\110\062" +
    "\107\001\002\000\014\052\uffac\053\uffac\054\uffac\061\uffac" +
    "\062\uffac\001\002\000\052\007\uffa2\010\uffa2\011\uffa2\012" +
    "\uffa2\013\uffa2\014\uffa2\022\uffa2\023\uffa2\030\uffa2\036\uffa2" +
    "\037\uffa2\052\uffa2\053\uffa2\054\uffa2\055\uffa2\056\uffa2\057" +
    "\uffa2\060\uffa2\061\uffa2\062\uffa2\001\002\000\050\006\uffe8" +
    "\007\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015" +
    "\145\017\144\020\uffe8\022\uffe8\023\uffe8\030\uffe8\036\uffe8" +
    "\037\uffe8\055\uffe8\056\uffe8\057\uffe8\060\uffe8\001\002\000" +
    "\044\006\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7" +
    "\014\uffe7\020\uffe7\022\uffe7\023\uffe7\030\uffe7\036\uffe7\037" +
    "\uffe7\055\uffe7\056\uffe7\057\uffe7\060\uffe7\001\002\000\040" +
    "\007\134\010\121\011\133\012\115\013\123\014\116\022" +
    "\126\023\124\030\uffde\036\uffde\037\uffde\055\127\056\125" +
    "\057\117\060\120\001\002\000\010\030\uffe2\036\uffe2\037" +
    "\uffe2\001\002\000\044\007\uffe9\010\uffe9\011\uffe9\012\uffe9" +
    "\013\uffe9\014\uffe9\022\uffe9\023\uffe9\052\101\053\025\054" +
    "\103\055\uffe9\056\uffe9\057\uffe9\060\uffe9\061\110\062\107" +
    "\001\002\000\010\030\uffdf\036\uffdf\037\uffdf\001\002\000" +
    "\050\005\uffbd\006\uffbd\007\uffbd\010\uffbd\011\uffbd\012\uffbd" +
    "\013\uffbd\014\uffbd\017\157\020\uffbd\022\uffbd\023\uffbd\030" +
    "\uffbd\036\uffbd\037\uffbd\055\uffbd\056\uffbd\057\uffbd\060\uffbd" +
    "\001\002\000\026\011\uffe9\012\uffe9\013\uffe9\014\uffe9\020" +
    "\uffe9\052\101\053\025\054\103\061\110\062\107\001\002" +
    "\000\006\016\147\053\025\001\002\000\022\006\uffc4\016" +
    "\uffc4\050\152\052\uffc4\053\uffc4\054\uffc4\061\uffc4\062\uffc4" +
    "\001\002\000\044\006\uffcf\007\uffcf\010\uffcf\011\uffcf\012" +
    "\uffcf\013\uffcf\014\uffcf\020\uffcf\022\uffcf\023\uffcf\030\uffcf" +
    "\036\uffcf\037\uffcf\055\uffcf\056\uffcf\057\uffcf\060\uffcf\001" +
    "\002\000\004\016\151\001\002\000\044\006\uffd0\007\uffd0" +
    "\010\uffd0\011\uffd0\012\uffd0\013\uffd0\014\uffd0\020\uffd0\022" +
    "\uffd0\023\uffd0\030\uffd0\036\uffd0\037\uffd0\055\uffd0\056\uffd0" +
    "\057\uffd0\060\uffd0\001\002\000\004\053\025\001\002\000" +
    "\020\006\uffc6\016\uffc6\052\uffc6\053\uffc6\054\uffc6\061\uffc6" +
    "\062\uffc6\001\002\000\020\006\uffc5\016\uffc5\052\uffc5\053" +
    "\uffc5\054\uffc5\061\uffc5\062\uffc5\001\002\000\014\011\133" +
    "\012\115\013\123\014\116\020\156\001\002\000\050\005" +
    "\uffbb\006\uffbb\007\uffbb\010\uffbb\011\uffbb\012\uffbb\013\uffbb" +
    "\014\uffbb\017\uffbb\020\uffbb\022\uffbb\023\uffbb\030\uffbb\036" +
    "\uffbb\037\uffbb\055\uffbb\056\uffbb\057\uffbb\060\uffbb\001\002" +
    "\000\026\011\uffe9\012\uffe9\013\uffe9\014\uffe9\020\uffe9\052" +
    "\101\053\025\054\103\061\110\062\107\001\002\000\014" +
    "\011\133\012\115\013\123\014\116\020\161\001\002\000" +
    "\050\005\uffbc\006\uffbc\007\uffbc\010\uffbc\011\uffbc\012\uffbc" +
    "\013\uffbc\014\uffbc\017\uffbc\020\uffbc\022\uffbc\023\uffbc\030" +
    "\uffbc\036\uffbc\037\uffbc\055\uffbc\056\uffbc\057\uffbc\060\uffbc" +
    "\001\002\000\044\006\uffeb\007\uffeb\010\uffeb\011\uffeb\012" +
    "\uffeb\013\uffeb\014\uffeb\020\uffeb\022\uffeb\023\uffeb\030\uffeb" +
    "\036\uffeb\037\uffeb\055\uffeb\056\uffeb\057\uffeb\060\uffeb\001" +
    "\002\000\030\024\uff8c\025\uff8c\026\uff8c\027\uff8c\033\uff8c" +
    "\034\uff8c\044\uff8c\045\uff8c\046\uff8c\047\uff8c\053\uff8c\001" +
    "\002\000\030\024\uff85\025\uff85\026\uff85\027\uff85\033\uff85" +
    "\034\uff85\044\uff85\045\uff85\046\uff85\047\uff85\053\uff85\001" +
    "\002\000\030\024\060\025\044\026\055\027\061\033\uff89" +
    "\034\uff89\044\051\045\013\046\014\047\010\053\025\001" +
    "\002\000\006\031\uff84\032\uff84\001\002\000\006\031\uff8a" +
    "\032\uff8a\001\002\000\006\031\uffd8\032\172\001\002\000" +
    "\004\031\uffdb\001\002\000\030\024\uff85\025\uff85\026\uff85" +
    "\027\uff85\033\uff85\034\uff85\044\uff85\045\uff85\046\uff85\047" +
    "\uff85\053\uff85\001\002\000\030\024\060\025\044\026\055" +
    "\027\061\033\uff89\034\uff89\044\051\045\013\046\014\047" +
    "\010\053\025\001\002\000\004\031\uff84\001\002\000\004" +
    "\031\uffd9\001\002\000\046\003\212\007\uff8d\010\uff8d\011" +
    "\uff8d\012\uff8d\013\uff8d\014\uff8d\022\uff8d\023\uff8d\052\uff8d" +
    "\053\uff8d\054\uff8d\055\uff8d\056\uff8d\057\uff8d\060\uff8d\061" +
    "\uff8d\062\uff8d\001\002\000\032\003\uff85\024\uff85\025\uff85" +
    "\026\uff85\027\uff85\033\uff85\034\uff85\044\uff85\045\uff85\046" +
    "\uff85\047\uff85\053\uff85\001\002\000\032\003\202\024\060" +
    "\025\044\026\055\027\061\033\uff89\034\uff89\044\051\045" +
    "\013\046\014\047\010\053\025\001\002\000\004\035\204" +
    "\001\002\000\004\037\uff88\001\002\000\004\037\uffd4\001" +
    "\002\000\044\007\uff8d\010\uff8d\011\uff8d\012\uff8d\013\uff8d" +
    "\014\uff8d\022\uff8d\023\uff8d\052\uff8d\053\uff8d\054\uff8d\055" +
    "\uff8d\056\uff8d\057\uff8d\060\uff8d\061\uff8d\062\uff8d\001\002" +
    "\000\044\007\uffe9\010\uffe9\011\uffe9\012\uffe9\013\uffe9\014" +
    "\uffe9\022\uffe9\023\uffe9\052\101\053\025\054\103\055\uffe9" +
    "\056\uffe9\057\uffe9\060\uffe9\061\110\062\107\001\002\000" +
    "\004\037\uff8b\001\002\000\004\037\uff88\001\002\000\004" +
    "\037\uffd5\001\002\000\044\007\uffe9\010\uffe9\011\uffe9\012" +
    "\uffe9\013\uffe9\014\uffe9\022\uffe9\023\uffe9\052\101\053\025" +
    "\054\103\055\uffe9\056\uffe9\057\uffe9\060\uffe9\061\110\062" +
    "\107\001\002\000\004\037\uffd6\001\002\000\004\036\214" +
    "\001\002\000\030\024\uff8c\025\uff8c\026\uff8c\027\uff8c\033" +
    "\uff8c\034\uff8c\044\uff8c\045\uff8c\046\uff8c\047\uff8c\053\uff8c" +
    "\001\002\000\030\024\uff85\025\uff85\026\uff85\027\uff85\033" +
    "\uff85\034\uff85\044\uff85\045\uff85\046\uff85\047\uff85\053\uff85" +
    "\001\002\000\030\024\060\025\044\026\055\027\061\033" +
    "\uff89\034\uff89\044\051\045\013\046\014\047\010\053\025" +
    "\001\002\000\004\037\uff88\001\002\000\004\037\uffd7\001" +
    "\002\000\004\006\uffc7\001\002\000\006\003\224\053\025" +
    "\001\002\000\012\005\226\006\uffc4\017\230\050\152\001" +
    "\002\000\004\006\uffc0\001\002\000\004\006\uffc8\001\002" +
    "\000\026\006\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9\052" +
    "\101\053\025\054\103\061\110\062\107\001\002\000\006" +
    "\006\uffc1\017\241\001\002\000\006\052\101\053\025\001" +
    "\002\000\004\021\237\001\002\000\004\021\235\001\002" +
    "\000\004\020\234\001\002\000\006\006\uffbe\017\uffbe\001" +
    "\002\000\004\053\025\001\002\000\004\020\uffba\001\002" +
    "\000\004\052\101\001\002\000\004\020\uffb9\001\002\000" +
    "\006\052\101\053\025\001\002\000\004\020\243\001\002" +
    "\000\006\006\uffbf\017\uffbf\001\002\000\014\006\uffcc\011" +
    "\133\012\115\013\123\014\116\001\002\000\004\006\uff93" +
    "\001\002\000\016\016\uff90\052\101\053\025\054\103\061" +
    "\110\062\107\001\002\000\020\016\uffaf\050\uffaf\052\uffaf" +
    "\053\uffaf\054\uffaf\061\uffaf\062\uffaf\001\002\000\016\016" +
    "\uff90\052\101\053\025\054\103\061\110\062\107\001\002" +
    "\000\016\016\uff90\052\101\053\025\054\103\061\110\062" +
    "\107\001\002\000\020\016\uffad\050\uffad\052\uffad\053\uffad" +
    "\054\uffad\061\uffad\062\uffad\001\002\000\020\016\uffb1\050" +
    "\257\052\uffb1\053\uffb1\054\uffb1\061\uffb1\062\uffb1\001\002" +
    "\000\004\016\256\001\002\000\020\016\uffae\050\uffae\052" +
    "\uffae\053\uffae\054\uffae\061\uffae\062\uffae\001\002\000\004" +
    "\006\uff95\001\002\000\012\052\101\054\103\061\110\062" +
    "\107\001\002\000\016\016\uffb0\052\uffb0\053\uffb0\054\uffb0" +
    "\061\uffb0\062\uffb0\001\002\000\004\016\uff92\001\002\000" +
    "\004\016\uff91\001\002\000\004\041\264\001\002\000\004" +
    "\002\ufffa\001\002\000\004\037\266\001\002\000\044\024" +
    "\ufff1\025\ufff1\026\ufff1\027\ufff1\031\ufff1\032\ufff1\033\ufff1" +
    "\034\ufff1\035\ufff1\037\ufff1\041\ufff1\044\ufff1\045\ufff1\046" +
    "\ufff1\047\ufff1\051\ufff1\053\ufff1\001\002\000\030\003\270" +
    "\006\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9\052\101\053" +
    "\025\054\103\061\110\062\107\001\002\000\004\006\uffcb" +
    "\001\002\000\014\006\uffce\011\133\012\115\013\123\014" +
    "\116\001\002\000\004\006\uffc2\001\002\000\004\004\274" +
    "\001\002\000\004\053\025\001\002\000\004\005\277\001" +
    "\002\000\004\006\uffc3\001\002\000\026\006\uffe9\011\uffe9" +
    "\012\uffe9\013\uffe9\014\uffe9\052\101\053\025\054\103\061" +
    "\110\062\107\001\002\000\014\006\uffc9\011\133\012\115" +
    "\013\123\014\116\001\002\000\030\003\302\006\uffe9\011" +
    "\uffe9\012\uffe9\013\uffe9\014\uffe9\052\101\053\025\054\103" +
    "\061\110\062\107\001\002\000\004\006\uffca\001\002\000" +
    "\014\006\uffcd\011\133\012\115\013\123\014\116\001\002" +
    "\000\016\031\ufff7\032\ufff7\035\ufff7\037\ufff7\041\ufff7\051" +
    "\ufff7\001\002\000\016\031\ufff8\032\ufff8\035\ufff8\037\ufff8" +
    "\041\ufff8\051\ufff8\001\002\000\004\037\307\001\002\000" +
    "\044\024\ufff2\025\ufff2\026\ufff2\027\ufff2\031\ufff2\032\ufff2" +
    "\033\ufff2\034\ufff2\035\ufff2\037\ufff2\041\ufff2\044\ufff2\045" +
    "\ufff2\046\ufff2\047\ufff2\051\ufff2\053\ufff2\001\002\000\044" +
    "\024\uffee\025\uffee\026\uffee\027\uffee\031\uffee\032\uffee\033" +
    "\uffee\034\uffee\035\uffee\037\uffee\041\uffee\044\uffee\045\uffee" +
    "\046\uffee\047\uffee\051\uffee\053\uffee\001\002\000\004\006" +
    "\uff94\001\002\000\016\016\uff90\052\101\053\025\054\103" +
    "\061\110\062\107\001\002\000\004\016\314\001\002\000" +
    "\004\006\uff96\001\002\000\044\024\uffed\025\uffed\026\uffed" +
    "\027\uffed\031\uffed\032\uffed\033\uffed\034\uffed\035\uffed\037" +
    "\uffed\041\uffed\044\uffed\045\uffed\046\uffed\047\uffed\051\uffed" +
    "\053\uffed\001\002\000\044\024\ufff0\025\ufff0\026\ufff0\027" +
    "\ufff0\031\ufff0\032\ufff0\033\ufff0\034\ufff0\035\ufff0\037\ufff0" +
    "\041\ufff0\044\ufff0\045\ufff0\046\ufff0\047\ufff0\051\ufff0\053" +
    "\ufff0\001\002\000\044\024\ufff4\025\ufff4\026\ufff4\027\ufff4" +
    "\031\ufff4\032\ufff4\033\ufff4\034\ufff4\035\ufff4\037\ufff4\041" +
    "\ufff4\044\ufff4\045\ufff4\046\ufff4\047\ufff4\051\ufff4\053\ufff4" +
    "\001\002\000\004\053\025\001\002\000\004\015\uff86\001" +
    "\002\000\004\015\323\001\002\000\012\016\uffb6\045\013" +
    "\046\014\047\010\001\002\000\004\016\325\001\002\000" +
    "\030\024\uff83\025\uff83\026\uff83\027\uff83\033\uff83\034\uff83" +
    "\044\uff83\045\uff83\046\uff83\047\uff83\053\uff83\001\002\000" +
    "\030\024\uff85\025\uff85\026\uff85\027\uff85\033\uff85\034\uff85" +
    "\044\uff85\045\uff85\046\uff85\047\uff85\053\uff85\001\002\000" +
    "\030\024\060\025\044\026\055\027\061\033\uff89\034\uff89" +
    "\044\051\045\013\046\014\047\010\053\025\001\002\000" +
    "\004\051\332\001\002\000\004\041\uff84\001\002\000\014" +
    "\052\101\053\025\054\103\061\110\062\107\001\002\000" +
    "\004\006\uffa0\001\002\000\004\006\uff9c\001\002\000\004" +
    "\006\341\001\002\000\004\006\uff9e\001\002\000\006\006" +
    "\uff9f\015\145\001\002\000\004\006\uff9d\001\002\000\004" +
    "\041\uffd1\001\002\000\004\041\343\001\002\000\016\003" +
    "\uffd2\040\uffd2\042\uffd2\045\uffd2\046\uffd2\047\uffd2\001\002" +
    "\000\006\003\ufffb\040\ufffb\001\002\000\006\003\ufffc\040" +
    "\ufffc\001\002\000\004\015\uff86\001\002\000\004\015\350" +
    "\001\002\000\012\016\uffb6\045\013\046\014\047\010\001" +
    "\002\000\004\016\352\001\002\000\030\024\uff83\025\uff83" +
    "\026\uff83\027\uff83\033\uff83\034\uff83\044\uff83\045\uff83\046" +
    "\uff83\047\uff83\053\uff83\001\002\000\030\024\uff85\025\uff85" +
    "\026\uff85\027\uff85\033\uff85\034\uff85\044\uff85\045\uff85\046" +
    "\uff85\047\uff85\053\uff85\001\002\000\030\024\060\025\044" +
    "\026\055\027\061\033\uff89\034\uff89\044\051\045\013\046" +
    "\014\047\010\053\025\001\002\000\004\041\uff84\001\002" +
    "\000\004\041\357\001\002\000\016\003\uffd3\040\uffd3\042" +
    "\uffd3\045\uffd3\046\uffd3\047\uffd3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\355\000\006\002\004\067\003\001\001\000\016\003" +
    "\016\005\017\006\015\007\010\010\011\045\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\033\345\001" +
    "\001\000\002\001\001\000\016\003\344\005\017\006\015" +
    "\007\010\010\011\045\014\001\001\000\016\003\343\005" +
    "\017\006\015\007\010\010\011\045\014\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\033\023\001\001\000" +
    "\004\070\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\043\027\044\030\045\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\032\001\001\000\002" +
    "\001\001\000\010\043\034\044\030\045\031\001\001\000" +
    "\002\001\001\000\004\072\036\001\001\000\004\073\037" +
    "\001\001\000\042\011\053\012\046\013\062\014\040\015" +
    "\063\017\045\020\052\021\041\022\061\024\044\025\042" +
    "\026\064\033\051\035\047\045\055\065\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\074\305\001\001\000" +
    "\044\011\303\012\046\013\062\014\040\015\063\017\045" +
    "\020\052\021\041\022\061\024\044\025\042\026\064\033" +
    "\051\035\047\045\055\056\304\065\056\001\001\000\002" +
    "\001\001\000\004\045\272\001\001\000\004\034\142\001" +
    "\001\000\004\074\264\001\001\000\004\074\262\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\076\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\033\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\021\103\030\110\031\113\033\105\035\111\036\104\047" +
    "\077\050\112\051\101\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\034\142\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\052\130\053\121\054" +
    "\127\060\131\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\021\103\031\161\033\134\035\135\047\077\050" +
    "\112\051\101\001\001\000\022\021\103\030\136\031\113" +
    "\033\134\035\135\047\077\050\112\051\101\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\034\142\001\001" +
    "\000\002\001\001\000\014\052\130\053\121\054\127\060" +
    "\140\061\137\001\001\000\002\001\001\000\024\021\103" +
    "\030\110\031\113\033\105\035\111\036\141\047\077\050" +
    "\112\051\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\021\103\030\154\031\113\033\134\035\135\047" +
    "\077\050\112\051\101\001\001\000\006\033\145\041\147" +
    "\001\001\000\004\057\152\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\033\145\041\153" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\052" +
    "\130\001\001\000\002\001\001\000\022\021\103\030\157" +
    "\031\113\033\134\035\135\047\077\050\112\051\101\001" +
    "\001\000\004\052\130\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\062\163\001\001\000\004\073\164\001" +
    "\001\000\042\011\165\012\046\013\062\014\040\015\063" +
    "\017\045\020\052\021\041\022\061\024\044\025\042\026" +
    "\064\033\051\035\047\045\055\065\056\001\001\000\004" +
    "\074\166\001\001\000\004\064\167\001\001\000\004\042" +
    "\170\001\001\000\002\001\001\000\004\073\172\001\001" +
    "\000\042\011\173\012\046\013\062\014\040\015\063\017" +
    "\045\020\052\021\041\022\061\024\044\025\042\026\064" +
    "\033\051\035\047\045\055\065\056\001\001\000\004\074" +
    "\174\001\001\000\002\001\001\000\004\016\210\001\001" +
    "\000\004\073\177\001\001\000\042\011\200\012\046\013" +
    "\062\014\040\015\063\017\045\020\052\021\041\022\061" +
    "\024\044\025\042\026\064\033\051\035\047\045\055\065" +
    "\056\001\001\000\002\001\001\000\004\066\202\001\001" +
    "\000\002\001\001\000\004\016\204\001\001\000\024\021" +
    "\103\030\110\031\113\033\105\035\111\036\205\047\077" +
    "\050\112\051\101\001\001\000\004\063\206\001\001\000" +
    "\004\066\207\001\001\000\002\001\001\000\024\021\103" +
    "\030\110\031\113\033\105\035\111\036\212\047\077\050" +
    "\112\051\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\062\214\001\001\000\004\073\215\001\001\000" +
    "\042\011\216\012\046\013\062\014\040\015\063\017\045" +
    "\020\052\021\041\022\061\024\044\025\042\026\064\033" +
    "\051\035\047\045\055\065\056\001\001\000\004\066\217" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\033" +
    "\222\041\224\001\001\000\006\027\226\057\152\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\021\103\030" +
    "\243\031\113\033\134\035\135\047\077\050\112\051\101" +
    "\001\001\000\002\001\001\000\010\033\231\047\230\071" +
    "\232\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\033\235\001\001\000" +
    "\002\001\001\000\004\047\237\001\001\000\002\001\001" +
    "\000\010\033\231\047\230\071\241\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\052\130\001\001\000\002" +
    "\001\001\000\022\032\252\033\145\037\253\040\250\041" +
    "\247\047\246\050\254\051\251\001\001\000\002\001\001" +
    "\000\022\032\252\033\145\037\261\040\250\041\247\047" +
    "\246\050\254\051\251\001\001\000\022\032\252\033\145" +
    "\037\260\040\250\041\247\047\246\050\254\051\251\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\032\252\040" +
    "\257\047\246\050\254\051\251\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\021\103\030\270\031\113\033\134\035\135\047\077\050" +
    "\112\051\101\001\001\000\002\001\001\000\004\052\130" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\023" +
    "\275\033\274\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\021\103\030\277\031\113\033\134\035\135\047" +
    "\077\050\112\051\101\001\001\000\004\052\130\001\001" +
    "\000\022\021\103\030\302\031\113\033\134\035\135\047" +
    "\077\050\112\051\101\001\001\000\002\001\001\000\004" +
    "\052\130\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\032\252\033\145\037\312\040\250\041" +
    "\247\047\246\050\254\051\251\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\033\320\001\001\000\004\070\321" +
    "\001\001\000\002\001\001\000\010\043\323\044\030\045" +
    "\031\001\001\000\002\001\001\000\004\072\325\001\001" +
    "\000\004\073\326\001\001\000\042\011\327\012\046\013" +
    "\062\014\040\015\063\017\045\020\052\021\041\022\061" +
    "\024\044\025\042\026\064\033\051\035\047\045\055\065" +
    "\056\001\001\000\004\046\330\001\001\000\004\074\341" +
    "\001\001\000\016\021\335\033\336\047\332\050\337\051" +
    "\333\055\334\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\070" +
    "\346\001\001\000\002\001\001\000\010\043\350\044\030" +
    "\045\031\001\001\000\002\001\001\000\004\072\352\001" +
    "\001\000\004\073\353\001\001\000\042\011\354\012\046" +
    "\013\062\014\040\015\063\017\045\020\052\021\041\022" +
    "\061\024\044\025\042\026\064\033\051\035\047\045\055" +
    "\065\056\001\001\000\004\074\355\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private boolean sintacticErrors = false;

    // Overrided method from lr_parser
    public void syntax_error(Symbol cur_token) {
    }

    // Overrided method from lr_parser
    protected String show_expected_token_ids() {
    return null;
    }

    public void apuntar_error(int[] lc) {
        new ErrorSintax().printError(lc, "");
        this.sintacticErrors = true;
    }

    public boolean getSintacticErrors() {
        return this.sintacticErrors;
    }

    // Overrided method from lr_parser
    public void report_error ( String message, Object info) {
    }


    // Overrided method from lr_parser
    public void report_fatal_error(String message, Object info) throws Exception {
        new ErrorFatalSintax().printError(new int[]{0, 0}, message);
        throw new ErrorFatalSintax();
    }

    private LexicalScanner scanner;

    public Parser(LexicalScanner scanner, java_cup.runtime.SymbolFactory sf) {
        super(scanner, sf);
        this.scanner = scanner;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= START EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymSTART start_val = (SymSTART)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // START ::= STARTMAIN METFUNC DECMP 
            {
              SymSTART RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymMETFUNC a = (SymMETFUNC)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymDECMP b = (SymDECMP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymSTART(a, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // METFUNC ::= DECMETLIST 
            {
              SymMETFUNC RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymDECMETLIST a = (SymDECMETLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymMETFUNC(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METFUNC",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // METFUNC ::= DECFUNCLIST 
            {
              SymMETFUNC RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymDECFUNCLIST b = (SymDECFUNCLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymMETFUNC(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METFUNC",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // METFUNC ::= 
            {
              SymMETFUNC RESULT =null;
		 RESULT = new SymMETFUNC(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METFUNC",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECMETLIST ::= DECMET METFUNC 
            {
              SymDECMETLIST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymDECMET a = (SymDECMET)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymMETFUNC b = (SymMETFUNC)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymDECMETLIST(a, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECMETLIST",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECFUNCLIST ::= DECFUNC METFUNC 
            {
              SymDECFUNCLIST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymDECFUNC a = (SymDECFUNC)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymMETFUNC b = (SymMETFUNC)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymDECFUNCLIST(a, b, scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECFUNCLIST",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECMP ::= prog ID STARTPROC lparen ARGLIST rparen PMB INCSCOPE SENTLIST DICSCOPE end 
            {
              SymDECMP RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		SymID a = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		SymARGLIST b = (SymARGLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymSENTLIST c = (SymSENTLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new SymDECMP(a, b, c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECMP",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECMP ::= error 
            {
              SymDECMP RESULT =null;
		 apuntar_error(scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECMP",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTLIST ::= SENT SENTLISTSEP 
            {
              SymSENTLIST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymSENT a = (SymSENT)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymSENTLISTSEP b = (SymSENTLISTSEP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymSENTLIST(a, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTLISTSEP ::= SENTLIST 
            {
              SymSENTLISTSEP RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymSENTLIST a = (SymSENTLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymSENTLISTSEP(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTLISTSEP",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTLISTSEP ::= 
            {
              SymSENTLISTSEP RESULT =null;
		 RESULT = new SymSENTLISTSEP();  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTLISTSEP",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENT ::= OUTPUT scolon 
            {
              SymSENT RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymOUTPUT a = (SymOUTPUT)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymSENT(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENT ::= INPUT scolon 
            {
              SymSENT RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymINPUT b = (SymINPUT)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymSENT(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENT ::= CONDIF endif 
            {
              SymSENT RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymCONDIF c = (SymCONDIF)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymSENT(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENT ::= WHILE DICSCOPE endloop 
            {
              SymSENT RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymWHILE d = (SymWHILE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new SymSENT(d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENT ::= REPUNTIL DICSCOPE endloop 
            {
              SymSENT RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymREPUNTIL e = (SymREPUNTIL)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new SymSENT(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENT ::= CALLPROC scolon 
            {
              SymSENT RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymCALLPROC f = (SymCALLPROC)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymSENT(f); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENT ::= ASSIGN scolon 
            {
              SymSENT RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymASSIGN g = (SymASSIGN)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymSENT(g); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENT ::= DECVAR scolon 
            {
              SymSENT RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymDECVAR h = (SymDECVAR)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymSENT(h); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENT ::= DECLARECONST scolon 
            {
              SymSENT RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymDECLARECONST i = (SymDECLARECONST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymSENT(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENT ::= DECARRAY scolon 
            {
              SymSENT RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymDECARRAY j = (SymDECARRAY)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymSENT(j); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // OPERANDX ::= OPERANDX OPARITH SUBTYPE 
            {
              SymOPERANDX RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymOPERANDX a = (SymOPERANDX)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymOPARITH b = (SymOPARITH)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymSUBTYPE c = (SymSUBTYPE)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new SymOPERANDX(a, b, c, scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERANDX",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // OPERANDX ::= SUBTYPE 
            {
              SymOPERANDX RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymSUBTYPE b = (SymSUBTYPE)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new SymOPERANDX(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERANDX",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // OPERANDX ::= 
            {
              SymOPERANDX RESULT =null;
		  RESULT = new SymOPERANDX(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERANDX",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SUBTYPE ::= ID 
            {
              SymSUBTYPE RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymID a = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new SymSUBTYPE(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SUBTYPE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SUBTYPE ::= IDARRAY 
            {
              SymSUBTYPE RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymIDARRAY b = (SymIDARRAY)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new SymSUBTYPE(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SUBTYPE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SUBTYPE ::= NUM 
            {
              SymSUBTYPE RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymNUM c = (SymNUM)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new SymSUBTYPE(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SUBTYPE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SUBTYPE ::= CALLPROC 
            {
              SymSUBTYPE RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymCALLPROC d = (SymCALLPROC)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new SymSUBTYPE(d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SUBTYPE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SUBTYPE ::= LOGIC 
            {
              SymSUBTYPE RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymLOGIC e = (SymLOGIC)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new SymSUBTYPE(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SUBTYPE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SUBTYPE ::= STR 
            {
              SymSUBTYPE RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymSTR f = (SymSTR)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new SymSUBTYPE(f); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SUBTYPE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CONDITION ::= OPERANDX OPERATION OPERANDX CONDEXT 
            {
              SymCONDITION RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymOPERANDX a = (SymOPERANDX)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymOPERATION b = (SymOPERATION)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymOPERANDX c = (SymOPERANDX)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymCONDEXT d = (SymCONDEXT)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymCONDITION(a, b, c, d, scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDITION",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CONDITION ::= ID 
            {
              SymCONDITION RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymID a = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymCONDITION(a, scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDITION",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CONDITION ::= IDARRAY 
            {
              SymCONDITION RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymIDARRAY a = (SymIDARRAY)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymCONDITION(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDITION",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CONDEXT ::= OPERATION CONDITION 
            {
              SymCONDEXT RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymOPERATION a = (SymOPERATION)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymCONDITION b = (SymCONDITION)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymCONDEXT(a, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDEXT",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CONDEXT ::= 
            {
              SymCONDEXT RESULT =null;
		 RESULT = new SymCONDEXT(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDEXT",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OPERATION ::= ANDOR 
            {
              SymOPERATION RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymANDOR a = (SymANDOR)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymOPERATION(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERATION",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OPERATION ::= OPLOGIC 
            {
              SymOPERATION RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymOPLOGIC b = (SymOPLOGIC)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymOPERATION(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERATION",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CONDIF ::= If CONDLABEL CONDITION then CONDBRANCH INCSCOPE SENTLIST DICSCOPE ELSE CONDELSE 
            {
              SymCONDIF RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		SymCONDITION a = (SymCONDITION)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymSENTLIST b = (SymSENTLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymCONDELSE c = (SymCONDELSE)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymCONDIF(a, b, c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDIF",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CONDIF ::= If error 
            {
              SymCONDIF RESULT =null;
		 apuntar_error(scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDIF",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CONDELSE ::= Else INCSCOPE SENTLIST DICSCOPE 
            {
              SymCONDELSE RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymSENTLIST a = (SymSENTLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymCONDELSE(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDELSE",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CONDELSE ::= 
            {
              SymCONDELSE RESULT =null;
		 RESULT = new SymCONDELSE(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDELSE",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // WHILE ::= STARTLOOP While CONDLABEL CONDITION loop CONDBRANCH INCSCOPE SENTLIST GSTARTLOOP 
            {
              SymWHILE RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		SymCONDITION a = (SymCONDITION)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymSENTLIST b = (SymSENTLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymWHILE(a, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WHILE",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // WHILE ::= STARTLOOP While error 
            {
              SymWHILE RESULT =null;
		 apuntar_error(scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WHILE",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // REPUNTIL ::= STARTLOOP Repeat INCSCOPE SENTLIST Until CONDLABEL CONDITION CONDBRANCHINV GSTARTLOOP 
            {
              SymREPUNTIL RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		SymSENTLIST a = (SymSENTLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymCONDITION b = (SymCONDITION)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new SymREPUNTIL(b, a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("REPUNTIL",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // REPUNTIL ::= STARTLOOP Repeat INCSCOPE error GSTARTLOOP 
            {
              SymREPUNTIL RESULT =null;
		 apuntar_error(scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("REPUNTIL",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECMET ::= method ID STARTPROC lparen ARGLIST rparen PMB INCSCOPE SENTLIST DICSCOPE end 
            {
              SymDECMET RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		SymID a = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		SymARGLIST b = (SymARGLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymSENTLIST c = (SymSENTLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new SymDECMET(a, b, c, scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECMET",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECFUNC ::= TYPE func ID STARTPROC lparen ARGLIST rparen PMB INCSCOPE SENTLIST RETURN DICSCOPE end 
            {
              SymDECFUNC RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).right;
		SymTYPE a = (SymTYPE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-12)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		SymID b = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		SymARGLIST c = (SymARGLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymSENTLIST d = (SymSENTLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymRETURN e = (SymRETURN)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new SymDECFUNC(a, b, c, d, e, scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECFUNC",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // RETURN ::= Return RETURNTYPE scolon 
            {
              SymRETURN RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymRETURNTYPE a = (SymRETURNTYPE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymRETURN(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CALLPROC ::= ID lparen IDLIST rparen 
            {
              SymCALLPROC RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymID a = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymIDLIST b = (SymIDLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymCALLPROC(a, b, scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CALLPROC",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CALLPROC ::= ID lparen rparen 
            {
              SymCALLPROC RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymID a = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new SymCALLPROC(a, scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CALLPROC",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ASSIGN ::= ID assign OPERANDX 
            {
              SymASSIGN RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymID a = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymOPERANDX b = (SymOPERANDX)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymASSIGN(a, b, scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGN",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ASSIGN ::= IDARRAY assign OPERANDX 
            {
              SymASSIGN RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymIDARRAY a = (SymIDARRAY)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymOPERANDX b = (SymOPERANDX)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymASSIGN(a, b, scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGN",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ASSIGN ::= TYPE colons ID assign OPERANDX 
            {
              SymASSIGN RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		SymTYPE a = (SymTYPE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymID b = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymOPERANDX c = (SymOPERANDX)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymASSIGN(a, b, c, scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGN",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ASSIGN ::= ID assign error 
            {
              SymASSIGN RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymID a = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 apuntar_error(scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGN",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ASSIGN ::= IDARRAY assign error 
            {
              SymASSIGN RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymIDARRAY a = (SymIDARRAY)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 apuntar_error(scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGN",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ASSIGNCONST ::= ID assign OPERANDX 
            {
              SymASSIGNCONST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymID a = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymOPERANDX b = (SymOPERANDX)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymASSIGNCONST(a, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGNCONST",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECVAR ::= TYPE colons IDLIST 
            {
              SymDECVAR RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymTYPE a = (SymTYPE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymIDLIST b = (SymIDLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymDECVAR(a, b, scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECVAR",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECVAR ::= TYPE error 
            {
              SymDECVAR RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymTYPE a = (SymTYPE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 apuntar_error(scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECVAR",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // IDLIST ::= ID IDLISTSEP 
            {
              SymIDLIST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymID a = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymIDLISTSEP b = (SymIDLISTSEP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymIDLIST(a, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDLIST",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // IDLISTSEP ::= comma IDLIST 
            {
              SymIDLISTSEP RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymIDLIST a = (SymIDLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymIDLISTSEP(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDLISTSEP",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // IDLISTSEP ::= 
            {
              SymIDLISTSEP RESULT =null;
		 RESULT = new SymIDLISTSEP(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDLISTSEP",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DECLARECONST ::= Const TYPE colons ASSIGNCONST 
            {
              SymDECLARECONST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymTYPE a = (SymTYPE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymASSIGNCONST b = (SymASSIGNCONST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymDECLARECONST(a, b, scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARECONST",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DECLARECONST ::= Const error 
            {
              SymDECLARECONST RESULT =null;
		 apuntar_error(scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARECONST",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECARRAY ::= TYPE colons ID DECLISTDIM 
            {
              SymDECARRAY RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymTYPE a = (SymTYPE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymID b = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymDECLISTDIM c = (SymDECLISTDIM)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymDECARRAY(a, b, c, scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECARRAY",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DECARRAY ::= TYPE colons error 
            {
              SymDECARRAY RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymTYPE a = (SymTYPE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 apuntar_error(scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECARRAY",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DECLISTDIM ::= DECLISTDIM lbrckt SUBRANGE rbrckt 
            {
              SymDECLISTDIM RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymDECLISTDIM a = (SymDECLISTDIM)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymSUBRANGE b = (SymSUBRANGE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		   RESULT = new SymDECLISTDIM(a, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLISTDIM",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DECLISTDIM ::= lbrckt SUBRANGE rbrckt 
            {
              SymDECLISTDIM RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymSUBRANGE a = (SymSUBRANGE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymDECLISTDIM(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLISTDIM",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // IDARRAY ::= ID IDLISTDIM 
            {
              SymIDARRAY RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymID a = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymIDLISTDIM b = (SymIDLISTDIM)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymIDARRAY(a,b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDARRAY",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // IDLISTDIM ::= IDLISTDIM lbrckt OPERANDX rbrckt 
            {
              SymIDLISTDIM RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymIDLISTDIM a = (SymIDLISTDIM)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymOPERANDX b = (SymOPERANDX)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymIDLISTDIM(a,b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDLISTDIM",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // IDLISTDIM ::= lbrckt OPERANDX rbrckt 
            {
              SymIDLISTDIM RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymOPERANDX a = (SymOPERANDX)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymIDLISTDIM(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDLISTDIM",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SUBRANGE ::= ID dotdot ID 
            {
              SymSUBRANGE RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymID a = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymID b = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymSUBRANGE(a, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SUBRANGE",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SUBRANGE ::= NUM dotdot NUM 
            {
              SymSUBRANGE RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymNUM a = (SymNUM)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymNUM b = (SymNUM)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymSUBRANGE(a,b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SUBRANGE",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ARGLIST ::= ARG 
            {
              SymARGLIST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymARG a = (SymARG)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymARGLIST(a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGLIST",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ARGLIST ::= ARG comma ARGLIST 
            {
              SymARGLIST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymARG a = (SymARG)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymARGLIST b = (SymARGLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymARGLIST(a, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGLIST",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ARGLIST ::= 
            {
              SymARGLIST RESULT =null;
		 RESULT = new SymARGLIST(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGLIST",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ARG ::= TYPE ID 
            {
              SymARG RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymTYPE a = (SymTYPE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymID b = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new SymARG(a, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARG",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // TYPE ::= integer 
            {
              SymTYPE RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymTYPE(a.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // TYPE ::= string 
            {
              SymTYPE RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymTYPE(a.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // TYPE ::= logic 
            {
              SymTYPE RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymTYPE(a.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // VALUELIST ::= VALUE 
            {
              SymVALUELIST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymVALUE a = (SymVALUE)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymVALUELIST(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUELIST",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // VALUELIST ::= VALUE comma VALUELIST 
            {
              SymVALUELIST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymVALUE a = (SymVALUE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymVALUELIST b = (SymVALUELIST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymVALUELIST(a, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUELIST",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // VALUE ::= NUM 
            {
              SymVALUE RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymNUM a = (SymNUM)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymVALUE(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // VALUE ::= LOGIC 
            {
              SymVALUE RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymLOGIC b = (SymLOGIC)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymVALUE(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // VALUE ::= STR 
            {
              SymVALUE RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymSTR c = (SymSTR)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymVALUE(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OPARITH ::= add 
            {
              SymOPARITH RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymOPARITH(a.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPARITH",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OPARITH ::= sub 
            {
              SymOPARITH RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymOPARITH(b.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPARITH",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OPARITH ::= mult 
            {
              SymOPARITH RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymOPARITH(c.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPARITH",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OPARITH ::= div 
            {
              SymOPARITH RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymOPARITH(d.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPARITH",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // OPLOGIC ::= gte 
            {
              SymOPLOGIC RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymOPLOGIC(a.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPLOGIC",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // OPLOGIC ::= lt 
            {
              SymOPLOGIC RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymOPLOGIC(b.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPLOGIC",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // OPLOGIC ::= equals 
            {
              SymOPLOGIC RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymOPLOGIC(c.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPLOGIC",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // OPLOGIC ::= gt 
            {
              SymOPLOGIC RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymOPLOGIC(d.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPLOGIC",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // OPLOGIC ::= lte 
            {
              SymOPLOGIC RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymOPLOGIC(e.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPLOGIC",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // OPLOGIC ::= noteq 
            {
              SymOPLOGIC RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymOPLOGIC(f.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPLOGIC",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ANDOR ::= op_and 
            {
              SymANDOR RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymANDOR(a.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ANDOR",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ANDOR ::= op_or 
            {
              SymANDOR RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymANDOR(b.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ANDOR",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // RETURNTYPE ::= NUM 
            {
              SymRETURNTYPE RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymNUM a = (SymNUM)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymRETURNTYPE(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURNTYPE",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // RETURNTYPE ::= ID 
            {
              SymRETURNTYPE RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymID b = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymRETURNTYPE(b, scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURNTYPE",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // RETURNTYPE ::= CALLPROC 
            {
              SymRETURNTYPE RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymCALLPROC c = (SymCALLPROC)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymRETURNTYPE(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURNTYPE",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // RETURNTYPE ::= LOGIC 
            {
              SymRETURNTYPE RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymLOGIC d = (SymLOGIC)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymRETURNTYPE(d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURNTYPE",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // RETURNTYPE ::= STR 
            {
              SymRETURNTYPE RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymSTR e = (SymSTR)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymRETURNTYPE(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURNTYPE",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // NUM ::= val_int 
            {
              SymNUM RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymNUM(Integer.valueOf(a.toString())); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NUM",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // LOGIC ::= True 
            {
              SymLOGIC RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymLOGIC(a.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOGIC",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // LOGIC ::= False 
            {
              SymLOGIC RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymLOGIC(b.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOGIC",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ID ::= val_id 
            {
              SymID RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymID(a.toString(), scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // STR ::= val_str 
            {
              SymSTR RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymSTR(a.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STR",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // OUTPUT ::= print lparen PRINT rparen 
            {
              SymOUTPUT RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymPRINT a = (SymPRINT)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymOUTPUT(a, false, scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OUTPUT",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // OUTPUT ::= line lparen PRINT rparen 
            {
              SymOUTPUT RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymPRINT a = (SymPRINT)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymOUTPUT(a, true, scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OUTPUT",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // OUTPUT ::= print error 
            {
              SymOUTPUT RESULT =null;
		 apuntar_error(scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OUTPUT",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // OUTPUT ::= line error 
            {
              SymOUTPUT RESULT =null;
		 apuntar_error(scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OUTPUT",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // PRINT ::= VALUELIST PRINT 
            {
              SymPRINT RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymVALUELIST a = (SymVALUELIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymPRINT b = (SymPRINT)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymPRINT(a, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRINT",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // PRINT ::= IDLIST PRINT 
            {
              SymPRINT RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymIDLIST c = (SymIDLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymPRINT b = (SymPRINT)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymPRINT(c, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRINT",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // PRINT ::= 
            {
              SymPRINT RESULT =null;
		 RESULT = new SymPRINT(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRINT",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // INPUT ::= read lparen ID rparen 
            {
              SymINPUT RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymID a = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymINPUT(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INPUT",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // INPUT ::= read error 
            {
              SymINPUT RESULT =null;
		 apuntar_error(scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INPUT",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // CONDLABEL ::= 
            {
              SymCONDLABEL RESULT =null;
		 RESULT = new SymCONDLABEL(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDLABEL",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // CONDBRANCH ::= 
            {
              SymCONDBRANCH RESULT =null;
		 RESULT = new SymCONDBRANCH(false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDBRANCH",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // CONDBRANCHINV ::= 
            {
              SymCONDBRANCH RESULT =null;
		 RESULT = new SymCONDBRANCH(true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDBRANCHINV",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ELSE ::= 
            {
              SymELSE RESULT =null;
		 RESULT = new SymELSE(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // STARTLOOP ::= 
            {
              SymSTARTLOOP RESULT =null;
		 RESULT = new SymSTARTLOOP(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STARTLOOP",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // GSTARTLOOP ::= 
            {
              SymGSTARTLOOP RESULT =null;
		 RESULT = new SymGSTARTLOOP(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GSTARTLOOP",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // STARTMAIN ::= 
            {
              SymSTARTMAIN RESULT =null;
		 RESULT = new SymSTARTMAIN(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STARTMAIN",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // STARTPROC ::= 
            {
              SymSTARTPROC RESULT =null;
		 RESULT = new SymSTARTPROC(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STARTPROC",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // INCSCOPE ::= 
            {
              SymINCSCOPE RESULT =null;
		 RESULT = new SymINCSCOPE(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCSCOPE",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // DICSCOPE ::= 
            {
              SymDICSCOPE RESULT =null;
		 RESULT = new SymDICSCOPE(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DICSCOPE",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // PMB ::= 
            {
              SymPMB RESULT =null;
		 RESULT = new SymPMB(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PMB",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
