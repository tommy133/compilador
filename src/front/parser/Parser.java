
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package front.parser;

import front.symbols.*;
import front.scanner.LexicalScanner;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\145\000\002\002\004\000\002\002\004\000\002\003" +
    "\003\000\002\003\003\000\002\003\002\000\002\005\004" +
    "\000\002\006\004\000\002\004\016\000\002\011\004\000" +
    "\002\051\003\000\002\051\002\000\002\012\004\000\002" +
    "\012\004\000\002\012\004\000\002\012\005\000\002\012" +
    "\004\000\002\012\004\000\002\012\004\000\002\024\005" +
    "\000\002\024\003\000\002\024\002\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\030\006\000\002\030\003\000\002\056" +
    "\004\000\002\056\002\000\002\055\003\000\002\055\003" +
    "\000\002\015\014\000\002\034\006\000\002\034\002\000" +
    "\002\017\013\000\002\007\015\000\002\020\006\000\002" +
    "\020\005\000\002\010\017\000\002\040\005\000\002\021" +
    "\006\000\002\021\005\000\002\022\005\000\002\054\005" +
    "\000\002\053\005\000\002\053\002\000\002\041\006\000" +
    "\002\023\005\000\002\033\004\000\002\052\004\000\002" +
    "\052\002\000\002\035\003\000\002\035\005\000\002\035" +
    "\002\000\002\036\004\000\002\037\003\000\002\037\003" +
    "\000\002\037\003\000\002\032\003\000\002\032\005\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\045\003\000\002\045\003\000\002\045\003\000\002\045" +
    "\003\000\002\045\003\000\002\046\003\000\002\046\003" +
    "\000\002\046\003\000\002\046\003\000\002\046\003\000" +
    "\002\046\003\000\002\047\003\000\002\047\003\000\002" +
    "\050\003\000\002\050\003\000\002\050\003\000\002\050" +
    "\003\000\002\050\003\000\002\042\003\000\002\043\003" +
    "\000\002\043\003\000\002\027\003\000\002\044\003\000" +
    "\002\013\006\000\002\031\004\000\002\031\004\000\002" +
    "\031\002\000\002\014\006\000\002\016\002\000\002\057" +
    "\002\000\002\060\002\000\002\061\002\000\002\062\002" +
    "\000\002\063\002\000\002\065\002\000\002\066\002\000" +
    "\002\064\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\271\000\014\033\ufffd\035\004\040\010\041\011\042" +
    "\005\001\002\000\004\046\023\001\002\000\010\004\uffc7" +
    "\036\uffc7\046\uffc7\001\002\000\014\033\ufffd\035\004\040" +
    "\010\041\011\042\005\001\002\000\014\033\ufffd\035\004" +
    "\040\010\041\011\042\005\001\002\000\010\004\uffc9\036" +
    "\uffc9\046\uffc9\001\002\000\010\004\uffc8\036\uffc8\046\uffc8" +
    "\001\002\000\004\036\234\001\002\000\004\033\ufffe\001" +
    "\002\000\004\033\021\001\002\000\004\033\uffff\001\002" +
    "\000\004\002\017\001\002\000\004\002\001\001\002\000" +
    "\004\002\000\001\002\000\004\046\023\001\002\000\004" +
    "\016\uffa0\001\002\000\064\005\uffac\006\uffac\007\uffac\010" +
    "\uffac\011\uffac\012\uffac\013\uffac\014\uffac\015\uffac\016\uffac" +
    "\017\uffac\020\uffac\021\uffac\025\uffac\031\uffac\043\uffac\045" +
    "\uffac\046\uffac\047\uffac\050\uffac\051\uffac\052\uffac\053\uffac" +
    "\054\uffac\055\uffac\001\002\000\004\016\025\001\002\000" +
    "\012\017\uffcb\040\010\041\011\042\005\001\002\000\004" +
    "\017\034\001\002\000\006\017\uffcd\043\032\001\002\000" +
    "\004\046\023\001\002\000\006\017\uffca\043\uffca\001\002" +
    "\000\012\017\uffcb\040\010\041\011\042\005\001\002\000" +
    "\004\017\uffcc\001\002\000\024\022\uff9d\023\uff9d\024\uff9d" +
    "\030\uff9d\037\uff9d\040\uff9d\041\uff9d\042\uff9d\046\uff9d\001" +
    "\002\000\024\022\uff9f\023\uff9f\024\uff9f\030\uff9f\037\uff9f" +
    "\040\uff9f\041\uff9f\042\uff9f\046\uff9f\001\002\000\024\022" +
    "\uffd3\023\uffd3\024\uffd3\030\uffd3\037\040\040\uffd3\041\uffd3" +
    "\042\uffd3\046\uffd3\001\002\000\022\022\115\023\104\024" +
    "\116\030\uffa2\040\010\041\011\042\005\046\023\001\002" +
    "\000\010\040\010\041\011\042\005\001\002\000\024\022" +
    "\uffd3\023\uffd3\024\uffd3\030\uffd3\037\040\040\uffd3\041\uffd3" +
    "\042\uffd3\046\uffd3\001\002\000\004\004\043\001\002\000" +
    "\004\046\023\001\002\000\004\005\047\001\002\000\004" +
    "\006\046\001\002\000\024\022\uffd2\023\uffd2\024\uffd2\030" +
    "\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2\046\uffd2\001\002" +
    "\000\030\006\uffed\011\uffed\012\uffed\013\uffed\014\uffed\015" +
    "\uffed\045\052\046\023\047\054\054\057\055\056\001\002" +
    "\000\042\006\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb\013" +
    "\uffeb\014\uffeb\015\uffeb\020\uffeb\021\uffeb\025\uffeb\031\uffeb" +
    "\050\uffeb\051\uffeb\052\uffeb\053\uffeb\001\002\000\042\006" +
    "\uffea\007\uffea\010\uffea\011\uffea\012\uffea\013\uffea\014\uffea" +
    "\015\uffea\020\uffea\021\uffea\025\uffea\031\uffea\050\uffea\051" +
    "\uffea\052\uffea\053\uffea\001\002\000\060\006\uffaf\007\uffaf" +
    "\010\uffaf\011\uffaf\012\uffaf\013\uffaf\014\uffaf\015\uffaf\017" +
    "\uffaf\020\uffaf\021\uffaf\025\uffaf\031\uffaf\043\uffaf\045\uffaf" +
    "\046\uffaf\047\uffaf\050\uffaf\051\uffaf\052\uffaf\053\uffaf\054" +
    "\uffaf\055\uffaf\001\002\000\042\006\uffe8\007\uffe8\010\uffe8" +
    "\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\020\uffe8\021" +
    "\uffe8\025\uffe8\031\uffe8\050\uffe8\051\uffe8\052\uffe8\053\uffe8" +
    "\001\002\000\060\006\uffab\007\uffab\010\uffab\011\uffab\012" +
    "\uffab\013\uffab\014\uffab\015\uffab\017\uffab\020\uffab\021\uffab" +
    "\025\uffab\031\uffab\043\uffab\045\uffab\046\uffab\047\uffab\050" +
    "\uffab\051\uffab\052\uffab\053\uffab\054\uffab\055\uffab\001\002" +
    "\000\044\006\uffec\007\uffec\010\uffec\011\uffec\012\uffec\013" +
    "\uffec\014\uffec\015\uffec\016\072\020\uffec\021\uffec\025\uffec" +
    "\031\uffec\050\uffec\051\uffec\052\uffec\053\uffec\001\002\000" +
    "\060\006\uffad\007\uffad\010\uffad\011\uffad\012\uffad\013\uffad" +
    "\014\uffad\015\uffad\017\uffad\020\uffad\021\uffad\025\uffad\031" +
    "\uffad\043\uffad\045\uffad\046\uffad\047\uffad\050\uffad\051\uffad" +
    "\052\uffad\053\uffad\054\uffad\055\uffad\001\002\000\060\006" +
    "\uffae\007\uffae\010\uffae\011\uffae\012\uffae\013\uffae\014\uffae" +
    "\015\uffae\017\uffae\020\uffae\021\uffae\025\uffae\031\uffae\043" +
    "\uffae\045\uffae\046\uffae\047\uffae\050\uffae\051\uffae\052\uffae" +
    "\053\uffae\054\uffae\055\uffae\001\002\000\016\006\uffd5\011" +
    "\067\012\065\013\066\014\070\015\064\001\002\000\042" +
    "\006\uffe9\007\uffe9\010\uffe9\011\uffe9\012\uffe9\013\uffe9\014" +
    "\uffe9\015\uffe9\020\uffe9\021\uffe9\025\uffe9\031\uffe9\050\uffe9" +
    "\051\uffe9\052\uffe9\053\uffe9\001\002\000\042\006\uffee\007" +
    "\uffee\010\uffee\011\uffee\012\uffee\013\uffee\014\uffee\015\uffee" +
    "\020\uffee\021\uffee\025\uffee\031\uffee\050\uffee\051\uffee\052" +
    "\uffee\053\uffee\001\002\000\014\045\052\046\023\047\054" +
    "\054\057\055\056\001\002\000\014\045\uffbd\046\uffbd\047" +
    "\uffbd\054\uffbd\055\uffbd\001\002\000\014\045\uffc0\046\uffc0" +
    "\047\uffc0\054\uffc0\055\uffc0\001\002\000\014\045\uffbf\046" +
    "\uffbf\047\uffbf\054\uffbf\055\uffbf\001\002\000\014\045\uffc1" +
    "\046\uffc1\047\uffc1\054\uffc1\055\uffc1\001\002\000\014\045" +
    "\uffbe\046\uffbe\047\uffbe\054\uffbe\055\uffbe\001\002\000\042" +
    "\006\uffef\007\uffef\010\uffef\011\uffef\012\uffef\013\uffef\014" +
    "\uffef\015\uffef\020\uffef\021\uffef\025\uffef\031\uffef\050\uffef" +
    "\051\uffef\052\uffef\053\uffef\001\002\000\006\017\074\046" +
    "\023\001\002\000\022\006\uffce\017\uffce\043\077\045\uffce" +
    "\046\uffce\047\uffce\054\uffce\055\uffce\001\002\000\042\006" +
    "\uffd7\007\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7" +
    "\015\uffd7\020\uffd7\021\uffd7\025\uffd7\031\uffd7\050\uffd7\051" +
    "\uffd7\052\uffd7\053\uffd7\001\002\000\004\017\076\001\002" +
    "\000\042\006\uffd8\007\uffd8\010\uffd8\011\uffd8\012\uffd8\013" +
    "\uffd8\014\uffd8\015\uffd8\020\uffd8\021\uffd8\025\uffd8\031\uffd8" +
    "\050\uffd8\051\uffd8\052\uffd8\053\uffd8\001\002\000\004\046" +
    "\023\001\002\000\020\006\uffd0\017\uffd0\045\uffd0\046\uffd0" +
    "\047\uffd0\054\uffd0\055\uffd0\001\002\000\020\006\uffcf\017" +
    "\uffcf\045\uffcf\046\uffcf\047\uffcf\054\uffcf\055\uffcf\001\002" +
    "\000\022\022\uffd4\023\uffd4\024\uffd4\030\uffd4\040\uffd4\041" +
    "\uffd4\042\uffd4\046\uffd4\001\002\000\004\006\233\001\002" +
    "\000\004\016\216\001\002\000\004\006\215\001\002\000" +
    "\004\032\uff9e\001\002\000\034\022\115\023\104\024\116" +
    "\026\ufff7\027\ufff7\030\uffa2\032\ufff7\034\ufff7\040\010\041" +
    "\011\042\005\044\ufff7\046\023\001\002\000\006\005\203" +
    "\016\204\001\002\000\004\034\uff9e\001\002\000\004\006" +
    "\200\001\002\000\004\004\176\001\002\000\004\030\166" +
    "\001\002\000\046\007\uffa5\010\uffa5\011\uffa5\012\uffa5\013" +
    "\uffa5\014\uffa5\015\uffa5\020\uffa5\021\uffa5\045\uffa5\046\uffa5" +
    "\047\uffa5\050\uffa5\051\uffa5\052\uffa5\053\uffa5\054\uffa5\055" +
    "\uffa5\001\002\000\004\016\125\001\002\000\004\006\124" +
    "\001\002\000\004\026\123\001\002\000\004\006\122\001" +
    "\002\000\034\022\ufff6\023\ufff6\024\ufff6\026\ufff6\027\ufff6" +
    "\030\ufff6\032\ufff6\034\ufff6\040\ufff6\041\ufff6\042\ufff6\044" +
    "\ufff6\046\ufff6\001\002\000\034\022\ufff4\023\ufff4\024\ufff4" +
    "\026\ufff4\027\ufff4\030\ufff4\032\ufff4\034\ufff4\040\ufff4\041" +
    "\ufff4\042\ufff4\044\ufff4\046\ufff4\001\002\000\034\022\ufff1" +
    "\023\ufff1\024\ufff1\026\ufff1\027\ufff1\030\ufff1\032\ufff1\034" +
    "\ufff1\040\ufff1\041\ufff1\042\ufff1\044\ufff1\046\ufff1\001\002" +
    "\000\004\046\023\001\002\000\004\017\127\001\002\000" +
    "\004\006\uffa6\001\002\000\046\007\uffed\010\uffed\011\uffed" +
    "\012\uffed\013\uffed\014\uffed\015\uffed\020\uffed\021\uffed\045" +
    "\052\046\023\047\054\050\uffed\051\uffed\052\uffed\053\uffed" +
    "\054\057\055\056\001\002\000\004\025\153\001\002\000" +
    "\042\007\uffec\010\uffec\011\uffec\012\uffec\013\uffec\014\uffec" +
    "\015\uffec\016\072\020\uffec\021\uffec\025\uffe6\031\uffe6\050" +
    "\uffec\051\uffec\052\uffec\053\uffec\001\002\000\034\007\146" +
    "\010\137\011\067\012\065\013\066\014\070\015\064\020" +
    "\141\021\140\050\143\051\142\052\134\053\135\001\002" +
    "\000\052\007\uffb9\010\uffb9\011\uffb9\012\uffb9\013\uffb9\014" +
    "\uffb9\015\uffb9\020\uffb9\021\uffb9\025\uffb9\031\uffb9\045\uffb9" +
    "\046\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9\054" +
    "\uffb9\055\uffb9\001\002\000\052\007\uffba\010\uffba\011\uffba" +
    "\012\uffba\013\uffba\014\uffba\015\uffba\020\uffba\021\uffba\025" +
    "\uffba\031\uffba\045\uffba\046\uffba\047\uffba\050\uffba\051\uffba" +
    "\052\uffba\053\uffba\054\uffba\055\uffba\001\002\000\052\007" +
    "\uffe2\010\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2" +
    "\020\uffe2\021\uffe2\025\uffe2\031\uffe2\045\uffe2\046\uffe2\047" +
    "\uffe2\050\uffe2\051\uffe2\052\uffe2\053\uffe2\054\uffe2\055\uffe2" +
    "\001\002\000\052\007\uffb5\010\uffb5\011\uffb5\012\uffb5\013" +
    "\uffb5\014\uffb5\015\uffb5\020\uffb5\021\uffb5\025\uffb5\031\uffb5" +
    "\045\uffb5\046\uffb5\047\uffb5\050\uffb5\051\uffb5\052\uffb5\053" +
    "\uffb5\054\uffb5\055\uffb5\001\002\000\052\007\uffbb\010\uffbb" +
    "\011\uffbb\012\uffbb\013\uffbb\014\uffbb\015\uffbb\020\uffbb\021" +
    "\uffbb\025\uffbb\031\uffbb\045\uffbb\046\uffbb\047\uffbb\050\uffbb" +
    "\051\uffbb\052\uffbb\053\uffbb\054\uffbb\055\uffbb\001\002\000" +
    "\052\007\uffbc\010\uffbc\011\uffbc\012\uffbc\013\uffbc\014\uffbc" +
    "\015\uffbc\020\uffbc\021\uffbc\025\uffbc\031\uffbc\045\uffbc\046" +
    "\uffbc\047\uffbc\050\uffbc\051\uffbc\052\uffbc\053\uffbc\054\uffbc" +
    "\055\uffbc\001\002\000\052\007\uffb7\010\uffb7\011\uffb7\012" +
    "\uffb7\013\uffb7\014\uffb7\015\uffb7\020\uffb7\021\uffb7\025\uffb7" +
    "\031\uffb7\045\uffb7\046\uffb7\047\uffb7\050\uffb7\051\uffb7\052" +
    "\uffb7\053\uffb7\054\uffb7\055\uffb7\001\002\000\052\007\uffb8" +
    "\010\uffb8\011\uffb8\012\uffb8\013\uffb8\014\uffb8\015\uffb8\020" +
    "\uffb8\021\uffb8\025\uffb8\031\uffb8\045\uffb8\046\uffb8\047\uffb8" +
    "\050\uffb8\051\uffb8\052\uffb8\053\uffb8\054\uffb8\055\uffb8\001" +
    "\002\000\052\007\uffe3\010\uffe3\011\uffe3\012\uffe3\013\uffe3" +
    "\014\uffe3\015\uffe3\020\uffe3\021\uffe3\025\uffe3\031\uffe3\045" +
    "\uffe3\046\uffe3\047\uffe3\050\uffe3\051\uffe3\052\uffe3\053\uffe3" +
    "\054\uffe3\055\uffe3\001\002\000\052\007\uffed\010\uffed\011" +
    "\uffed\012\uffed\013\uffed\014\uffed\015\uffed\020\uffed\021\uffed" +
    "\025\uffed\031\uffed\045\052\046\023\047\054\050\uffed\051" +
    "\uffed\052\uffed\053\uffed\054\057\055\056\001\002\000\052" +
    "\007\uffb6\010\uffb6\011\uffb6\012\uffb6\013\uffb6\014\uffb6\015" +
    "\uffb6\020\uffb6\021\uffb6\025\uffb6\031\uffb6\045\uffb6\046\uffb6" +
    "\047\uffb6\050\uffb6\051\uffb6\052\uffb6\053\uffb6\054\uffb6\055" +
    "\uffb6\001\002\000\040\007\146\010\137\011\067\012\065" +
    "\013\066\014\070\015\064\020\141\021\140\025\uffe4\031" +
    "\uffe4\050\143\051\142\052\134\053\135\001\002\000\006" +
    "\025\uffe7\031\uffe7\001\002\000\046\007\uffed\010\uffed\011" +
    "\uffed\012\uffed\013\uffed\014\uffed\015\uffed\020\uffed\021\uffed" +
    "\045\052\046\023\047\054\050\uffed\051\uffed\052\uffed\053" +
    "\uffed\054\057\055\056\001\002\000\006\025\uffe5\031\uffe5" +
    "\001\002\000\022\022\uffa4\023\uffa4\024\uffa4\030\uffa4\040" +
    "\uffa4\041\uffa4\042\uffa4\046\uffa4\001\002\000\022\022\uff9f" +
    "\023\uff9f\024\uff9f\030\uff9f\040\uff9f\041\uff9f\042\uff9f\046" +
    "\uff9f\001\002\000\022\022\115\023\104\024\116\030\uffa2" +
    "\040\010\041\011\042\005\046\023\001\002\000\006\026" +
    "\uff9e\027\uff9e\001\002\000\006\026\uffa3\027\uffa3\001\002" +
    "\000\006\026\uffdf\027\162\001\002\000\004\026\uffe1\001" +
    "\002\000\022\022\uff9f\023\uff9f\024\uff9f\030\uff9f\040\uff9f" +
    "\041\uff9f\042\uff9f\046\uff9f\001\002\000\022\022\115\023" +
    "\104\024\116\030\uffa2\040\010\041\011\042\005\046\023" +
    "\001\002\000\004\026\uff9e\001\002\000\004\026\uffe0\001" +
    "\002\000\046\007\uffa5\010\uffa5\011\uffa5\012\uffa5\013\uffa5" +
    "\014\uffa5\015\uffa5\020\uffa5\021\uffa5\045\uffa5\046\uffa5\047" +
    "\uffa5\050\uffa5\051\uffa5\052\uffa5\053\uffa5\054\uffa5\055\uffa5" +
    "\001\002\000\046\007\uffed\010\uffed\011\uffed\012\uffed\013" +
    "\uffed\014\uffed\015\uffed\020\uffed\021\uffed\045\052\046\023" +
    "\047\054\050\uffed\051\uffed\052\uffed\053\uffed\054\057\055" +
    "\056\001\002\000\004\031\171\001\002\000\022\022\uffa4" +
    "\023\uffa4\024\uffa4\030\uffa4\040\uffa4\041\uffa4\042\uffa4\046" +
    "\uffa4\001\002\000\022\022\uff9f\023\uff9f\024\uff9f\030\uff9f" +
    "\040\uff9f\041\uff9f\042\uff9f\046\uff9f\001\002\000\022\022" +
    "\115\023\104\024\116\030\uffa2\040\010\041\011\042\005" +
    "\046\023\001\002\000\004\032\uffa1\001\002\000\004\032" +
    "\uffde\001\002\000\004\046\023\001\002\000\004\006\uffd1" +
    "\001\002\000\034\022\ufff2\023\ufff2\024\ufff2\026\ufff2\027" +
    "\ufff2\030\ufff2\032\ufff2\034\ufff2\040\ufff2\041\ufff2\042\ufff2" +
    "\044\ufff2\046\ufff2\001\002\000\004\034\202\001\002\000" +
    "\004\002\ufffa\001\002\000\030\006\uffed\011\uffed\012\uffed" +
    "\013\uffed\014\uffed\015\uffed\045\052\046\023\047\054\054" +
    "\057\055\056\001\002\000\006\017\205\046\023\001\002" +
    "\000\004\006\uffdb\001\002\000\004\017\207\001\002\000" +
    "\004\006\uffdc\001\002\000\016\006\uffd6\011\067\012\065" +
    "\013\066\014\070\015\064\001\002\000\014\026\ufff8\027" +
    "\ufff8\032\ufff8\034\ufff8\044\ufff8\001\002\000\014\026\ufff9" +
    "\027\ufff9\032\ufff9\034\ufff9\044\ufff9\001\002\000\004\032" +
    "\214\001\002\000\034\022\ufff3\023\ufff3\024\ufff3\026\ufff3" +
    "\027\ufff3\030\ufff3\032\ufff3\034\ufff3\040\ufff3\041\ufff3\042" +
    "\ufff3\044\ufff3\046\ufff3\001\002\000\034\022\ufff0\023\ufff0" +
    "\024\ufff0\026\ufff0\027\ufff0\030\ufff0\032\ufff0\034\ufff0\040" +
    "\ufff0\041\ufff0\042\ufff0\044\ufff0\046\ufff0\001\002\000\016" +
    "\017\uffa7\045\052\046\023\047\054\054\057\055\056\001" +
    "\002\000\020\017\uffc4\043\uffc4\045\uffc4\046\uffc4\047\uffc4" +
    "\054\uffc4\055\uffc4\001\002\000\016\017\uffa7\045\052\046" +
    "\023\047\054\054\057\055\056\001\002\000\016\017\uffa7" +
    "\045\052\046\023\047\054\054\057\055\056\001\002\000" +
    "\020\017\uffc2\043\uffc2\045\uffc2\046\uffc2\047\uffc2\054\uffc2" +
    "\055\uffc2\001\002\000\020\017\uffc6\043\227\045\uffc6\046" +
    "\uffc6\047\uffc6\054\uffc6\055\uffc6\001\002\000\004\017\226" +
    "\001\002\000\020\017\uffc3\043\uffc3\045\uffc3\046\uffc3\047" +
    "\uffc3\054\uffc3\055\uffc3\001\002\000\004\006\uffaa\001\002" +
    "\000\012\045\052\047\054\054\057\055\056\001\002\000" +
    "\016\017\uffc5\045\uffc5\046\uffc5\047\uffc5\054\uffc5\055\uffc5" +
    "\001\002\000\004\017\uffa9\001\002\000\004\017\uffa8\001" +
    "\002\000\034\022\ufff5\023\ufff5\024\ufff5\026\ufff5\027\ufff5" +
    "\030\ufff5\032\ufff5\034\ufff5\040\ufff5\041\ufff5\042\ufff5\044" +
    "\ufff5\046\ufff5\001\002\000\004\046\023\001\002\000\004" +
    "\016\uffa0\001\002\000\004\016\237\001\002\000\012\017" +
    "\uffcb\040\010\041\011\042\005\001\002\000\004\017\241" +
    "\001\002\000\022\022\uff9d\023\uff9d\024\uff9d\030\uff9d\040" +
    "\uff9d\041\uff9d\042\uff9d\046\uff9d\001\002\000\022\022\uff9f" +
    "\023\uff9f\024\uff9f\030\uff9f\040\uff9f\041\uff9f\042\uff9f\046" +
    "\uff9f\001\002\000\022\022\115\023\104\024\116\030\uffa2" +
    "\040\010\041\011\042\005\046\023\001\002\000\004\044" +
    "\246\001\002\000\004\034\uff9e\001\002\000\014\045\052" +
    "\046\023\047\054\054\057\055\056\001\002\000\004\006" +
    "\uffb4\001\002\000\004\006\uffb2\001\002\000\004\006\uffb0" +
    "\001\002\000\004\006\255\001\002\000\006\006\uffb3\016" +
    "\072\001\002\000\004\006\uffb1\001\002\000\004\034\uffd9" +
    "\001\002\000\004\034\257\001\002\000\014\033\uffda\035" +
    "\uffda\040\uffda\041\uffda\042\uffda\001\002\000\004\033\ufffb" +
    "\001\002\000\004\033\ufffc\001\002\000\004\016\uffa0\001" +
    "\002\000\004\016\264\001\002\000\012\017\uffcb\040\010" +
    "\041\011\042\005\001\002\000\004\017\266\001\002\000" +
    "\022\022\uff9d\023\uff9d\024\uff9d\030\uff9d\040\uff9d\041\uff9d" +
    "\042\uff9d\046\uff9d\001\002\000\022\022\uff9f\023\uff9f\024" +
    "\uff9f\030\uff9f\040\uff9f\041\uff9f\042\uff9f\046\uff9f\001\002" +
    "\000\022\022\115\023\104\024\116\030\uffa2\040\010\041" +
    "\011\042\005\046\023\001\002\000\004\034\uff9e\001\002" +
    "\000\004\034\273\001\002\000\014\033\uffdd\035\uffdd\040" +
    "\uffdd\041\uffdd\042\uffdd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\271\000\020\002\015\003\013\005\014\006\012\007" +
    "\005\010\006\037\011\001\001\000\004\027\261\001\001" +
    "\000\002\001\001\000\016\003\260\005\014\006\012\007" +
    "\005\010\006\037\011\001\001\000\016\003\257\005\014" +
    "\006\012\007\005\010\006\037\011\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\027\021" +
    "\001\001\000\004\063\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\035\025\036\026\037\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\027\030\001" +
    "\001\000\002\001\001\000\010\035\032\036\026\037\027" +
    "\001\001\000\002\001\001\000\004\064\034\001\001\000" +
    "\004\065\035\001\001\000\004\053\036\001\001\000\032" +
    "\011\110\012\106\013\120\014\102\015\117\017\105\020" +
    "\111\022\116\023\104\027\107\037\112\061\113\001\001" +
    "\000\006\037\041\041\040\001\001\000\004\053\101\001" +
    "\001\000\002\001\001\000\006\027\043\054\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\021\050\024\057\025\061\027\054\042\047\043\060" +
    "\044\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\045" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\021\050\025\070\027\054\042\047\043\060\044\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\027\072\033\074\001\001\000\004\052\077\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\027\072\033\100\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\066\212\001\001\000\034" +
    "\011\210\012\106\013\120\014\102\015\117\017\105\020" +
    "\111\022\116\023\104\027\107\037\112\051\211\061\113" +
    "\001\001\000\002\001\001\000\004\066\200\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\127\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\027\125\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\021\050\024\132" +
    "\025\061\027\131\030\130\042\047\043\060\044\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\045\062" +
    "\046\135\047\143\055\144\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\021\050\024\146\025\061" +
    "\027\054\042\047\043\060\044\052\001\001\000\002\001" +
    "\001\000\014\045\062\046\135\047\143\055\150\056\147" +
    "\001\001\000\002\001\001\000\022\021\050\024\132\025" +
    "\061\027\131\030\151\042\047\043\060\044\052\001\001" +
    "\000\002\001\001\000\004\057\153\001\001\000\004\065" +
    "\154\001\001\000\032\011\155\012\106\013\120\014\102" +
    "\015\117\017\105\020\111\022\116\023\104\027\107\037" +
    "\112\061\113\001\001\000\004\066\156\001\001\000\004" +
    "\060\157\001\001\000\004\034\160\001\001\000\002\001" +
    "\001\000\004\065\162\001\001\000\032\011\163\012\106" +
    "\013\120\014\102\015\117\017\105\020\111\022\116\023" +
    "\104\027\107\037\112\061\113\001\001\000\004\066\164" +
    "\001\001\000\002\001\001\000\004\016\166\001\001\000" +
    "\022\021\050\024\132\025\061\027\131\030\167\042\047" +
    "\043\060\044\052\001\001\000\002\001\001\000\004\057" +
    "\171\001\001\000\004\065\172\001\001\000\032\011\173" +
    "\012\106\013\120\014\102\015\117\017\105\020\111\022" +
    "\116\023\104\027\107\037\112\061\113\001\001\000\004" +
    "\062\174\001\001\000\002\001\001\000\006\027\072\033" +
    "\176\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\021\050\024\207\025" +
    "\061\027\054\042\047\043\060\044\052\001\001\000\006" +
    "\027\072\033\205\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\045\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\026\222\027\072\031\223" +
    "\032\220\033\217\042\216\043\224\044\221\001\001\000" +
    "\002\001\001\000\022\026\222\027\072\031\231\032\220" +
    "\033\217\042\216\043\224\044\221\001\001\000\022\026" +
    "\222\027\072\031\230\032\220\033\217\042\216\043\224" +
    "\044\221\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\026\222\032\227\042\216\043\224\044\221\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\027\234\001\001\000\004\063\235\001" +
    "\001\000\002\001\001\000\010\035\237\036\026\037\027" +
    "\001\001\000\002\001\001\000\004\064\241\001\001\000" +
    "\004\065\242\001\001\000\032\011\243\012\106\013\120" +
    "\014\102\015\117\017\105\020\111\022\116\023\104\027" +
    "\107\037\112\061\113\001\001\000\004\040\244\001\001" +
    "\000\004\066\255\001\001\000\016\021\247\027\252\042" +
    "\246\043\253\044\250\050\251\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\063\262\001\001\000\002\001\001\000\010" +
    "\035\264\036\026\037\027\001\001\000\002\001\001\000" +
    "\004\064\266\001\001\000\004\065\267\001\001\000\032" +
    "\011\270\012\106\013\120\014\102\015\117\017\105\020" +
    "\111\022\116\023\104\027\107\037\112\061\113\001\001" +
    "\000\004\066\271\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private LexicalScanner scanner;

    public Parser(LexicalScanner scanner, java_cup.runtime.SymbolFactory sf) {
        super(scanner, sf);
        this.scanner = scanner;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= START EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymSTART start_val = (SymSTART)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // START ::= METFUNC DECMP 
            {
              SymSTART RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymMETFUNC a = (SymMETFUNC)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymDECMP b = (SymDECMP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymSTART(a, b);
     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // METFUNC ::= DECMETLIST 
            {
              SymMETFUNC RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymDECMETLIST a = (SymDECMETLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymMETFUNC(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METFUNC",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // METFUNC ::= DECFUNCLIST 
            {
              SymMETFUNC RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymDECFUNCLIST b = (SymDECFUNCLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymMETFUNC(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METFUNC",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // METFUNC ::= 
            {
              SymMETFUNC RESULT =null;
		 RESULT = new SymMETFUNC(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METFUNC",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECMETLIST ::= DECMET METFUNC 
            {
              SymDECMETLIST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymDECMET a = (SymDECMET)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymMETFUNC b = (SymMETFUNC)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymDECMETLIST(a, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECMETLIST",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECFUNCLIST ::= DECFUNC METFUNC 
            {
              SymDECFUNCLIST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymDECFUNC a = (SymDECFUNC)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymMETFUNC b = (SymMETFUNC)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymDECFUNCLIST(a, b, scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECFUNCLIST",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECMP ::= prog ID STARTPROC lparen ARGLIST rparen PMB INCSCOPE DECCONSTLIST SENTLIST DICSCOPE end 
            {
              SymDECMP RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		SymID a = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		SymARGLIST b = (SymARGLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymDECCONSTLIST c = (SymDECCONSTLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymSENTLIST d = (SymSENTLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new SymDECMP(a, b, c, d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECMP",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTLIST ::= SENT SENTLISTSEP 
            {
              SymSENTLIST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymSENT a = (SymSENT)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymSENTLISTSEP b = (SymSENTLISTSEP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymSENTLIST(a, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTLISTSEP ::= SENTLIST 
            {
              SymSENTLISTSEP RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymSENTLIST a = (SymSENTLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymSENTLISTSEP(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTLISTSEP",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTLISTSEP ::= 
            {
              SymSENTLISTSEP RESULT =null;
		 RESULT = new SymSENTLISTSEP();  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTLISTSEP",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENT ::= OUTPUT scolon 
            {
              SymSENT RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymOUTPUT a = (SymOUTPUT)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymSENT(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENT ::= INPUT scolon 
            {
              SymSENT RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymINPUT b = (SymINPUT)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymSENT(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENT ::= CONDIF endif 
            {
              SymSENT RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymCONDIF c = (SymCONDIF)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymSENT(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENT ::= WHILE DICSCOPE endloop 
            {
              SymSENT RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymWHILE d = (SymWHILE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new SymSENT(d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENT ::= CALLMET scolon 
            {
              SymSENT RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymCALLMET e = (SymCALLMET)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymSENT(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENT ::= ASSIGN scolon 
            {
              SymSENT RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymASSIGN f = (SymASSIGN)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymSENT(f); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENT ::= DECVAR scolon 
            {
              SymSENT RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymDECVAR g = (SymDECVAR)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymSENT(g); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // OPERANDX ::= OPERANDX OPARITH SUBTYPE 
            {
              SymOPERANDX RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymOPERANDX a = (SymOPERANDX)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymOPARITH b = (SymOPARITH)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymSUBTYPE c = (SymSUBTYPE)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new SymOPERANDX(a, b, c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERANDX",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // OPERANDX ::= SUBTYPE 
            {
              SymOPERANDX RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymSUBTYPE b = (SymSUBTYPE)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new SymOPERANDX(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERANDX",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // OPERANDX ::= 
            {
              SymOPERANDX RESULT =null;
		  RESULT = new SymOPERANDX(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERANDX",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SUBTYPE ::= ID 
            {
              SymSUBTYPE RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymID a = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new SymSUBTYPE(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SUBTYPE",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SUBTYPE ::= NUM 
            {
              SymSUBTYPE RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymNUM b = (SymNUM)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new SymSUBTYPE(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SUBTYPE",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SUBTYPE ::= CALLFUNC 
            {
              SymSUBTYPE RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymCALLFUNC c = (SymCALLFUNC)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new SymSUBTYPE(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SUBTYPE",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SUBTYPE ::= LOGIC 
            {
              SymSUBTYPE RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymLOGIC d = (SymLOGIC)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new SymSUBTYPE(d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SUBTYPE",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SUBTYPE ::= STR 
            {
              SymSUBTYPE RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymSTR e = (SymSTR)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new SymSUBTYPE(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SUBTYPE",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CONDITION ::= OPERANDX OPERATION OPERANDX CONDEXT 
            {
              SymCONDITION RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymOPERANDX a = (SymOPERANDX)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymOPERATION b = (SymOPERATION)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymOPERANDX c = (SymOPERANDX)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymCONDEXT d = (SymCONDEXT)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymCONDITION(a, b, c, d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDITION",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CONDITION ::= ID 
            {
              SymCONDITION RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymID a = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymCONDITION(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDITION",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CONDEXT ::= OPERATION CONDITION 
            {
              SymCONDEXT RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymOPERATION a = (SymOPERATION)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymCONDITION b = (SymCONDITION)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymCONDEXT(a, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDEXT",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CONDEXT ::= 
            {
              SymCONDEXT RESULT =null;
		 RESULT = new SymCONDEXT(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDEXT",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OPERATION ::= ANDOR 
            {
              SymOPERATION RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymANDOR a = (SymANDOR)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymOPERATION(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERATION",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OPERATION ::= OPLOGIC 
            {
              SymOPERATION RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymOPLOGIC b = (SymOPLOGIC)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymOPERATION(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERATION",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CONDIF ::= If CONDLABEL CONDITION then CONDBRANCH INCSCOPE SENTLIST DICSCOPE ELSE CONDELSE 
            {
              SymCONDIF RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		SymCONDITION a = (SymCONDITION)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymSENTLIST b = (SymSENTLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymCONDELSE c = (SymCONDELSE)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymCONDIF(a, b, c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDIF",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CONDELSE ::= Else INCSCOPE SENTLIST DICSCOPE 
            {
              SymCONDELSE RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymSENTLIST a = (SymSENTLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymCONDELSE(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDELSE",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CONDELSE ::= 
            {
              SymCONDELSE RESULT =null;
		 RESULT = new SymCONDELSE(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDELSE",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // WHILE ::= STARTLOOP While CONDLABEL CONDITION loop CONDBRANCH INCSCOPE SENTLIST GSTARTLOOP 
            {
              SymWHILE RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		SymCONDITION a = (SymCONDITION)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymSENTLIST b = (SymSENTLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymWHILE(a, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WHILE",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECMET ::= method ID STARTPROC lparen ARGLIST rparen PMB INCSCOPE SENTLIST DICSCOPE end 
            {
              SymDECMET RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		SymID a = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		SymARGLIST b = (SymARGLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymSENTLIST c = (SymSENTLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new SymDECMET(a, b, c, scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECMET",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CALLMET ::= ID lparen IDLIST rparen 
            {
              SymCALLMET RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymID a = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymIDLIST b = (SymIDLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymCALLMET(a, b, scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CALLMET",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CALLMET ::= ID lparen rparen 
            {
              SymCALLMET RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymID a = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new SymCALLMET(a, scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CALLMET",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECFUNC ::= TYPE func ID STARTPROC lparen ARGLIST rparen PMB INCSCOPE SENTLIST RETURN DICSCOPE end 
            {
              SymDECFUNC RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).right;
		SymTYPE a = (SymTYPE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-12)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		SymID b = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		SymARGLIST c = (SymARGLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymSENTLIST d = (SymSENTLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymRETURN e = (SymRETURN)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new SymDECFUNC(a, b, c, d, e, scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECFUNC",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // RETURN ::= Return RETURNTYPE scolon 
            {
              SymRETURN RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymRETURNTYPE a = (SymRETURNTYPE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymRETURN(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CALLFUNC ::= ID lparen IDLIST rparen 
            {
              SymCALLFUNC RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymID a = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymIDLIST b = (SymIDLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymCALLFUNC(a, b, scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CALLFUNC",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CALLFUNC ::= ID lparen rparen 
            {
              SymCALLFUNC RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymID a = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new SymCALLFUNC(a, scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CALLFUNC",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ASSIGN ::= ID assign OPERANDX 
            {
              SymASSIGN RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymID a = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymOPERANDX b = (SymOPERANDX)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymASSIGN(a, b, scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGN",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ASSIGNCONST ::= ID assign OPERANDX 
            {
              SymASSIGNCONST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymID a = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymOPERANDX b = (SymOPERANDX)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymASSIGNCONST(a, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGNCONST",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECCONSTLIST ::= Const DECLARECONST DECCONSTLIST 
            {
              SymDECCONSTLIST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymDECLARECONST a = (SymDECLARECONST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymDECCONSTLIST b = (SymDECCONSTLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymDECCONSTLIST(a, b, scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECCONSTLIST",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECCONSTLIST ::= 
            {
              SymDECCONSTLIST RESULT =null;
		 RESULT = new SymDECCONSTLIST(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECCONSTLIST",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARECONST ::= TYPE colons ASSIGNCONST scolon 
            {
              SymDECLARECONST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymTYPE a = (SymTYPE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymASSIGNCONST b = (SymASSIGNCONST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymDECLARECONST(a, b, scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARECONST",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECVAR ::= TYPE colons IDLIST 
            {
              SymDECVAR RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymTYPE a = (SymTYPE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymIDLIST b = (SymIDLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new SymDECVAR(a, b, scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECVAR",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // IDLIST ::= ID IDLISTSEP 
            {
              SymIDLIST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymID a = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymIDLISTSEP b = (SymIDLISTSEP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new SymIDLIST(a, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDLIST",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // IDLISTSEP ::= comma IDLIST 
            {
              SymIDLISTSEP RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymIDLIST a = (SymIDLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new SymIDLISTSEP(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDLISTSEP",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // IDLISTSEP ::= 
            {
              SymIDLISTSEP RESULT =null;
		  RESULT = new SymIDLISTSEP(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDLISTSEP",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ARGLIST ::= ARG 
            {
              SymARGLIST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymARG a = (SymARG)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymARGLIST(a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGLIST",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ARGLIST ::= ARG comma ARGLIST 
            {
              SymARGLIST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymARG a = (SymARG)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymARGLIST b = (SymARGLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymARGLIST(a, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGLIST",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ARGLIST ::= 
            {
              SymARGLIST RESULT =null;
		 RESULT = new SymARGLIST(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGLIST",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ARG ::= TYPE ID 
            {
              SymARG RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymTYPE a = (SymTYPE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymID b = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new SymARG(a, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARG",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // TYPE ::= integer 
            {
              SymTYPE RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymTYPE(a.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // TYPE ::= string 
            {
              SymTYPE RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymTYPE(a.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // TYPE ::= logic 
            {
              SymTYPE RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymTYPE(a.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // VALUELIST ::= VALUE 
            {
              SymVALUELIST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymVALUE a = (SymVALUE)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymVALUELIST(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUELIST",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // VALUELIST ::= VALUE comma VALUELIST 
            {
              SymVALUELIST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymVALUE a = (SymVALUE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymVALUELIST b = (SymVALUELIST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymVALUELIST(a, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUELIST",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // VALUE ::= NUM 
            {
              SymVALUE RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymNUM a = (SymNUM)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymVALUE(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // VALUE ::= LOGIC 
            {
              SymVALUE RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymLOGIC b = (SymLOGIC)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymVALUE(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // VALUE ::= STR 
            {
              SymVALUE RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymSTR c = (SymSTR)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymVALUE(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OPARITH ::= add 
            {
              SymOPARITH RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymOPARITH(a.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPARITH",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OPARITH ::= sub 
            {
              SymOPARITH RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymOPARITH(b.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPARITH",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OPARITH ::= mult 
            {
              SymOPARITH RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymOPARITH(c.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPARITH",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OPARITH ::= div 
            {
              SymOPARITH RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymOPARITH(d.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPARITH",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OPARITH ::= mod 
            {
              SymOPARITH RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymOPARITH(e.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPARITH",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OPLOGIC ::= gte 
            {
              SymOPLOGIC RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymOPLOGIC(a.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPLOGIC",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OPLOGIC ::= lt 
            {
              SymOPLOGIC RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymOPLOGIC(b.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPLOGIC",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OPLOGIC ::= equals 
            {
              SymOPLOGIC RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymOPLOGIC(c.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPLOGIC",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OPLOGIC ::= gt 
            {
              SymOPLOGIC RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymOPLOGIC(d.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPLOGIC",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OPLOGIC ::= lte 
            {
              SymOPLOGIC RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymOPLOGIC(e.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPLOGIC",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OPLOGIC ::= noteq 
            {
              SymOPLOGIC RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymOPLOGIC(f.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPLOGIC",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ANDOR ::= op_and 
            {
              SymANDOR RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymANDOR(a.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ANDOR",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ANDOR ::= op_or 
            {
              SymANDOR RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymANDOR(b.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ANDOR",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // RETURNTYPE ::= NUM 
            {
              SymRETURNTYPE RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymNUM a = (SymNUM)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymRETURNTYPE(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURNTYPE",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // RETURNTYPE ::= ID 
            {
              SymRETURNTYPE RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymID b = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymRETURNTYPE(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURNTYPE",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // RETURNTYPE ::= CALLFUNC 
            {
              SymRETURNTYPE RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymCALLFUNC c = (SymCALLFUNC)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymRETURNTYPE(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURNTYPE",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // RETURNTYPE ::= LOGIC 
            {
              SymRETURNTYPE RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymLOGIC d = (SymLOGIC)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymRETURNTYPE(d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURNTYPE",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // RETURNTYPE ::= STR 
            {
              SymRETURNTYPE RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymSTR e = (SymSTR)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymRETURNTYPE(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURNTYPE",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // NUM ::= val_int 
            {
              SymNUM RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymNUM(Integer.valueOf(a.toString())); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NUM",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // LOGIC ::= True 
            {
              SymLOGIC RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymLOGIC(a.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOGIC",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // LOGIC ::= False 
            {
              SymLOGIC RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymLOGIC(b.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOGIC",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ID ::= val_id 
            {
              SymID RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymID(a.toString(), scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // STR ::= val_str 
            {
              SymSTR RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymSTR(a.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STR",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OUTPUT ::= print lparen PRINT rparen 
            {
              SymOUTPUT RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymPRINT a = (SymPRINT)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymOUTPUT(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OUTPUT",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // PRINT ::= VALUELIST PRINT 
            {
              SymPRINT RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymVALUELIST a = (SymVALUELIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymPRINT b = (SymPRINT)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymPRINT(a, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRINT",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // PRINT ::= IDLIST PRINT 
            {
              SymPRINT RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymIDLIST c = (SymIDLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymPRINT b = (SymPRINT)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymPRINT(c, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRINT",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // PRINT ::= 
            {
              SymPRINT RESULT =null;
		 RESULT = new SymPRINT(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRINT",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // INPUT ::= read lparen ID rparen 
            {
              SymINPUT RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymID a = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymINPUT(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INPUT",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CONDLABEL ::= 
            {
              SymCONDLABEL RESULT =null;
		 RESULT = new SymCONDLABEL(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDLABEL",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CONDBRANCH ::= 
            {
              SymCONDBRANCH RESULT =null;
		 RESULT = new SymCONDBRANCH(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDBRANCH",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ELSE ::= 
            {
              SymELSE RESULT =null;
		 RESULT = new SymELSE(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // STARTLOOP ::= 
            {
              SymSTARTLOOP RESULT =null;
		 RESULT = new SymSTARTLOOP(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STARTLOOP",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // GSTARTLOOP ::= 
            {
              SymGSTARTLOOP RESULT =null;
		 RESULT = new SymGSTARTLOOP(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GSTARTLOOP",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // STARTPROC ::= 
            {
              SymSTARTPROC RESULT =null;
		 RESULT = new SymSTARTPROC(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STARTPROC",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // INCSCOPE ::= 
            {
              SymINCSCOPE RESULT =null;
		 RESULT = new SymINCSCOPE(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCSCOPE",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // DICSCOPE ::= 
            {
              SymDICSCOPE RESULT =null;
		 RESULT = new SymDICSCOPE(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DICSCOPE",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // PMB ::= 
            {
              SymPMB RESULT =null;
		 RESULT = new SymPMB(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PMB",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
