
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package front.parser;

import front.symbols.*;
import front.data_structures.symbol.Symbol;
import front.scanner.LexicalScanner;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import front.error.ErrorSintax;
import front.error.ErrorFatalSintax;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\201\000\002\002\004\000\002\002\005\000\002\003" +
    "\003\000\002\003\003\000\002\003\002\000\002\005\004" +
    "\000\002\006\004\000\002\004\015\000\002\004\003\000" +
    "\002\011\004\000\002\056\003\000\002\056\002\000\002" +
    "\012\004\000\002\012\004\000\002\012\004\000\002\012" +
    "\005\000\002\012\005\000\002\012\004\000\002\012\004" +
    "\000\002\012\004\000\002\012\004\000\002\012\004\000" +
    "\002\012\004\000\002\030\005\000\002\030\003\000\002" +
    "\030\002\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\036\006\000\002\036\003\000\002\036\003\000" +
    "\002\061\004\000\002\061\002\000\002\060\003\000\002" +
    "\060\003\000\002\015\014\000\002\015\004\000\002\042" +
    "\006\000\002\042\002\000\002\017\013\000\002\017\005" +
    "\000\002\020\013\000\002\020\007\000\002\007\015\000" +
    "\002\010\017\000\002\046\005\000\002\021\006\000\002" +
    "\021\005\000\002\022\005\000\002\022\005\000\002\022" +
    "\007\000\002\022\005\000\002\022\005\000\002\023\005" +
    "\000\002\024\005\000\002\024\004\000\002\041\004\000" +
    "\002\057\004\000\002\057\002\000\002\025\006\000\002" +
    "\025\004\000\002\026\006\000\002\026\005\000\002\027" +
    "\006\000\002\027\005\000\002\035\004\000\002\034\006" +
    "\000\002\034\005\000\002\071\005\000\002\071\005\000" +
    "\002\043\003\000\002\043\005\000\002\043\002\000\002" +
    "\044\004\000\002\045\003\000\002\045\003\000\002\045" +
    "\003\000\002\040\003\000\002\040\005\000\002\032\003" +
    "\000\002\032\003\000\002\032\003\000\002\052\003\000" +
    "\002\052\003\000\002\052\003\000\002\052\003\000\002" +
    "\052\003\000\002\053\003\000\002\053\003\000\002\053" +
    "\003\000\002\053\003\000\002\053\003\000\002\053\003" +
    "\000\002\054\003\000\002\054\003\000\002\055\003\000" +
    "\002\055\003\000\002\055\003\000\002\055\003\000\002" +
    "\055\003\000\002\047\003\000\002\050\003\000\002\050" +
    "\003\000\002\033\003\000\002\051\003\000\002\013\006" +
    "\000\002\013\006\000\002\013\004\000\002\013\004\000" +
    "\002\037\004\000\002\037\004\000\002\037\002\000\002" +
    "\014\006\000\002\014\004\000\002\016\002\000\002\062" +
    "\002\000\002\063\002\000\002\064\002\000\002\065\002" +
    "\000\002\066\002\000\002\067\002\000\002\070\002\000" +
    "\002\073\002\000\002\074\002\000\002\072\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\360\000\016\003\uff85\041\uff85\043\uff85\046\uff85\047" +
    "\uff85\050\uff85\001\002\000\016\003\ufffd\041\ufffd\043\007" +
    "\046\013\047\014\050\010\001\002\000\004\002\006\001" +
    "\002\000\004\002\001\001\002\000\004\054\025\001\002" +
    "\000\012\003\uffb1\004\uffb1\044\uffb1\054\uffb1\001\002\000" +
    "\016\003\ufffd\041\ufffd\043\007\046\013\047\014\050\010" +
    "\001\002\000\016\003\ufffd\041\ufffd\043\007\046\013\047" +
    "\014\050\010\001\002\000\012\003\uffb3\004\uffb3\044\uffb3" +
    "\054\uffb3\001\002\000\012\003\uffb2\004\uffb2\044\uffb2\054" +
    "\uffb2\001\002\000\004\044\323\001\002\000\006\003\ufffe" +
    "\041\ufffe\001\002\000\006\003\021\041\023\001\002\000" +
    "\006\003\uffff\041\uffff\001\002\000\004\002\ufff9\001\002" +
    "\000\004\002\000\001\002\000\004\054\025\001\002\000" +
    "\004\016\uff84\001\002\000\074\005\uff96\006\uff96\007\uff96" +
    "\010\uff96\011\uff96\012\uff96\013\uff96\014\uff96\015\uff96\016" +
    "\uff96\017\uff96\020\uff96\021\uff96\022\uff96\023\uff96\024\uff96" +
    "\031\uff96\037\uff96\040\uff96\051\uff96\053\uff96\054\uff96\055" +
    "\uff96\056\uff96\057\uff96\060\uff96\061\uff96\062\uff96\063\uff96" +
    "\001\002\000\004\016\027\001\002\000\012\017\uffb5\046" +
    "\013\047\014\050\010\001\002\000\004\017\036\001\002" +
    "\000\006\017\uffb7\051\034\001\002\000\004\054\025\001" +
    "\002\000\006\017\uffb4\051\uffb4\001\002\000\012\017\uffb5" +
    "\046\013\047\014\050\010\001\002\000\004\017\uffb6\001" +
    "\002\000\032\003\uff81\025\uff81\026\uff81\027\uff81\030\uff81" +
    "\034\uff81\035\uff81\045\uff81\046\uff81\047\uff81\050\uff81\054" +
    "\uff81\001\002\000\032\003\uff83\025\uff83\026\uff83\027\uff83" +
    "\030\uff83\034\uff83\035\uff83\045\uff83\046\uff83\047\uff83\050" +
    "\uff83\054\uff83\001\002\000\032\003\061\025\060\026\044" +
    "\027\055\030\062\034\uff87\035\uff87\045\052\046\013\047" +
    "\014\050\010\054\025\001\002\000\004\006\322\001\002" +
    "\000\004\006\321\001\002\000\004\006\320\001\002\000" +
    "\006\003\314\016\315\001\002\000\004\006\313\001\002" +
    "\000\004\040\uff82\001\002\000\046\003\061\025\060\026" +
    "\044\027\055\030\062\032\ufff6\033\ufff6\034\uff87\035\uff87" +
    "\036\ufff6\040\ufff6\042\ufff6\045\052\046\013\047\014\050" +
    "\010\052\ufff6\054\025\001\002\000\004\005\304\001\002" +
    "\000\010\005\301\016\150\020\147\001\002\000\012\003" +
    "\272\046\013\047\014\050\010\001\002\000\004\040\uff82" +
    "\001\002\000\004\042\uff82\001\002\000\006\003\250\016" +
    "\251\001\002\000\006\003\224\004\225\001\002\000\006" +
    "\034\201\035\202\001\002\000\050\003\101\007\uff8b\010" +
    "\uff8b\011\uff8b\012\uff8b\013\uff8b\014\uff8b\015\uff8b\023\uff8b" +
    "\024\uff8b\053\uff8b\054\uff8b\055\uff8b\056\uff8b\057\uff8b\060" +
    "\uff8b\061\uff8b\062\uff8b\063\uff8b\001\002\000\004\006\077" +
    "\001\002\000\006\003\073\016\074\001\002\000\004\006" +
    "\072\001\002\000\004\006\071\001\002\000\004\032\070" +
    "\001\002\000\004\006\067\001\002\000\046\003\uffec\025" +
    "\uffec\026\uffec\027\uffec\030\uffec\032\uffec\033\uffec\034\uffec" +
    "\035\uffec\036\uffec\040\uffec\042\uffec\045\uffec\046\uffec\047" +
    "\uffec\050\uffec\052\uffec\054\uffec\001\002\000\046\003\ufff3" +
    "\025\ufff3\026\ufff3\027\ufff3\030\ufff3\032\ufff3\033\ufff3\034" +
    "\ufff3\035\ufff3\036\ufff3\040\ufff3\042\ufff3\045\ufff3\046\ufff3" +
    "\047\ufff3\050\ufff3\052\ufff3\054\ufff3\001\002\000\046\003" +
    "\ufff5\025\ufff5\026\ufff5\027\ufff5\030\ufff5\032\ufff5\033\ufff5" +
    "\034\ufff5\035\ufff5\036\ufff5\040\ufff5\042\ufff5\045\ufff5\046" +
    "\ufff5\047\ufff5\050\ufff5\052\ufff5\054\ufff5\001\002\000\046" +
    "\003\uffef\025\uffef\026\uffef\027\uffef\030\uffef\032\uffef\033" +
    "\uffef\034\uffef\035\uffef\036\uffef\040\uffef\042\uffef\045\uffef" +
    "\046\uffef\047\uffef\050\uffef\052\uffef\054\uffef\001\002\000" +
    "\004\006\uff8c\001\002\000\004\054\025\001\002\000\004" +
    "\017\076\001\002\000\004\006\uff8d\001\002\000\046\003" +
    "\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb\032\uffeb\033\uffeb" +
    "\034\uffeb\035\uffeb\036\uffeb\040\uffeb\042\uffeb\045\uffeb\046" +
    "\uffeb\047\uffeb\050\uffeb\052\uffeb\054\uffeb\001\002\000\046" +
    "\007\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015" +
    "\uffe8\023\uffe8\024\uffe8\053\103\054\025\055\105\056\uffe8" +
    "\057\uffe8\060\uffe8\061\uffe8\062\112\063\111\001\002\000" +
    "\004\032\uffd9\001\002\000\046\006\uffe5\007\uffe5\010\uffe5" +
    "\011\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5\021\uffe5\023" +
    "\uffe5\024\uffe5\031\uffe5\037\uffe5\040\uffe5\056\uffe5\057\uffe5" +
    "\060\uffe5\061\uffe5\001\002\000\066\006\uff99\007\uff99\010" +
    "\uff99\011\uff99\012\uff99\013\uff99\014\uff99\015\uff99\017\uff99" +
    "\021\uff99\022\uff99\023\uff99\024\uff99\031\uff99\037\uff99\040" +
    "\uff99\051\uff99\053\uff99\054\uff99\055\uff99\056\uff99\057\uff99" +
    "\060\uff99\061\uff99\062\uff99\063\uff99\001\002\000\046\006" +
    "\uffe2\007\uffe2\010\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2" +
    "\015\uffe2\021\uffe2\023\uffe2\024\uffe2\031\uffe2\037\uffe2\040" +
    "\uffe2\056\uffe2\057\uffe2\060\uffe2\061\uffe2\001\002\000\064" +
    "\006\uff95\007\uff95\010\uff95\011\uff95\012\uff95\013\uff95\014" +
    "\uff95\015\uff95\017\uff95\021\uff95\023\uff95\024\uff95\031\uff95" +
    "\037\uff95\040\uff95\051\uff95\053\uff95\054\uff95\055\uff95\056" +
    "\uff95\057\uff95\060\uff95\061\uff95\062\uff95\063\uff95\001\002" +
    "\000\046\006\uffe4\007\uffe4\010\uffe4\011\uffe4\012\uffe4\013" +
    "\uffe4\014\uffe4\015\uffe4\021\uffe4\023\uffe4\024\uffe4\031\uffe4" +
    "\037\uffe4\040\uffe4\056\uffe4\057\uffe4\060\uffe4\061\uffe4\001" +
    "\002\000\004\031\166\001\002\000\046\007\uffe7\010\uffe7" +
    "\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016\150\020" +
    "\147\023\uffe7\024\uffe7\031\uffe0\037\uffe0\040\uffe0\056\uffe7" +
    "\057\uffe7\060\uffe7\061\uffe7\001\002\000\064\006\uff97\007" +
    "\uff97\010\uff97\011\uff97\012\uff97\013\uff97\014\uff97\015\uff97" +
    "\017\uff97\021\uff97\023\uff97\024\uff97\031\uff97\037\uff97\040" +
    "\uff97\051\uff97\053\uff97\054\uff97\055\uff97\056\uff97\057\uff97" +
    "\060\uff97\061\uff97\062\uff97\063\uff97\001\002\000\064\006" +
    "\uff98\007\uff98\010\uff98\011\uff98\012\uff98\013\uff98\014\uff98" +
    "\015\uff98\017\uff98\021\uff98\023\uff98\024\uff98\031\uff98\037" +
    "\uff98\040\uff98\051\uff98\053\uff98\054\uff98\055\uff98\056\uff98" +
    "\057\uff98\060\uff98\061\uff98\062\uff98\063\uff98\001\002\000" +
    "\042\007\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6" +
    "\015\uffe6\023\uffe6\024\uffe6\031\uffdf\037\uffdf\040\uffdf\056" +
    "\uffe6\057\uffe6\060\uffe6\061\uffe6\001\002\000\034\007\137" +
    "\010\123\011\136\012\117\013\126\014\120\015\132\023" +
    "\130\024\125\056\131\057\127\060\121\061\122\001\002" +
    "\000\046\006\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3\013" +
    "\uffe3\014\uffe3\015\uffe3\021\uffe3\023\uffe3\024\uffe3\031\uffe3" +
    "\037\uffe3\040\uffe3\056\uffe3\057\uffe3\060\uffe3\061\uffe3\001" +
    "\002\000\046\006\uffe9\007\uffe9\010\uffe9\011\uffe9\012\uffe9" +
    "\013\uffe9\014\uffe9\015\uffe9\021\uffe9\023\uffe9\024\uffe9\031" +
    "\uffe9\037\uffe9\040\uffe9\056\uffe9\057\uffe9\060\uffe9\061\uffe9" +
    "\001\002\000\014\053\uffaa\054\uffaa\055\uffaa\062\uffaa\063" +
    "\uffaa\001\002\000\014\053\uffa8\054\uffa8\055\uffa8\062\uffa8" +
    "\063\uffa8\001\002\000\054\007\uffa3\010\uffa3\011\uffa3\012" +
    "\uffa3\013\uffa3\014\uffa3\015\uffa3\023\uffa3\024\uffa3\031\uffa3" +
    "\037\uffa3\040\uffa3\053\uffa3\054\uffa3\055\uffa3\056\uffa3\057" +
    "\uffa3\060\uffa3\061\uffa3\062\uffa3\063\uffa3\001\002\000\054" +
    "\007\uffa4\010\uffa4\011\uffa4\012\uffa4\013\uffa4\014\uffa4\015" +
    "\uffa4\023\uffa4\024\uffa4\031\uffa4\037\uffa4\040\uffa4\053\uffa4" +
    "\054\uffa4\055\uffa4\056\uffa4\057\uffa4\060\uffa4\061\uffa4\062" +
    "\uffa4\063\uffa4\001\002\000\054\007\uff9f\010\uff9f\011\uff9f" +
    "\012\uff9f\013\uff9f\014\uff9f\015\uff9f\023\uff9f\024\uff9f\031" +
    "\uff9f\037\uff9f\040\uff9f\053\uff9f\054\uff9f\055\uff9f\056\uff9f" +
    "\057\uff9f\060\uff9f\061\uff9f\062\uff9f\063\uff9f\001\002\000" +
    "\054\007\uffdb\010\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb" +
    "\015\uffdb\023\uffdb\024\uffdb\031\uffdb\037\uffdb\040\uffdb\053" +
    "\uffdb\054\uffdb\055\uffdb\056\uffdb\057\uffdb\060\uffdb\061\uffdb" +
    "\062\uffdb\063\uffdb\001\002\000\054\007\uffa5\010\uffa5\011" +
    "\uffa5\012\uffa5\013\uffa5\014\uffa5\015\uffa5\023\uffa5\024\uffa5" +
    "\031\uffa5\037\uffa5\040\uffa5\053\uffa5\054\uffa5\055\uffa5\056" +
    "\uffa5\057\uffa5\060\uffa5\061\uffa5\062\uffa5\063\uffa5\001\002" +
    "\000\014\053\uffa9\054\uffa9\055\uffa9\062\uffa9\063\uffa9\001" +
    "\002\000\054\007\uffa1\010\uffa1\011\uffa1\012\uffa1\013\uffa1" +
    "\014\uffa1\015\uffa1\023\uffa1\024\uffa1\031\uffa1\037\uffa1\040" +
    "\uffa1\053\uffa1\054\uffa1\055\uffa1\056\uffa1\057\uffa1\060\uffa1" +
    "\061\uffa1\062\uffa1\063\uffa1\001\002\000\054\007\uffa6\010" +
    "\uffa6\011\uffa6\012\uffa6\013\uffa6\014\uffa6\015\uffa6\023\uffa6" +
    "\024\uffa6\031\uffa6\037\uffa6\040\uffa6\053\uffa6\054\uffa6\055" +
    "\uffa6\056\uffa6\057\uffa6\060\uffa6\061\uffa6\062\uffa6\063\uffa6" +
    "\001\002\000\054\007\uffa2\010\uffa2\011\uffa2\012\uffa2\013" +
    "\uffa2\014\uffa2\015\uffa2\023\uffa2\024\uffa2\031\uffa2\037\uffa2" +
    "\040\uffa2\053\uffa2\054\uffa2\055\uffa2\056\uffa2\057\uffa2\060" +
    "\uffa2\061\uffa2\062\uffa2\063\uffa2\001\002\000\014\053\uffa7" +
    "\054\uffa7\055\uffa7\062\uffa7\063\uffa7\001\002\000\054\007" +
    "\uffdc\010\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc" +
    "\023\uffdc\024\uffdc\031\uffdc\037\uffdc\040\uffdc\053\uffdc\054" +
    "\uffdc\055\uffdc\056\uffdc\057\uffdc\060\uffdc\061\uffdc\062\uffdc" +
    "\063\uffdc\001\002\000\014\053\103\054\025\055\105\062" +
    "\112\063\111\001\002\000\054\007\uffe8\010\uffe8\011\uffe8" +
    "\012\uffe8\013\uffe8\014\uffe8\015\uffe8\023\uffe8\024\uffe8\031" +
    "\uffe8\037\uffe8\040\uffe8\053\103\054\025\055\105\056\uffe8" +
    "\057\uffe8\060\uffe8\061\uffe8\062\112\063\111\001\002\000" +
    "\014\053\uffab\054\uffab\055\uffab\062\uffab\063\uffab\001\002" +
    "\000\054\007\uffa0\010\uffa0\011\uffa0\012\uffa0\013\uffa0\014" +
    "\uffa0\015\uffa0\023\uffa0\024\uffa0\031\uffa0\037\uffa0\040\uffa0" +
    "\053\uffa0\054\uffa0\055\uffa0\056\uffa0\057\uffa0\060\uffa0\061" +
    "\uffa0\062\uffa0\063\uffa0\001\002\000\052\006\uffe7\007\uffe7" +
    "\010\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016" +
    "\150\020\147\021\uffe7\023\uffe7\024\uffe7\031\uffe7\037\uffe7" +
    "\040\uffe7\056\uffe7\057\uffe7\060\uffe7\061\uffe7\001\002\000" +
    "\046\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6" +
    "\014\uffe6\015\uffe6\021\uffe6\023\uffe6\024\uffe6\031\uffe6\037" +
    "\uffe6\040\uffe6\056\uffe6\057\uffe6\060\uffe6\061\uffe6\001\002" +
    "\000\042\007\137\010\123\011\136\012\117\013\126\014" +
    "\120\015\132\023\130\024\125\031\uffdd\037\uffdd\040\uffdd" +
    "\056\131\057\127\060\121\061\122\001\002\000\010\031" +
    "\uffe1\037\uffe1\040\uffe1\001\002\000\046\007\uffe8\010\uffe8" +
    "\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\023\uffe8\024" +
    "\uffe8\053\103\054\025\055\105\056\uffe8\057\uffe8\060\uffe8" +
    "\061\uffe8\062\112\063\111\001\002\000\010\031\uffde\037" +
    "\uffde\040\uffde\001\002\000\052\005\uffbc\006\uffbc\007\uffbc" +
    "\010\uffbc\011\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc\020" +
    "\162\021\uffbc\023\uffbc\024\uffbc\031\uffbc\037\uffbc\040\uffbc" +
    "\056\uffbc\057\uffbc\060\uffbc\061\uffbc\001\002\000\030\011" +
    "\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\021\uffe8\053\103" +
    "\054\025\055\105\062\112\063\111\001\002\000\006\017" +
    "\152\054\025\001\002\000\022\006\uffc3\017\uffc3\051\155" +
    "\053\uffc3\054\uffc3\055\uffc3\062\uffc3\063\uffc3\001\002\000" +
    "\046\006\uffce\007\uffce\010\uffce\011\uffce\012\uffce\013\uffce" +
    "\014\uffce\015\uffce\021\uffce\023\uffce\024\uffce\031\uffce\037" +
    "\uffce\040\uffce\056\uffce\057\uffce\060\uffce\061\uffce\001\002" +
    "\000\004\017\154\001\002\000\046\006\uffcf\007\uffcf\010" +
    "\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf\015\uffcf\021\uffcf" +
    "\023\uffcf\024\uffcf\031\uffcf\037\uffcf\040\uffcf\056\uffcf\057" +
    "\uffcf\060\uffcf\061\uffcf\001\002\000\004\054\025\001\002" +
    "\000\020\006\uffc5\017\uffc5\053\uffc5\054\uffc5\055\uffc5\062" +
    "\uffc5\063\uffc5\001\002\000\020\006\uffc4\017\uffc4\053\uffc4" +
    "\054\uffc4\055\uffc4\062\uffc4\063\uffc4\001\002\000\016\011" +
    "\136\012\117\013\126\014\120\015\132\021\161\001\002" +
    "\000\052\005\uffba\006\uffba\007\uffba\010\uffba\011\uffba\012" +
    "\uffba\013\uffba\014\uffba\015\uffba\020\uffba\021\uffba\023\uffba" +
    "\024\uffba\031\uffba\037\uffba\040\uffba\056\uffba\057\uffba\060" +
    "\uffba\061\uffba\001\002\000\030\011\uffe8\012\uffe8\013\uffe8" +
    "\014\uffe8\015\uffe8\021\uffe8\053\103\054\025\055\105\062" +
    "\112\063\111\001\002\000\016\011\136\012\117\013\126" +
    "\014\120\015\132\021\164\001\002\000\052\005\uffbb\006" +
    "\uffbb\007\uffbb\010\uffbb\011\uffbb\012\uffbb\013\uffbb\014\uffbb" +
    "\015\uffbb\020\uffbb\021\uffbb\023\uffbb\024\uffbb\031\uffbb\037" +
    "\uffbb\040\uffbb\056\uffbb\057\uffbb\060\uffbb\061\uffbb\001\002" +
    "\000\046\006\uffea\007\uffea\010\uffea\011\uffea\012\uffea\013" +
    "\uffea\014\uffea\015\uffea\021\uffea\023\uffea\024\uffea\031\uffea" +
    "\037\uffea\040\uffea\056\uffea\057\uffea\060\uffea\061\uffea\001" +
    "\002\000\032\003\uff8a\025\uff8a\026\uff8a\027\uff8a\030\uff8a" +
    "\034\uff8a\035\uff8a\045\uff8a\046\uff8a\047\uff8a\050\uff8a\054" +
    "\uff8a\001\002\000\032\003\uff83\025\uff83\026\uff83\027\uff83" +
    "\030\uff83\034\uff83\035\uff83\045\uff83\046\uff83\047\uff83\050" +
    "\uff83\054\uff83\001\002\000\032\003\061\025\060\026\044" +
    "\027\055\030\062\034\uff87\035\uff87\045\052\046\013\047" +
    "\014\050\010\054\025\001\002\000\006\032\uff82\033\uff82" +
    "\001\002\000\006\032\uff88\033\uff88\001\002\000\006\032" +
    "\uffd7\033\175\001\002\000\004\032\uffda\001\002\000\032" +
    "\003\uff83\025\uff83\026\uff83\027\uff83\030\uff83\034\uff83\035" +
    "\uff83\045\uff83\046\uff83\047\uff83\050\uff83\054\uff83\001\002" +
    "\000\032\003\061\025\060\026\044\027\055\030\062\034" +
    "\uff87\035\uff87\045\052\046\013\047\014\050\010\054\025" +
    "\001\002\000\004\032\uff82\001\002\000\004\032\uffd8\001" +
    "\002\000\050\003\214\007\uff8b\010\uff8b\011\uff8b\012\uff8b" +
    "\013\uff8b\014\uff8b\015\uff8b\023\uff8b\024\uff8b\053\uff8b\054" +
    "\uff8b\055\uff8b\056\uff8b\057\uff8b\060\uff8b\061\uff8b\062\uff8b" +
    "\063\uff8b\001\002\000\032\003\uff83\025\uff83\026\uff83\027" +
    "\uff83\030\uff83\034\uff83\035\uff83\045\uff83\046\uff83\047\uff83" +
    "\050\uff83\054\uff83\001\002\000\032\003\205\025\060\026" +
    "\044\027\055\030\062\034\uff87\035\uff87\045\052\046\013" +
    "\047\014\050\010\054\025\001\002\000\004\036\207\001" +
    "\002\000\006\006\077\040\uff86\001\002\000\004\040\uffd3" +
    "\001\002\000\046\007\uff8b\010\uff8b\011\uff8b\012\uff8b\013" +
    "\uff8b\014\uff8b\015\uff8b\023\uff8b\024\uff8b\053\uff8b\054\uff8b" +
    "\055\uff8b\056\uff8b\057\uff8b\060\uff8b\061\uff8b\062\uff8b\063" +
    "\uff8b\001\002\000\046\007\uffe8\010\uffe8\011\uffe8\012\uffe8" +
    "\013\uffe8\014\uffe8\015\uffe8\023\uffe8\024\uffe8\053\103\054" +
    "\025\055\105\056\uffe8\057\uffe8\060\uffe8\061\uffe8\062\112" +
    "\063\111\001\002\000\004\040\uff89\001\002\000\004\040" +
    "\uff86\001\002\000\004\040\uffd4\001\002\000\004\040\uffd5" +
    "\001\002\000\046\007\uffe8\010\uffe8\011\uffe8\012\uffe8\013" +
    "\uffe8\014\uffe8\015\uffe8\023\uffe8\024\uffe8\053\103\054\025" +
    "\055\105\056\uffe8\057\uffe8\060\uffe8\061\uffe8\062\112\063" +
    "\111\001\002\000\004\037\217\001\002\000\032\003\uff8a" +
    "\025\uff8a\026\uff8a\027\uff8a\030\uff8a\034\uff8a\035\uff8a\045" +
    "\uff8a\046\uff8a\047\uff8a\050\uff8a\054\uff8a\001\002\000\032" +
    "\003\uff83\025\uff83\026\uff83\027\uff83\030\uff83\034\uff83\035" +
    "\uff83\045\uff83\046\uff83\047\uff83\050\uff83\054\uff83\001\002" +
    "\000\032\003\061\025\060\026\044\027\055\030\062\034" +
    "\uff87\035\uff87\045\052\046\013\047\014\050\010\054\025" +
    "\001\002\000\004\040\uff86\001\002\000\004\040\uffd6\001" +
    "\002\000\004\006\uffc6\001\002\000\006\003\227\054\025" +
    "\001\002\000\012\005\231\006\uffc3\020\233\051\155\001" +
    "\002\000\004\006\uffbf\001\002\000\004\006\uffc7\001\002" +
    "\000\030\006\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015" +
    "\uffe8\053\103\054\025\055\105\062\112\063\111\001\002" +
    "\000\006\006\uffc0\020\244\001\002\000\006\053\103\054" +
    "\025\001\002\000\004\022\242\001\002\000\004\022\240" +
    "\001\002\000\004\021\237\001\002\000\006\006\uffbd\020" +
    "\uffbd\001\002\000\004\053\103\001\002\000\004\021\uffb8" +
    "\001\002\000\004\054\025\001\002\000\004\021\uffb9\001" +
    "\002\000\006\053\103\054\025\001\002\000\004\021\246" +
    "\001\002\000\006\006\uffbe\020\uffbe\001\002\000\016\006" +
    "\uffcb\011\136\012\117\013\126\014\120\015\132\001\002" +
    "\000\004\006\uff91\001\002\000\016\017\uff8e\053\103\054" +
    "\025\055\105\062\112\063\111\001\002\000\020\017\uffae" +
    "\051\uffae\053\uffae\054\uffae\055\uffae\062\uffae\063\uffae\001" +
    "\002\000\016\017\uff8e\053\103\054\025\055\105\062\112" +
    "\063\111\001\002\000\016\017\uff8e\053\103\054\025\055" +
    "\105\062\112\063\111\001\002\000\020\017\uffac\051\uffac" +
    "\053\uffac\054\uffac\055\uffac\062\uffac\063\uffac\001\002\000" +
    "\020\017\uffb0\051\262\053\uffb0\054\uffb0\055\uffb0\062\uffb0" +
    "\063\uffb0\001\002\000\004\017\261\001\002\000\020\017" +
    "\uffad\051\uffad\053\uffad\054\uffad\055\uffad\062\uffad\063\uffad" +
    "\001\002\000\004\006\uff93\001\002\000\012\053\103\055" +
    "\105\062\112\063\111\001\002\000\016\017\uffaf\053\uffaf" +
    "\054\uffaf\055\uffaf\062\uffaf\063\uffaf\001\002\000\004\017" +
    "\uff90\001\002\000\004\017\uff8f\001\002\000\004\042\267" +
    "\001\002\000\004\002\ufffa\001\002\000\004\040\271\001" +
    "\002\000\046\003\ufff1\025\ufff1\026\ufff1\027\ufff1\030\ufff1" +
    "\032\ufff1\033\ufff1\034\ufff1\035\ufff1\036\ufff1\040\ufff1\042" +
    "\ufff1\045\ufff1\046\ufff1\047\ufff1\050\ufff1\052\ufff1\054\ufff1" +
    "\001\002\000\004\006\uffc1\001\002\000\004\004\274\001" +
    "\002\000\004\054\025\001\002\000\004\005\277\001\002" +
    "\000\004\006\uffc2\001\002\000\030\006\uffe8\011\uffe8\012" +
    "\uffe8\013\uffe8\014\uffe8\015\uffe8\053\103\054\025\055\105" +
    "\062\112\063\111\001\002\000\016\006\uffc8\011\136\012" +
    "\117\013\126\014\120\015\132\001\002\000\032\003\302" +
    "\006\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\053" +
    "\103\054\025\055\105\062\112\063\111\001\002\000\004" +
    "\006\uffca\001\002\000\016\006\uffcd\011\136\012\117\013" +
    "\126\014\120\015\132\001\002\000\032\003\305\006\uffe8" +
    "\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\053\103\054" +
    "\025\055\105\062\112\063\111\001\002\000\004\006\uffc9" +
    "\001\002\000\016\006\uffcc\011\136\012\117\013\126\014" +
    "\120\015\132\001\002\000\016\032\ufff7\033\ufff7\036\ufff7" +
    "\040\ufff7\042\ufff7\052\ufff7\001\002\000\016\032\ufff8\033" +
    "\ufff8\036\ufff8\040\ufff8\042\ufff8\052\ufff8\001\002\000\004" +
    "\040\312\001\002\000\046\003\ufff2\025\ufff2\026\ufff2\027" +
    "\ufff2\030\ufff2\032\ufff2\033\ufff2\034\ufff2\035\ufff2\036\ufff2" +
    "\040\ufff2\042\ufff2\045\ufff2\046\ufff2\047\ufff2\050\ufff2\052" +
    "\ufff2\054\ufff2\001\002\000\046\003\uffee\025\uffee\026\uffee" +
    "\027\uffee\030\uffee\032\uffee\033\uffee\034\uffee\035\uffee\036" +
    "\uffee\040\uffee\042\uffee\045\uffee\046\uffee\047\uffee\050\uffee" +
    "\052\uffee\054\uffee\001\002\000\004\006\uff92\001\002\000" +
    "\016\017\uff8e\053\103\054\025\055\105\062\112\063\111" +
    "\001\002\000\004\017\317\001\002\000\004\006\uff94\001" +
    "\002\000\046\003\uffed\025\uffed\026\uffed\027\uffed\030\uffed" +
    "\032\uffed\033\uffed\034\uffed\035\uffed\036\uffed\040\uffed\042" +
    "\uffed\045\uffed\046\uffed\047\uffed\050\uffed\052\uffed\054\uffed" +
    "\001\002\000\046\003\ufff0\025\ufff0\026\ufff0\027\ufff0\030" +
    "\ufff0\032\ufff0\033\ufff0\034\ufff0\035\ufff0\036\ufff0\040\ufff0" +
    "\042\ufff0\045\ufff0\046\ufff0\047\ufff0\050\ufff0\052\ufff0\054" +
    "\ufff0\001\002\000\046\003\ufff4\025\ufff4\026\ufff4\027\ufff4" +
    "\030\ufff4\032\ufff4\033\ufff4\034\ufff4\035\ufff4\036\ufff4\040" +
    "\ufff4\042\ufff4\045\ufff4\046\ufff4\047\ufff4\050\ufff4\052\ufff4" +
    "\054\ufff4\001\002\000\004\054\025\001\002\000\004\016" +
    "\uff84\001\002\000\004\016\326\001\002\000\012\017\uffb5" +
    "\046\013\047\014\050\010\001\002\000\004\017\330\001" +
    "\002\000\032\003\uff81\025\uff81\026\uff81\027\uff81\030\uff81" +
    "\034\uff81\035\uff81\045\uff81\046\uff81\047\uff81\050\uff81\054" +
    "\uff81\001\002\000\032\003\uff83\025\uff83\026\uff83\027\uff83" +
    "\030\uff83\034\uff83\035\uff83\045\uff83\046\uff83\047\uff83\050" +
    "\uff83\054\uff83\001\002\000\032\003\061\025\060\026\044" +
    "\027\055\030\062\034\uff87\035\uff87\045\052\046\013\047" +
    "\014\050\010\054\025\001\002\000\004\052\335\001\002" +
    "\000\004\042\uff82\001\002\000\014\053\103\054\025\055" +
    "\105\062\112\063\111\001\002\000\004\006\uff9e\001\002" +
    "\000\004\006\uff9a\001\002\000\004\006\344\001\002\000" +
    "\004\006\uff9c\001\002\000\006\006\uff9d\016\150\001\002" +
    "\000\004\006\uff9b\001\002\000\004\042\uffd0\001\002\000" +
    "\004\042\346\001\002\000\016\003\uffd1\041\uffd1\043\uffd1" +
    "\046\uffd1\047\uffd1\050\uffd1\001\002\000\006\003\ufffb\041" +
    "\ufffb\001\002\000\006\003\ufffc\041\ufffc\001\002\000\004" +
    "\016\uff84\001\002\000\004\016\353\001\002\000\012\017" +
    "\uffb5\046\013\047\014\050\010\001\002\000\004\017\355" +
    "\001\002\000\032\003\uff81\025\uff81\026\uff81\027\uff81\030" +
    "\uff81\034\uff81\035\uff81\045\uff81\046\uff81\047\uff81\050\uff81" +
    "\054\uff81\001\002\000\032\003\uff83\025\uff83\026\uff83\027" +
    "\uff83\030\uff83\034\uff83\035\uff83\045\uff83\046\uff83\047\uff83" +
    "\050\uff83\054\uff83\001\002\000\032\003\061\025\060\026" +
    "\044\027\055\030\062\034\uff87\035\uff87\045\052\046\013" +
    "\047\014\050\010\054\025\001\002\000\004\042\uff82\001" +
    "\002\000\004\042\362\001\002\000\016\003\uffd2\041\uffd2" +
    "\043\uffd2\046\uffd2\047\uffd2\050\uffd2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\360\000\006\002\004\067\003\001\001\000\016\003" +
    "\016\005\017\006\015\007\010\010\011\045\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\033\350\001" +
    "\001\000\002\001\001\000\016\003\347\005\017\006\015" +
    "\007\010\010\011\045\014\001\001\000\016\003\346\005" +
    "\017\006\015\007\010\010\011\045\014\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\033\023\001\001\000" +
    "\004\070\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\043\027\044\030\045\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\032\001\001\000\002" +
    "\001\001\000\010\043\034\044\030\045\031\001\001\000" +
    "\002\001\001\000\004\072\036\001\001\000\004\073\037" +
    "\001\001\000\042\011\053\012\046\013\063\014\040\015" +
    "\064\017\045\020\052\021\041\022\062\024\044\025\042" +
    "\026\065\033\050\035\047\045\055\065\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\074\310\001\001\000" +
    "\044\011\306\012\046\013\063\014\040\015\064\017\045" +
    "\020\052\021\041\022\062\024\044\025\042\026\065\033" +
    "\050\035\047\045\055\056\307\065\056\001\001\000\002" +
    "\001\001\000\004\034\145\001\001\000\004\045\272\001" +
    "\001\000\004\074\267\001\001\000\004\074\265\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\077\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\033" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\021\105\030\113\031\115\033\107\035" +
    "\112\036\106\047\101\050\114\051\103\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\034\145\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\052\133\053\123\054\132" +
    "\060\134\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\021\105\031\164\033\137\035\140\047\101\050\114" +
    "\051\103\001\001\000\022\021\105\030\141\031\115\033" +
    "\137\035\140\047\101\050\114\051\103\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\034\145\001\001\000" +
    "\002\001\001\000\014\052\133\053\123\054\132\060\143" +
    "\061\142\001\001\000\002\001\001\000\024\021\105\030" +
    "\113\031\115\033\107\035\112\036\144\047\101\050\114" +
    "\051\103\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\021\105\030\157\031\115\033\137\035\140\047\101" +
    "\050\114\051\103\001\001\000\006\033\150\041\152\001" +
    "\001\000\004\057\155\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\033\150\041\156\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\052\133" +
    "\001\001\000\002\001\001\000\022\021\105\030\162\031" +
    "\115\033\137\035\140\047\101\050\114\051\103\001\001" +
    "\000\004\052\133\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\062\166\001\001\000\004\073\167\001\001" +
    "\000\042\011\170\012\046\013\063\014\040\015\064\017" +
    "\045\020\052\021\041\022\062\024\044\025\042\026\065" +
    "\033\050\035\047\045\055\065\056\001\001\000\004\074" +
    "\171\001\001\000\004\064\172\001\001\000\004\042\173" +
    "\001\001\000\002\001\001\000\004\073\175\001\001\000" +
    "\042\011\176\012\046\013\063\014\040\015\064\017\045" +
    "\020\052\021\041\022\062\024\044\025\042\026\065\033" +
    "\050\035\047\045\055\065\056\001\001\000\004\074\177" +
    "\001\001\000\002\001\001\000\004\016\214\001\001\000" +
    "\004\073\202\001\001\000\042\011\203\012\046\013\063" +
    "\014\040\015\064\017\045\020\052\021\041\022\062\024" +
    "\044\025\042\026\065\033\050\035\047\045\055\065\056" +
    "\001\001\000\002\001\001\000\004\066\205\001\001\000" +
    "\002\001\001\000\004\016\207\001\001\000\024\021\105" +
    "\030\113\031\115\033\107\035\112\036\210\047\101\050" +
    "\114\051\103\001\001\000\004\063\211\001\001\000\004" +
    "\066\212\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\021\105\030\113\031\115\033\107\035\112\036\215" +
    "\047\101\050\114\051\103\001\001\000\002\001\001\000" +
    "\004\062\217\001\001\000\004\073\220\001\001\000\042" +
    "\011\221\012\046\013\063\014\040\015\064\017\045\020" +
    "\052\021\041\022\062\024\044\025\042\026\065\033\050" +
    "\035\047\045\055\065\056\001\001\000\004\066\222\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\033\225" +
    "\041\227\001\001\000\006\027\231\057\155\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\021\105\030\246" +
    "\031\115\033\137\035\140\047\101\050\114\051\103\001" +
    "\001\000\002\001\001\000\010\033\233\047\234\071\235" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\047\240\001\001\000\002" +
    "\001\001\000\004\033\242\001\001\000\002\001\001\000" +
    "\010\033\233\047\234\071\244\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\052\133\001\001\000\002\001" +
    "\001\000\022\032\255\033\150\037\256\040\253\041\252" +
    "\047\251\050\257\051\254\001\001\000\002\001\001\000" +
    "\022\032\255\033\150\037\264\040\253\041\252\047\251" +
    "\050\257\051\254\001\001\000\022\032\255\033\150\037" +
    "\263\040\253\041\252\047\251\050\257\051\254\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\032\255\040\262" +
    "\047\251\050\257\051\254\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\023\275\033\274\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\021\105\030" +
    "\277\031\115\033\137\035\140\047\101\050\114\051\103" +
    "\001\001\000\004\052\133\001\001\000\022\021\105\030" +
    "\302\031\115\033\137\035\140\047\101\050\114\051\103" +
    "\001\001\000\002\001\001\000\004\052\133\001\001\000" +
    "\022\021\105\030\305\031\115\033\137\035\140\047\101" +
    "\050\114\051\103\001\001\000\002\001\001\000\004\052" +
    "\133\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\032\255\033\150\037\315\040\253\041\252" +
    "\047\251\050\257\051\254\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\033\323\001\001\000\004\070\324\001" +
    "\001\000\002\001\001\000\010\043\326\044\030\045\031" +
    "\001\001\000\002\001\001\000\004\072\330\001\001\000" +
    "\004\073\331\001\001\000\042\011\332\012\046\013\063" +
    "\014\040\015\064\017\045\020\052\021\041\022\062\024" +
    "\044\025\042\026\065\033\050\035\047\045\055\065\056" +
    "\001\001\000\004\046\333\001\001\000\004\074\344\001" +
    "\001\000\016\021\340\033\341\047\335\050\342\051\336" +
    "\055\337\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\070\351" +
    "\001\001\000\002\001\001\000\010\043\353\044\030\045" +
    "\031\001\001\000\002\001\001\000\004\072\355\001\001" +
    "\000\004\073\356\001\001\000\042\011\357\012\046\013" +
    "\063\014\040\015\064\017\045\020\052\021\041\022\062" +
    "\024\044\025\042\026\065\033\050\035\047\045\055\065" +
    "\056\001\001\000\004\074\360\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private boolean sintacticErrors = false;

    public void apuntar_error(int[] lc) {
        new ErrorSintax().printError(lc, "");
        this.sintacticErrors = true;
    }

    public boolean getSintacticErrors() {
        return this.sintacticErrors;
    }

    public void report_fatal_error(String message, Object info) throws Exception {
        new ErrorFatalSintax().printError(new int[]{0, 0}, message);
        throw new ErrorFatalSintax();
      }

    private LexicalScanner scanner;

    public Parser(LexicalScanner scanner, java_cup.runtime.SymbolFactory sf) {
        super(scanner, sf);
        this.scanner = scanner;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= START EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymSTART start_val = (SymSTART)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // START ::= STARTMAIN METFUNC DECMP 
            {
              SymSTART RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymMETFUNC a = (SymMETFUNC)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymDECMP b = (SymDECMP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymSTART(a, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // METFUNC ::= DECMETLIST 
            {
              SymMETFUNC RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymDECMETLIST a = (SymDECMETLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymMETFUNC(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METFUNC",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // METFUNC ::= DECFUNCLIST 
            {
              SymMETFUNC RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymDECFUNCLIST b = (SymDECFUNCLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymMETFUNC(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METFUNC",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // METFUNC ::= 
            {
              SymMETFUNC RESULT =null;
		 RESULT = new SymMETFUNC(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METFUNC",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECMETLIST ::= DECMET METFUNC 
            {
              SymDECMETLIST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymDECMET a = (SymDECMET)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymMETFUNC b = (SymMETFUNC)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymDECMETLIST(a, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECMETLIST",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECFUNCLIST ::= DECFUNC METFUNC 
            {
              SymDECFUNCLIST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymDECFUNC a = (SymDECFUNC)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymMETFUNC b = (SymMETFUNC)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymDECFUNCLIST(a, b, scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECFUNCLIST",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECMP ::= prog ID STARTPROC lparen ARGLIST rparen PMB INCSCOPE SENTLIST DICSCOPE end 
            {
              SymDECMP RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		SymID a = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		SymARGLIST b = (SymARGLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymSENTLIST c = (SymSENTLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new SymDECMP(a, b, c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECMP",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECMP ::= error 
            {
              SymDECMP RESULT =null;
		 apuntar_error(scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECMP",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTLIST ::= SENT SENTLISTSEP 
            {
              SymSENTLIST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymSENT a = (SymSENT)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymSENTLISTSEP b = (SymSENTLISTSEP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymSENTLIST(a, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTLISTSEP ::= SENTLIST 
            {
              SymSENTLISTSEP RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymSENTLIST a = (SymSENTLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymSENTLISTSEP(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTLISTSEP",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTLISTSEP ::= 
            {
              SymSENTLISTSEP RESULT =null;
		 RESULT = new SymSENTLISTSEP();  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTLISTSEP",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENT ::= OUTPUT scolon 
            {
              SymSENT RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymOUTPUT a = (SymOUTPUT)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymSENT(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENT ::= INPUT scolon 
            {
              SymSENT RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymINPUT b = (SymINPUT)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymSENT(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENT ::= CONDIF endif 
            {
              SymSENT RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymCONDIF c = (SymCONDIF)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymSENT(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENT ::= WHILE DICSCOPE endloop 
            {
              SymSENT RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymWHILE d = (SymWHILE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new SymSENT(d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENT ::= REPUNTIL DICSCOPE endloop 
            {
              SymSENT RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymREPUNTIL e = (SymREPUNTIL)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new SymSENT(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENT ::= CALLPROC scolon 
            {
              SymSENT RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymCALLPROC f = (SymCALLPROC)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymSENT(f); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENT ::= ASSIGN scolon 
            {
              SymSENT RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymASSIGN g = (SymASSIGN)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymSENT(g); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENT ::= DECVAR scolon 
            {
              SymSENT RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymDECVAR h = (SymDECVAR)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymSENT(h); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENT ::= DECLARECONST scolon 
            {
              SymSENT RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymDECLARECONST i = (SymDECLARECONST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymSENT(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENT ::= DECARRAY scolon 
            {
              SymSENT RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymDECARRAY j = (SymDECARRAY)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymSENT(j); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENT ::= error scolon 
            {
              SymSENT RESULT =null;
		 apuntar_error(scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // OPERANDX ::= OPERANDX OPARITH SUBTYPE 
            {
              SymOPERANDX RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymOPERANDX a = (SymOPERANDX)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymOPARITH b = (SymOPARITH)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymSUBTYPE c = (SymSUBTYPE)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new SymOPERANDX(a, b, c, scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERANDX",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // OPERANDX ::= SUBTYPE 
            {
              SymOPERANDX RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymSUBTYPE b = (SymSUBTYPE)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new SymOPERANDX(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERANDX",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // OPERANDX ::= 
            {
              SymOPERANDX RESULT =null;
		  RESULT = new SymOPERANDX(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERANDX",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SUBTYPE ::= ID 
            {
              SymSUBTYPE RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymID a = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new SymSUBTYPE(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SUBTYPE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SUBTYPE ::= IDARRAY 
            {
              SymSUBTYPE RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymIDARRAY b = (SymIDARRAY)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new SymSUBTYPE(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SUBTYPE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SUBTYPE ::= NUM 
            {
              SymSUBTYPE RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymNUM c = (SymNUM)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new SymSUBTYPE(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SUBTYPE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SUBTYPE ::= CALLPROC 
            {
              SymSUBTYPE RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymCALLPROC d = (SymCALLPROC)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new SymSUBTYPE(d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SUBTYPE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SUBTYPE ::= LOGIC 
            {
              SymSUBTYPE RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymLOGIC e = (SymLOGIC)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new SymSUBTYPE(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SUBTYPE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SUBTYPE ::= STR 
            {
              SymSUBTYPE RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymSTR f = (SymSTR)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new SymSUBTYPE(f); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SUBTYPE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CONDITION ::= OPERANDX OPERATION OPERANDX CONDEXT 
            {
              SymCONDITION RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymOPERANDX a = (SymOPERANDX)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymOPERATION b = (SymOPERATION)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymOPERANDX c = (SymOPERANDX)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymCONDEXT d = (SymCONDEXT)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymCONDITION(a, b, c, d, scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDITION",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CONDITION ::= ID 
            {
              SymCONDITION RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymID a = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymCONDITION(a, scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDITION",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CONDITION ::= IDARRAY 
            {
              SymCONDITION RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymIDARRAY a = (SymIDARRAY)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymCONDITION(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDITION",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CONDEXT ::= OPERATION CONDITION 
            {
              SymCONDEXT RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymOPERATION a = (SymOPERATION)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymCONDITION b = (SymCONDITION)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymCONDEXT(a, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDEXT",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CONDEXT ::= 
            {
              SymCONDEXT RESULT =null;
		 RESULT = new SymCONDEXT(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDEXT",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OPERATION ::= ANDOR 
            {
              SymOPERATION RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymANDOR a = (SymANDOR)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymOPERATION(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERATION",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OPERATION ::= OPLOGIC 
            {
              SymOPERATION RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymOPLOGIC b = (SymOPLOGIC)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymOPERATION(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERATION",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CONDIF ::= If CONDLABEL CONDITION then CONDBRANCH INCSCOPE SENTLIST DICSCOPE ELSE CONDELSE 
            {
              SymCONDIF RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		SymCONDITION a = (SymCONDITION)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymSENTLIST b = (SymSENTLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymCONDELSE c = (SymCONDELSE)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymCONDIF(a, b, c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDIF",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CONDIF ::= If error 
            {
              SymCONDIF RESULT =null;
		 apuntar_error(scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDIF",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CONDELSE ::= Else INCSCOPE SENTLIST DICSCOPE 
            {
              SymCONDELSE RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymSENTLIST a = (SymSENTLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymCONDELSE(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDELSE",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CONDELSE ::= 
            {
              SymCONDELSE RESULT =null;
		 RESULT = new SymCONDELSE(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDELSE",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // WHILE ::= STARTLOOP While CONDLABEL CONDITION loop CONDBRANCH INCSCOPE SENTLIST GSTARTLOOP 
            {
              SymWHILE RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		SymCONDITION a = (SymCONDITION)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymSENTLIST b = (SymSENTLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymWHILE(a, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WHILE",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // WHILE ::= STARTLOOP While error 
            {
              SymWHILE RESULT =null;
		 apuntar_error(scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WHILE",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // REPUNTIL ::= STARTLOOP Repeat INCSCOPE SENTLIST Until CONDLABEL CONDITION CONDBRANCHINV GSTARTLOOP 
            {
              SymREPUNTIL RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		SymSENTLIST a = (SymSENTLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymCONDITION b = (SymCONDITION)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new SymREPUNTIL(b, a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("REPUNTIL",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // REPUNTIL ::= STARTLOOP Repeat INCSCOPE error GSTARTLOOP 
            {
              SymREPUNTIL RESULT =null;
		 apuntar_error(scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("REPUNTIL",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECMET ::= method ID STARTPROC lparen ARGLIST rparen PMB INCSCOPE SENTLIST DICSCOPE end 
            {
              SymDECMET RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		SymID a = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		SymARGLIST b = (SymARGLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymSENTLIST c = (SymSENTLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new SymDECMET(a, b, c, scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECMET",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECFUNC ::= TYPE func ID STARTPROC lparen ARGLIST rparen PMB INCSCOPE SENTLIST RETURN DICSCOPE end 
            {
              SymDECFUNC RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).right;
		SymTYPE a = (SymTYPE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-12)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		SymID b = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		SymARGLIST c = (SymARGLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymSENTLIST d = (SymSENTLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymRETURN e = (SymRETURN)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new SymDECFUNC(a, b, c, d, e, scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECFUNC",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // RETURN ::= Return RETURNTYPE scolon 
            {
              SymRETURN RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymRETURNTYPE a = (SymRETURNTYPE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymRETURN(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CALLPROC ::= ID lparen IDLIST rparen 
            {
              SymCALLPROC RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymID a = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymIDLIST b = (SymIDLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymCALLPROC(a, b, scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CALLPROC",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CALLPROC ::= ID lparen rparen 
            {
              SymCALLPROC RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymID a = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new SymCALLPROC(a, scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CALLPROC",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ASSIGN ::= ID assign OPERANDX 
            {
              SymASSIGN RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymID a = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymOPERANDX b = (SymOPERANDX)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymASSIGN(a, b, scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGN",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ASSIGN ::= IDARRAY assign OPERANDX 
            {
              SymASSIGN RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymIDARRAY a = (SymIDARRAY)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymOPERANDX b = (SymOPERANDX)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymASSIGN(a, b, scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGN",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ASSIGN ::= TYPE colons ID assign OPERANDX 
            {
              SymASSIGN RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		SymTYPE a = (SymTYPE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymID b = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymOPERANDX c = (SymOPERANDX)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymASSIGN(a, b, c, scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGN",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ASSIGN ::= ID assign error 
            {
              SymASSIGN RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymID a = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 apuntar_error(scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGN",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ASSIGN ::= IDARRAY assign error 
            {
              SymASSIGN RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymIDARRAY a = (SymIDARRAY)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 apuntar_error(scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGN",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ASSIGNCONST ::= ID assign OPERANDX 
            {
              SymASSIGNCONST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymID a = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymOPERANDX b = (SymOPERANDX)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymASSIGNCONST(a, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGNCONST",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECVAR ::= TYPE colons IDLIST 
            {
              SymDECVAR RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymTYPE a = (SymTYPE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymIDLIST b = (SymIDLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymDECVAR(a, b, scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECVAR",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DECVAR ::= TYPE error 
            {
              SymDECVAR RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymTYPE a = (SymTYPE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 apuntar_error(scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECVAR",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // IDLIST ::= ID IDLISTSEP 
            {
              SymIDLIST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymID a = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymIDLISTSEP b = (SymIDLISTSEP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymIDLIST(a, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDLIST",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // IDLISTSEP ::= comma IDLIST 
            {
              SymIDLISTSEP RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymIDLIST a = (SymIDLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymIDLISTSEP(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDLISTSEP",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // IDLISTSEP ::= 
            {
              SymIDLISTSEP RESULT =null;
		 RESULT = new SymIDLISTSEP(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDLISTSEP",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DECLARECONST ::= Const TYPE colons ASSIGNCONST 
            {
              SymDECLARECONST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymTYPE a = (SymTYPE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymASSIGNCONST b = (SymASSIGNCONST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymDECLARECONST(a, b, scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARECONST",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECLARECONST ::= Const error 
            {
              SymDECLARECONST RESULT =null;
		 apuntar_error(scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARECONST",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DECARRAY ::= TYPE colons ID DECLISTDIM 
            {
              SymDECARRAY RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymTYPE a = (SymTYPE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymID b = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymDECLISTDIM c = (SymDECLISTDIM)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymDECARRAY(a, b, c, scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECARRAY",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DECARRAY ::= TYPE colons error 
            {
              SymDECARRAY RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymTYPE a = (SymTYPE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 apuntar_error(scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECARRAY",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DECLISTDIM ::= DECLISTDIM lbrckt SUBRANGE rbrckt 
            {
              SymDECLISTDIM RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymDECLISTDIM a = (SymDECLISTDIM)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymSUBRANGE b = (SymSUBRANGE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		   RESULT = new SymDECLISTDIM(a, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLISTDIM",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DECLISTDIM ::= lbrckt SUBRANGE rbrckt 
            {
              SymDECLISTDIM RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymSUBRANGE a = (SymSUBRANGE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymDECLISTDIM(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLISTDIM",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // IDARRAY ::= ID IDLISTDIM 
            {
              SymIDARRAY RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymID a = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymIDLISTDIM b = (SymIDLISTDIM)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymIDARRAY(a,b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDARRAY",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // IDLISTDIM ::= IDLISTDIM lbrckt OPERANDX rbrckt 
            {
              SymIDLISTDIM RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymIDLISTDIM a = (SymIDLISTDIM)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymOPERANDX b = (SymOPERANDX)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymIDLISTDIM(a,b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDLISTDIM",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // IDLISTDIM ::= lbrckt OPERANDX rbrckt 
            {
              SymIDLISTDIM RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymOPERANDX a = (SymOPERANDX)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymIDLISTDIM(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDLISTDIM",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SUBRANGE ::= ID dotdot ID 
            {
              SymSUBRANGE RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymID a = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymID b = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymSUBRANGE(a, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SUBRANGE",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SUBRANGE ::= NUM dotdot NUM 
            {
              SymSUBRANGE RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymNUM a = (SymNUM)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymNUM b = (SymNUM)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymSUBRANGE(a,b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SUBRANGE",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ARGLIST ::= ARG 
            {
              SymARGLIST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymARG a = (SymARG)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymARGLIST(a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGLIST",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ARGLIST ::= ARG comma ARGLIST 
            {
              SymARGLIST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymARG a = (SymARG)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymARGLIST b = (SymARGLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymARGLIST(a, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGLIST",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ARGLIST ::= 
            {
              SymARGLIST RESULT =null;
		 RESULT = new SymARGLIST(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGLIST",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ARG ::= TYPE ID 
            {
              SymARG RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymTYPE a = (SymTYPE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymID b = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new SymARG(a, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARG",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // TYPE ::= integer 
            {
              SymTYPE RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymTYPE(a.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // TYPE ::= string 
            {
              SymTYPE RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymTYPE(a.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // TYPE ::= logic 
            {
              SymTYPE RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymTYPE(a.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // VALUELIST ::= VALUE 
            {
              SymVALUELIST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymVALUE a = (SymVALUE)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymVALUELIST(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUELIST",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // VALUELIST ::= VALUE comma VALUELIST 
            {
              SymVALUELIST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymVALUE a = (SymVALUE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymVALUELIST b = (SymVALUELIST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymVALUELIST(a, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUELIST",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // VALUE ::= NUM 
            {
              SymVALUE RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymNUM a = (SymNUM)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymVALUE(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // VALUE ::= LOGIC 
            {
              SymVALUE RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymLOGIC b = (SymLOGIC)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymVALUE(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // VALUE ::= STR 
            {
              SymVALUE RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymSTR c = (SymSTR)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymVALUE(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OPARITH ::= add 
            {
              SymOPARITH RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymOPARITH(a.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPARITH",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OPARITH ::= sub 
            {
              SymOPARITH RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymOPARITH(b.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPARITH",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OPARITH ::= mult 
            {
              SymOPARITH RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymOPARITH(c.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPARITH",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // OPARITH ::= div 
            {
              SymOPARITH RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymOPARITH(d.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPARITH",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // OPARITH ::= mod 
            {
              SymOPARITH RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymOPARITH(e.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPARITH",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // OPLOGIC ::= gte 
            {
              SymOPLOGIC RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymOPLOGIC(a.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPLOGIC",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // OPLOGIC ::= lt 
            {
              SymOPLOGIC RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymOPLOGIC(b.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPLOGIC",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // OPLOGIC ::= equals 
            {
              SymOPLOGIC RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymOPLOGIC(c.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPLOGIC",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // OPLOGIC ::= gt 
            {
              SymOPLOGIC RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymOPLOGIC(d.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPLOGIC",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // OPLOGIC ::= lte 
            {
              SymOPLOGIC RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymOPLOGIC(e.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPLOGIC",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // OPLOGIC ::= noteq 
            {
              SymOPLOGIC RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymOPLOGIC(f.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPLOGIC",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ANDOR ::= op_and 
            {
              SymANDOR RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymANDOR(a.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ANDOR",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ANDOR ::= op_or 
            {
              SymANDOR RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymANDOR(b.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ANDOR",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // RETURNTYPE ::= NUM 
            {
              SymRETURNTYPE RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymNUM a = (SymNUM)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymRETURNTYPE(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURNTYPE",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // RETURNTYPE ::= ID 
            {
              SymRETURNTYPE RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymID b = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymRETURNTYPE(b, scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURNTYPE",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // RETURNTYPE ::= CALLPROC 
            {
              SymRETURNTYPE RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymCALLPROC c = (SymCALLPROC)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymRETURNTYPE(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURNTYPE",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // RETURNTYPE ::= LOGIC 
            {
              SymRETURNTYPE RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymLOGIC d = (SymLOGIC)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymRETURNTYPE(d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURNTYPE",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // RETURNTYPE ::= STR 
            {
              SymRETURNTYPE RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymSTR e = (SymSTR)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymRETURNTYPE(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURNTYPE",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // NUM ::= val_int 
            {
              SymNUM RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymNUM(Integer.valueOf(a.toString())); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NUM",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // LOGIC ::= True 
            {
              SymLOGIC RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymLOGIC(a.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOGIC",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // LOGIC ::= False 
            {
              SymLOGIC RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymLOGIC(b.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOGIC",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ID ::= val_id 
            {
              SymID RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymID(a.toString(), scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // STR ::= val_str 
            {
              SymSTR RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymSTR(a.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STR",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // OUTPUT ::= print lparen PRINT rparen 
            {
              SymOUTPUT RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymPRINT a = (SymPRINT)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymOUTPUT(a, false, scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OUTPUT",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // OUTPUT ::= line lparen PRINT rparen 
            {
              SymOUTPUT RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymPRINT a = (SymPRINT)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymOUTPUT(a, true, scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OUTPUT",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // OUTPUT ::= print error 
            {
              SymOUTPUT RESULT =null;
		 apuntar_error(scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OUTPUT",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // OUTPUT ::= line error 
            {
              SymOUTPUT RESULT =null;
		 apuntar_error(scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OUTPUT",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // PRINT ::= VALUELIST PRINT 
            {
              SymPRINT RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymVALUELIST a = (SymVALUELIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymPRINT b = (SymPRINT)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymPRINT(a, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRINT",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // PRINT ::= IDLIST PRINT 
            {
              SymPRINT RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymIDLIST c = (SymIDLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymPRINT b = (SymPRINT)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymPRINT(c, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRINT",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // PRINT ::= 
            {
              SymPRINT RESULT =null;
		 RESULT = new SymPRINT(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRINT",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // INPUT ::= read lparen ID rparen 
            {
              SymINPUT RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymID a = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymINPUT(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INPUT",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // INPUT ::= read error 
            {
              SymINPUT RESULT =null;
		 apuntar_error(scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INPUT",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // CONDLABEL ::= 
            {
              SymCONDLABEL RESULT =null;
		 RESULT = new SymCONDLABEL(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDLABEL",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // CONDBRANCH ::= 
            {
              SymCONDBRANCH RESULT =null;
		 RESULT = new SymCONDBRANCH(false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDBRANCH",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // CONDBRANCHINV ::= 
            {
              SymCONDBRANCH RESULT =null;
		 RESULT = new SymCONDBRANCH(true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDBRANCHINV",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // ELSE ::= 
            {
              SymELSE RESULT =null;
		 RESULT = new SymELSE(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // STARTLOOP ::= 
            {
              SymSTARTLOOP RESULT =null;
		 RESULT = new SymSTARTLOOP(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STARTLOOP",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // GSTARTLOOP ::= 
            {
              SymGSTARTLOOP RESULT =null;
		 RESULT = new SymGSTARTLOOP(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GSTARTLOOP",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // STARTMAIN ::= 
            {
              SymSTARTMAIN RESULT =null;
		 RESULT = new SymSTARTMAIN(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STARTMAIN",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // STARTPROC ::= 
            {
              SymSTARTPROC RESULT =null;
		 RESULT = new SymSTARTPROC(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STARTPROC",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // INCSCOPE ::= 
            {
              SymINCSCOPE RESULT =null;
		 RESULT = new SymINCSCOPE(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCSCOPE",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // DICSCOPE ::= 
            {
              SymDICSCOPE RESULT =null;
		 RESULT = new SymDICSCOPE(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DICSCOPE",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // PMB ::= 
            {
              SymPMB RESULT =null;
		 RESULT = new SymPMB(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PMB",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
