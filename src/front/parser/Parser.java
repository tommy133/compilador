
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package front.parser;

import front.symbols.*;
import front.scanner.LexicalScanner;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\163\000\002\002\004\000\002\002\005\000\002\003" +
    "\003\000\002\003\003\000\002\003\002\000\002\005\004" +
    "\000\002\006\004\000\002\004\015\000\002\011\004\000" +
    "\002\056\003\000\002\056\002\000\002\012\004\000\002" +
    "\012\004\000\002\012\004\000\002\012\005\000\002\012" +
    "\005\000\002\012\004\000\002\012\004\000\002\012\004" +
    "\000\002\012\004\000\002\012\004\000\002\030\005\000" +
    "\002\030\003\000\002\030\002\000\002\031\003\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\036\006\000\002\036\003" +
    "\000\002\036\003\000\002\061\004\000\002\061\002\000" +
    "\002\060\003\000\002\060\003\000\002\015\014\000\002" +
    "\042\006\000\002\042\002\000\002\017\013\000\002\020" +
    "\013\000\002\007\015\000\002\010\017\000\002\046\005" +
    "\000\002\021\006\000\002\021\005\000\002\022\005\000" +
    "\002\022\005\000\002\022\007\000\002\023\005\000\002" +
    "\024\005\000\002\041\004\000\002\057\004\000\002\057" +
    "\002\000\002\025\006\000\002\026\006\000\002\027\006" +
    "\000\002\027\005\000\002\035\004\000\002\034\006\000" +
    "\002\034\005\000\002\071\005\000\002\071\005\000\002" +
    "\043\003\000\002\043\005\000\002\043\002\000\002\044" +
    "\004\000\002\045\003\000\002\045\003\000\002\045\003" +
    "\000\002\040\003\000\002\040\005\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\052\003\000\002" +
    "\052\003\000\002\052\003\000\002\052\003\000\002\053" +
    "\003\000\002\053\003\000\002\053\003\000\002\053\003" +
    "\000\002\053\003\000\002\053\003\000\002\054\003\000" +
    "\002\054\003\000\002\055\003\000\002\055\003\000\002" +
    "\055\003\000\002\055\003\000\002\055\003\000\002\047" +
    "\003\000\002\050\003\000\002\050\003\000\002\033\003" +
    "\000\002\051\003\000\002\013\006\000\002\013\006\000" +
    "\002\037\004\000\002\037\004\000\002\037\002\000\002" +
    "\014\006\000\002\016\002\000\002\062\002\000\002\063" +
    "\002\000\002\064\002\000\002\065\002\000\002\066\002" +
    "\000\002\067\002\000\002\070\002\000\002\073\002\000" +
    "\002\074\002\000\002\072\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\340\000\014\040\uff93\042\uff93\045\uff93\046\uff93\047" +
    "\uff93\001\002\000\014\040\ufffd\042\007\045\013\046\014" +
    "\047\010\001\002\000\004\002\006\001\002\000\004\002" +
    "\001\001\002\000\004\053\024\001\002\000\010\004\uffbb" +
    "\043\uffbb\053\uffbb\001\002\000\014\040\ufffd\042\007\045" +
    "\013\046\014\047\010\001\002\000\014\040\ufffd\042\007" +
    "\045\013\046\014\047\010\001\002\000\010\004\uffbd\043" +
    "\uffbd\053\uffbd\001\002\000\010\004\uffbc\043\uffbc\053\uffbc" +
    "\001\002\000\004\043\303\001\002\000\004\040\ufffe\001" +
    "\002\000\004\040\022\001\002\000\004\040\uffff\001\002" +
    "\000\004\002\000\001\002\000\004\053\024\001\002\000" +
    "\004\015\uff92\001\002\000\072\005\uffa1\006\uffa1\007\uffa1" +
    "\010\uffa1\011\uffa1\012\uffa1\013\uffa1\014\uffa1\015\uffa1\016" +
    "\uffa1\017\uffa1\020\uffa1\021\uffa1\022\uffa1\023\uffa1\030\uffa1" +
    "\036\uffa1\037\uffa1\050\uffa1\052\uffa1\053\uffa1\054\uffa1\055" +
    "\uffa1\056\uffa1\057\uffa1\060\uffa1\061\uffa1\062\uffa1\001\002" +
    "\000\004\015\026\001\002\000\012\016\uffbf\045\013\046" +
    "\014\047\010\001\002\000\004\016\035\001\002\000\006" +
    "\016\uffc1\050\033\001\002\000\004\053\024\001\002\000" +
    "\006\016\uffbe\050\uffbe\001\002\000\012\016\uffbf\045\013" +
    "\046\014\047\010\001\002\000\004\016\uffc0\001\002\000" +
    "\030\024\uff8f\025\uff8f\026\uff8f\027\uff8f\033\uff8f\034\uff8f" +
    "\044\uff8f\045\uff8f\046\uff8f\047\uff8f\053\uff8f\001\002\000" +
    "\030\024\uff91\025\uff91\026\uff91\027\uff91\033\uff91\034\uff91" +
    "\044\uff91\045\uff91\046\uff91\047\uff91\053\uff91\001\002\000" +
    "\030\024\057\025\043\026\054\027\060\033\uff95\034\uff95" +
    "\044\051\045\013\046\014\047\010\053\024\001\002\000" +
    "\004\006\302\001\002\000\004\006\301\001\002\000\004" +
    "\006\300\001\002\000\004\015\275\001\002\000\004\037" +
    "\uff90\001\002\000\004\006\272\001\002\000\044\024\057" +
    "\025\043\026\054\027\060\031\ufff7\032\ufff7\033\uff95\034" +
    "\uff95\035\ufff7\037\ufff7\041\ufff7\044\051\045\013\046\014" +
    "\047\010\051\ufff7\053\024\001\002\000\004\005\266\001" +
    "\002\000\010\005\264\015\142\017\141\001\002\000\010" +
    "\045\013\046\014\047\010\001\002\000\004\037\uff90\001" +
    "\002\000\004\041\uff90\001\002\000\004\015\235\001\002" +
    "\000\004\004\213\001\002\000\006\033\173\034\174\001" +
    "\002\000\044\007\uff99\010\uff99\011\uff99\012\uff99\013\uff99" +
    "\014\uff99\022\uff99\023\uff99\052\uff99\053\uff99\054\uff99\055" +
    "\uff99\056\uff99\057\uff99\060\uff99\061\uff99\062\uff99\001\002" +
    "\000\004\015\071\001\002\000\004\006\070\001\002\000" +
    "\004\031\067\001\002\000\004\006\066\001\002\000\004" +
    "\006\065\001\002\000\044\024\uffed\025\uffed\026\uffed\027" +
    "\uffed\031\uffed\032\uffed\033\uffed\034\uffed\035\uffed\037\uffed" +
    "\041\uffed\044\uffed\045\uffed\046\uffed\047\uffed\051\uffed\053" +
    "\uffed\001\002\000\044\024\ufff6\025\ufff6\026\ufff6\027\ufff6" +
    "\031\ufff6\032\ufff6\033\ufff6\034\ufff6\035\ufff6\037\ufff6\041" +
    "\ufff6\044\ufff6\045\ufff6\046\ufff6\047\ufff6\051\ufff6\053\ufff6" +
    "\001\002\000\044\024\ufff4\025\ufff4\026\ufff4\027\ufff4\031" +
    "\ufff4\032\ufff4\033\ufff4\034\ufff4\035\ufff4\037\ufff4\041\ufff4" +
    "\044\ufff4\045\ufff4\046\ufff4\047\ufff4\051\ufff4\053\ufff4\001" +
    "\002\000\044\024\ufff0\025\ufff0\026\ufff0\027\ufff0\031\ufff0" +
    "\032\ufff0\033\ufff0\034\ufff0\035\ufff0\037\ufff0\041\ufff0\044" +
    "\ufff0\045\ufff0\046\ufff0\047\ufff0\051\ufff0\053\ufff0\001\002" +
    "\000\004\053\024\001\002\000\004\016\073\001\002\000" +
    "\004\006\uff9a\001\002\000\044\007\uffea\010\uffea\011\uffea" +
    "\012\uffea\013\uffea\014\uffea\022\uffea\023\uffea\052\076\053" +
    "\024\054\100\055\uffea\056\uffea\057\uffea\060\uffea\061\105" +
    "\062\104\001\002\000\044\006\uffe7\007\uffe7\010\uffe7\011" +
    "\uffe7\012\uffe7\013\uffe7\014\uffe7\020\uffe7\022\uffe7\023\uffe7" +
    "\030\uffe7\036\uffe7\037\uffe7\055\uffe7\056\uffe7\057\uffe7\060" +
    "\uffe7\001\002\000\064\006\uffa4\007\uffa4\010\uffa4\011\uffa4" +
    "\012\uffa4\013\uffa4\014\uffa4\016\uffa4\020\uffa4\021\uffa4\022" +
    "\uffa4\023\uffa4\030\uffa4\036\uffa4\037\uffa4\050\uffa4\052\uffa4" +
    "\053\uffa4\054\uffa4\055\uffa4\056\uffa4\057\uffa4\060\uffa4\061" +
    "\uffa4\062\uffa4\001\002\000\044\006\uffe4\007\uffe4\010\uffe4" +
    "\011\uffe4\012\uffe4\013\uffe4\014\uffe4\020\uffe4\022\uffe4\023" +
    "\uffe4\030\uffe4\036\uffe4\037\uffe4\055\uffe4\056\uffe4\057\uffe4" +
    "\060\uffe4\001\002\000\062\006\uffa0\007\uffa0\010\uffa0\011" +
    "\uffa0\012\uffa0\013\uffa0\014\uffa0\016\uffa0\020\uffa0\022\uffa0" +
    "\023\uffa0\030\uffa0\036\uffa0\037\uffa0\050\uffa0\052\uffa0\053" +
    "\uffa0\054\uffa0\055\uffa0\056\uffa0\057\uffa0\060\uffa0\061\uffa0" +
    "\062\uffa0\001\002\000\044\006\uffe6\007\uffe6\010\uffe6\011" +
    "\uffe6\012\uffe6\013\uffe6\014\uffe6\020\uffe6\022\uffe6\023\uffe6" +
    "\030\uffe6\036\uffe6\037\uffe6\055\uffe6\056\uffe6\057\uffe6\060" +
    "\uffe6\001\002\000\004\030\160\001\002\000\044\007\uffe9" +
    "\010\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015\142\017" +
    "\141\022\uffe9\023\uffe9\030\uffe2\036\uffe2\037\uffe2\055\uffe9" +
    "\056\uffe9\057\uffe9\060\uffe9\001\002\000\062\006\uffa2\007" +
    "\uffa2\010\uffa2\011\uffa2\012\uffa2\013\uffa2\014\uffa2\016\uffa2" +
    "\020\uffa2\022\uffa2\023\uffa2\030\uffa2\036\uffa2\037\uffa2\050" +
    "\uffa2\052\uffa2\053\uffa2\054\uffa2\055\uffa2\056\uffa2\057\uffa2" +
    "\060\uffa2\061\uffa2\062\uffa2\001\002\000\062\006\uffa3\007" +
    "\uffa3\010\uffa3\011\uffa3\012\uffa3\013\uffa3\014\uffa3\016\uffa3" +
    "\020\uffa3\022\uffa3\023\uffa3\030\uffa3\036\uffa3\037\uffa3\050" +
    "\uffa3\052\uffa3\053\uffa3\054\uffa3\055\uffa3\056\uffa3\057\uffa3" +
    "\060\uffa3\061\uffa3\062\uffa3\001\002\000\040\007\uffe8\010" +
    "\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8\022\uffe8\023\uffe8" +
    "\030\uffe1\036\uffe1\037\uffe1\055\uffe8\056\uffe8\057\uffe8\060" +
    "\uffe8\001\002\000\032\007\131\010\116\011\130\012\112" +
    "\013\120\014\113\022\123\023\121\055\125\056\122\057" +
    "\114\060\115\001\002\000\044\006\uffe5\007\uffe5\010\uffe5" +
    "\011\uffe5\012\uffe5\013\uffe5\014\uffe5\020\uffe5\022\uffe5\023" +
    "\uffe5\030\uffe5\036\uffe5\037\uffe5\055\uffe5\056\uffe5\057\uffe5" +
    "\060\uffe5\001\002\000\044\006\uffeb\007\uffeb\010\uffeb\011" +
    "\uffeb\012\uffeb\013\uffeb\014\uffeb\020\uffeb\022\uffeb\023\uffeb" +
    "\030\uffeb\036\uffeb\037\uffeb\055\uffeb\056\uffeb\057\uffeb\060" +
    "\uffeb\001\002\000\014\052\uffb4\053\uffb4\054\uffb4\061\uffb4" +
    "\062\uffb4\001\002\000\014\052\uffb2\053\uffb2\054\uffb2\061" +
    "\uffb2\062\uffb2\001\002\000\052\007\uffae\010\uffae\011\uffae" +
    "\012\uffae\013\uffae\014\uffae\022\uffae\023\uffae\030\uffae\036" +
    "\uffae\037\uffae\052\uffae\053\uffae\054\uffae\055\uffae\056\uffae" +
    "\057\uffae\060\uffae\061\uffae\062\uffae\001\002\000\052\007" +
    "\uffaf\010\uffaf\011\uffaf\012\uffaf\013\uffaf\014\uffaf\022\uffaf" +
    "\023\uffaf\030\uffaf\036\uffaf\037\uffaf\052\uffaf\053\uffaf\054" +
    "\uffaf\055\uffaf\056\uffaf\057\uffaf\060\uffaf\061\uffaf\062\uffaf" +
    "\001\002\000\052\007\uffaa\010\uffaa\011\uffaa\012\uffaa\013" +
    "\uffaa\014\uffaa\022\uffaa\023\uffaa\030\uffaa\036\uffaa\037\uffaa" +
    "\052\uffaa\053\uffaa\054\uffaa\055\uffaa\056\uffaa\057\uffaa\060" +
    "\uffaa\061\uffaa\062\uffaa\001\002\000\052\007\uffdd\010\uffdd" +
    "\011\uffdd\012\uffdd\013\uffdd\014\uffdd\022\uffdd\023\uffdd\030" +
    "\uffdd\036\uffdd\037\uffdd\052\uffdd\053\uffdd\054\uffdd\055\uffdd" +
    "\056\uffdd\057\uffdd\060\uffdd\061\uffdd\062\uffdd\001\002\000" +
    "\014\052\uffb3\053\uffb3\054\uffb3\061\uffb3\062\uffb3\001\002" +
    "\000\052\007\uffb0\010\uffb0\011\uffb0\012\uffb0\013\uffb0\014" +
    "\uffb0\022\uffb0\023\uffb0\030\uffb0\036\uffb0\037\uffb0\052\uffb0" +
    "\053\uffb0\054\uffb0\055\uffb0\056\uffb0\057\uffb0\060\uffb0\061" +
    "\uffb0\062\uffb0\001\002\000\052\007\uffac\010\uffac\011\uffac" +
    "\012\uffac\013\uffac\014\uffac\022\uffac\023\uffac\030\uffac\036" +
    "\uffac\037\uffac\052\uffac\053\uffac\054\uffac\055\uffac\056\uffac" +
    "\057\uffac\060\uffac\061\uffac\062\uffac\001\002\000\052\007" +
    "\uffb1\010\uffb1\011\uffb1\012\uffb1\013\uffb1\014\uffb1\022\uffb1" +
    "\023\uffb1\030\uffb1\036\uffb1\037\uffb1\052\uffb1\053\uffb1\054" +
    "\uffb1\055\uffb1\056\uffb1\057\uffb1\060\uffb1\061\uffb1\062\uffb1" +
    "\001\002\000\052\007\uffde\010\uffde\011\uffde\012\uffde\013" +
    "\uffde\014\uffde\022\uffde\023\uffde\030\uffde\036\uffde\037\uffde" +
    "\052\uffde\053\uffde\054\uffde\055\uffde\056\uffde\057\uffde\060" +
    "\uffde\061\uffde\062\uffde\001\002\000\052\007\uffad\010\uffad" +
    "\011\uffad\012\uffad\013\uffad\014\uffad\022\uffad\023\uffad\030" +
    "\uffad\036\uffad\037\uffad\052\uffad\053\uffad\054\uffad\055\uffad" +
    "\056\uffad\057\uffad\060\uffad\061\uffad\062\uffad\001\002\000" +
    "\014\052\076\053\024\054\100\061\105\062\104\001\002" +
    "\000\052\007\uffea\010\uffea\011\uffea\012\uffea\013\uffea\014" +
    "\uffea\022\uffea\023\uffea\030\uffea\036\uffea\037\uffea\052\076" +
    "\053\024\054\100\055\uffea\056\uffea\057\uffea\060\uffea\061" +
    "\105\062\104\001\002\000\014\052\uffb5\053\uffb5\054\uffb5" +
    "\061\uffb5\062\uffb5\001\002\000\052\007\uffab\010\uffab\011" +
    "\uffab\012\uffab\013\uffab\014\uffab\022\uffab\023\uffab\030\uffab" +
    "\036\uffab\037\uffab\052\uffab\053\uffab\054\uffab\055\uffab\056" +
    "\uffab\057\uffab\060\uffab\061\uffab\062\uffab\001\002\000\050" +
    "\006\uffe9\007\uffe9\010\uffe9\011\uffe9\012\uffe9\013\uffe9\014" +
    "\uffe9\015\142\017\141\020\uffe9\022\uffe9\023\uffe9\030\uffe9" +
    "\036\uffe9\037\uffe9\055\uffe9\056\uffe9\057\uffe9\060\uffe9\001" +
    "\002\000\040\007\131\010\116\011\130\012\112\013\120" +
    "\014\113\022\123\023\121\030\uffdf\036\uffdf\037\uffdf\055" +
    "\125\056\122\057\114\060\115\001\002\000\044\006\uffe8" +
    "\007\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8\020" +
    "\uffe8\022\uffe8\023\uffe8\030\uffe8\036\uffe8\037\uffe8\055\uffe8" +
    "\056\uffe8\057\uffe8\060\uffe8\001\002\000\010\030\uffe3\036" +
    "\uffe3\037\uffe3\001\002\000\044\007\uffea\010\uffea\011\uffea" +
    "\012\uffea\013\uffea\014\uffea\022\uffea\023\uffea\052\076\053" +
    "\024\054\100\055\uffea\056\uffea\057\uffea\060\uffea\061\105" +
    "\062\104\001\002\000\010\030\uffe0\036\uffe0\037\uffe0\001" +
    "\002\000\050\005\uffc6\006\uffc6\007\uffc6\010\uffc6\011\uffc6" +
    "\012\uffc6\013\uffc6\014\uffc6\017\154\020\uffc6\022\uffc6\023" +
    "\uffc6\030\uffc6\036\uffc6\037\uffc6\055\uffc6\056\uffc6\057\uffc6" +
    "\060\uffc6\001\002\000\026\011\uffea\012\uffea\013\uffea\014" +
    "\uffea\020\uffea\052\076\053\024\054\100\061\105\062\104" +
    "\001\002\000\006\016\144\053\024\001\002\000\022\006" +
    "\uffcb\016\uffcb\050\147\052\uffcb\053\uffcb\054\uffcb\061\uffcb" +
    "\062\uffcb\001\002\000\044\006\uffd3\007\uffd3\010\uffd3\011" +
    "\uffd3\012\uffd3\013\uffd3\014\uffd3\020\uffd3\022\uffd3\023\uffd3" +
    "\030\uffd3\036\uffd3\037\uffd3\055\uffd3\056\uffd3\057\uffd3\060" +
    "\uffd3\001\002\000\004\016\146\001\002\000\044\006\uffd4" +
    "\007\uffd4\010\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4\020" +
    "\uffd4\022\uffd4\023\uffd4\030\uffd4\036\uffd4\037\uffd4\055\uffd4" +
    "\056\uffd4\057\uffd4\060\uffd4\001\002\000\004\053\024\001" +
    "\002\000\020\006\uffcd\016\uffcd\052\uffcd\053\uffcd\054\uffcd" +
    "\061\uffcd\062\uffcd\001\002\000\020\006\uffcc\016\uffcc\052" +
    "\uffcc\053\uffcc\054\uffcc\061\uffcc\062\uffcc\001\002\000\014" +
    "\011\130\012\112\013\120\014\113\020\153\001\002\000" +
    "\050\005\uffc4\006\uffc4\007\uffc4\010\uffc4\011\uffc4\012\uffc4" +
    "\013\uffc4\014\uffc4\017\uffc4\020\uffc4\022\uffc4\023\uffc4\030" +
    "\uffc4\036\uffc4\037\uffc4\055\uffc4\056\uffc4\057\uffc4\060\uffc4" +
    "\001\002\000\026\011\uffea\012\uffea\013\uffea\014\uffea\020" +
    "\uffea\052\076\053\024\054\100\061\105\062\104\001\002" +
    "\000\014\011\130\012\112\013\120\014\113\020\156\001" +
    "\002\000\050\005\uffc5\006\uffc5\007\uffc5\010\uffc5\011\uffc5" +
    "\012\uffc5\013\uffc5\014\uffc5\017\uffc5\020\uffc5\022\uffc5\023" +
    "\uffc5\030\uffc5\036\uffc5\037\uffc5\055\uffc5\056\uffc5\057\uffc5" +
    "\060\uffc5\001\002\000\044\006\uffec\007\uffec\010\uffec\011" +
    "\uffec\012\uffec\013\uffec\014\uffec\020\uffec\022\uffec\023\uffec" +
    "\030\uffec\036\uffec\037\uffec\055\uffec\056\uffec\057\uffec\060" +
    "\uffec\001\002\000\030\024\uff98\025\uff98\026\uff98\027\uff98" +
    "\033\uff98\034\uff98\044\uff98\045\uff98\046\uff98\047\uff98\053" +
    "\uff98\001\002\000\030\024\uff91\025\uff91\026\uff91\027\uff91" +
    "\033\uff91\034\uff91\044\uff91\045\uff91\046\uff91\047\uff91\053" +
    "\uff91\001\002\000\030\024\057\025\043\026\054\027\060" +
    "\033\uff95\034\uff95\044\051\045\013\046\014\047\010\053" +
    "\024\001\002\000\006\031\uff90\032\uff90\001\002\000\006" +
    "\031\uff96\032\uff96\001\002\000\006\031\uffda\032\167\001" +
    "\002\000\004\031\uffdc\001\002\000\030\024\uff91\025\uff91" +
    "\026\uff91\027\uff91\033\uff91\034\uff91\044\uff91\045\uff91\046" +
    "\uff91\047\uff91\053\uff91\001\002\000\030\024\057\025\043" +
    "\026\054\027\060\033\uff95\034\uff95\044\051\045\013\046" +
    "\014\047\010\053\024\001\002\000\004\031\uff90\001\002" +
    "\000\004\031\uffdb\001\002\000\044\007\uff99\010\uff99\011" +
    "\uff99\012\uff99\013\uff99\014\uff99\022\uff99\023\uff99\052\uff99" +
    "\053\uff99\054\uff99\055\uff99\056\uff99\057\uff99\060\uff99\061" +
    "\uff99\062\uff99\001\002\000\030\024\uff91\025\uff91\026\uff91" +
    "\027\uff91\033\uff91\034\uff91\044\uff91\045\uff91\046\uff91\047" +
    "\uff91\053\uff91\001\002\000\030\024\057\025\043\026\054" +
    "\027\060\033\uff95\034\uff95\044\051\045\013\046\014\047" +
    "\010\053\024\001\002\000\004\035\177\001\002\000\044" +
    "\007\uff99\010\uff99\011\uff99\012\uff99\013\uff99\014\uff99\022" +
    "\uff99\023\uff99\052\uff99\053\uff99\054\uff99\055\uff99\056\uff99" +
    "\057\uff99\060\uff99\061\uff99\062\uff99\001\002\000\044\007" +
    "\uffea\010\uffea\011\uffea\012\uffea\013\uffea\014\uffea\022\uffea" +
    "\023\uffea\052\076\053\024\054\100\055\uffea\056\uffea\057" +
    "\uffea\060\uffea\061\105\062\104\001\002\000\004\037\uff97" +
    "\001\002\000\004\037\uff94\001\002\000\004\037\uffd8\001" +
    "\002\000\044\007\uffea\010\uffea\011\uffea\012\uffea\013\uffea" +
    "\014\uffea\022\uffea\023\uffea\052\076\053\024\054\100\055" +
    "\uffea\056\uffea\057\uffea\060\uffea\061\105\062\104\001\002" +
    "\000\004\036\206\001\002\000\030\024\uff98\025\uff98\026" +
    "\uff98\027\uff98\033\uff98\034\uff98\044\uff98\045\uff98\046\uff98" +
    "\047\uff98\053\uff98\001\002\000\030\024\uff91\025\uff91\026" +
    "\uff91\027\uff91\033\uff91\034\uff91\044\uff91\045\uff91\046\uff91" +
    "\047\uff91\053\uff91\001\002\000\030\024\057\025\043\026" +
    "\054\027\060\033\uff95\034\uff95\044\051\045\013\046\014" +
    "\047\010\053\024\001\002\000\004\037\uff94\001\002\000" +
    "\004\037\uffd9\001\002\000\004\053\024\001\002\000\012" +
    "\005\216\006\uffcb\017\220\050\147\001\002\000\004\006" +
    "\uffce\001\002\000\026\006\uffea\011\uffea\012\uffea\013\uffea" +
    "\014\uffea\052\076\053\024\054\100\061\105\062\104\001" +
    "\002\000\006\006\uffc9\017\231\001\002\000\006\052\076" +
    "\053\024\001\002\000\004\021\227\001\002\000\004\021" +
    "\225\001\002\000\004\020\224\001\002\000\006\006\uffc7" +
    "\017\uffc7\001\002\000\004\052\076\001\002\000\004\020" +
    "\uffc2\001\002\000\004\053\024\001\002\000\004\020\uffc3" +
    "\001\002\000\006\052\076\053\024\001\002\000\004\020" +
    "\233\001\002\000\006\006\uffc8\017\uffc8\001\002\000\014" +
    "\006\uffd0\011\130\012\112\013\120\014\113\001\002\000" +
    "\016\016\uff9b\052\076\053\024\054\100\061\105\062\104" +
    "\001\002\000\020\016\uffb8\050\uffb8\052\uffb8\053\uffb8\054" +
    "\uffb8\061\uffb8\062\uffb8\001\002\000\016\016\uff9b\052\076" +
    "\053\024\054\100\061\105\062\104\001\002\000\016\016" +
    "\uff9b\052\076\053\024\054\100\061\105\062\104\001\002" +
    "\000\020\016\uffb6\050\uffb6\052\uffb6\053\uffb6\054\uffb6\061" +
    "\uffb6\062\uffb6\001\002\000\020\016\uffba\050\246\052\uffba" +
    "\053\uffba\054\uffba\061\uffba\062\uffba\001\002\000\004\016" +
    "\245\001\002\000\020\016\uffb7\050\uffb7\052\uffb7\053\uffb7" +
    "\054\uffb7\061\uffb7\062\uffb7\001\002\000\004\006\uff9e\001" +
    "\002\000\012\052\076\054\100\061\105\062\104\001\002" +
    "\000\016\016\uffb9\052\uffb9\053\uffb9\054\uffb9\061\uffb9\062" +
    "\uffb9\001\002\000\004\016\uff9d\001\002\000\004\016\uff9c" +
    "\001\002\000\004\041\253\001\002\000\004\002\ufffa\001" +
    "\002\000\004\037\255\001\002\000\044\024\ufff2\025\ufff2" +
    "\026\ufff2\027\ufff2\031\ufff2\032\ufff2\033\ufff2\034\ufff2\035" +
    "\ufff2\037\ufff2\041\ufff2\044\ufff2\045\ufff2\046\ufff2\047\ufff2" +
    "\051\ufff2\053\ufff2\001\002\000\004\004\257\001\002\000" +
    "\004\053\024\001\002\000\004\005\262\001\002\000\004" +
    "\006\uffca\001\002\000\026\006\uffea\011\uffea\012\uffea\013" +
    "\uffea\014\uffea\052\076\053\024\054\100\061\105\062\104" +
    "\001\002\000\014\006\uffcf\011\130\012\112\013\120\014" +
    "\113\001\002\000\026\006\uffea\011\uffea\012\uffea\013\uffea" +
    "\014\uffea\052\076\053\024\054\100\061\105\062\104\001" +
    "\002\000\014\006\uffd2\011\130\012\112\013\120\014\113" +
    "\001\002\000\026\006\uffea\011\uffea\012\uffea\013\uffea\014" +
    "\uffea\052\076\053\024\054\100\061\105\062\104\001\002" +
    "\000\014\006\uffd1\011\130\012\112\013\120\014\113\001" +
    "\002\000\016\031\ufff8\032\ufff8\035\ufff8\037\ufff8\041\ufff8" +
    "\051\ufff8\001\002\000\016\031\ufff9\032\ufff9\035\ufff9\037" +
    "\ufff9\041\ufff9\051\ufff9\001\002\000\044\024\uffef\025\uffef" +
    "\026\uffef\027\uffef\031\uffef\032\uffef\033\uffef\034\uffef\035" +
    "\uffef\037\uffef\041\uffef\044\uffef\045\uffef\046\uffef\047\uffef" +
    "\051\uffef\053\uffef\001\002\000\004\037\274\001\002\000" +
    "\044\024\ufff3\025\ufff3\026\ufff3\027\ufff3\031\ufff3\032\ufff3" +
    "\033\ufff3\034\ufff3\035\ufff3\037\ufff3\041\ufff3\044\ufff3\045" +
    "\ufff3\046\ufff3\047\ufff3\051\ufff3\053\ufff3\001\002\000\016" +
    "\016\uff9b\052\076\053\024\054\100\061\105\062\104\001" +
    "\002\000\004\016\277\001\002\000\004\006\uff9f\001\002" +
    "\000\044\024\uffee\025\uffee\026\uffee\027\uffee\031\uffee\032" +
    "\uffee\033\uffee\034\uffee\035\uffee\037\uffee\041\uffee\044\uffee" +
    "\045\uffee\046\uffee\047\uffee\051\uffee\053\uffee\001\002\000" +
    "\044\024\ufff1\025\ufff1\026\ufff1\027\ufff1\031\ufff1\032\ufff1" +
    "\033\ufff1\034\ufff1\035\ufff1\037\ufff1\041\ufff1\044\ufff1\045" +
    "\ufff1\046\ufff1\047\ufff1\051\ufff1\053\ufff1\001\002\000\044" +
    "\024\ufff5\025\ufff5\026\ufff5\027\ufff5\031\ufff5\032\ufff5\033" +
    "\ufff5\034\ufff5\035\ufff5\037\ufff5\041\ufff5\044\ufff5\045\ufff5" +
    "\046\ufff5\047\ufff5\051\ufff5\053\ufff5\001\002\000\004\053" +
    "\024\001\002\000\004\015\uff92\001\002\000\004\015\306" +
    "\001\002\000\012\016\uffbf\045\013\046\014\047\010\001" +
    "\002\000\004\016\310\001\002\000\030\024\uff8f\025\uff8f" +
    "\026\uff8f\027\uff8f\033\uff8f\034\uff8f\044\uff8f\045\uff8f\046" +
    "\uff8f\047\uff8f\053\uff8f\001\002\000\030\024\uff91\025\uff91" +
    "\026\uff91\027\uff91\033\uff91\034\uff91\044\uff91\045\uff91\046" +
    "\uff91\047\uff91\053\uff91\001\002\000\030\024\057\025\043" +
    "\026\054\027\060\033\uff95\034\uff95\044\051\045\013\046" +
    "\014\047\010\053\024\001\002\000\004\051\314\001\002" +
    "\000\014\052\076\053\024\054\100\061\105\062\104\001" +
    "\002\000\004\041\uff90\001\002\000\004\041\317\001\002" +
    "\000\014\040\uffd6\042\uffd6\045\uffd6\046\uffd6\047\uffd6\001" +
    "\002\000\004\006\uffa9\001\002\000\004\006\uffa5\001\002" +
    "\000\004\006\326\001\002\000\004\006\uffa7\001\002\000" +
    "\006\006\uffa8\015\142\001\002\000\004\006\uffa6\001\002" +
    "\000\004\041\uffd5\001\002\000\004\040\ufffb\001\002\000" +
    "\004\040\ufffc\001\002\000\004\015\uff92\001\002\000\004" +
    "\015\333\001\002\000\012\016\uffbf\045\013\046\014\047" +
    "\010\001\002\000\004\016\335\001\002\000\030\024\uff8f" +
    "\025\uff8f\026\uff8f\027\uff8f\033\uff8f\034\uff8f\044\uff8f\045" +
    "\uff8f\046\uff8f\047\uff8f\053\uff8f\001\002\000\030\024\uff91" +
    "\025\uff91\026\uff91\027\uff91\033\uff91\034\uff91\044\uff91\045" +
    "\uff91\046\uff91\047\uff91\053\uff91\001\002\000\030\024\057" +
    "\025\043\026\054\027\060\033\uff95\034\uff95\044\051\045" +
    "\013\046\014\047\010\053\024\001\002\000\004\041\uff90" +
    "\001\002\000\004\041\342\001\002\000\014\040\uffd7\042" +
    "\uffd7\045\uffd7\046\uffd7\047\uffd7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\340\000\006\002\004\067\003\001\001\000\016\003" +
    "\016\005\017\006\015\007\010\010\011\045\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\033\330\001" +
    "\001\000\002\001\001\000\016\003\327\005\017\006\015" +
    "\007\010\010\011\045\014\001\001\000\016\003\326\005" +
    "\017\006\015\007\010\010\011\045\014\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\020\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\033\022\001\001\000\004\070\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\043\026" +
    "\044\027\045\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\033\031\001\001\000\002\001\001\000\010" +
    "\043\033\044\027\045\030\001\001\000\002\001\001\000" +
    "\004\072\035\001\001\000\004\073\036\001\001\000\042" +
    "\011\052\012\045\013\062\014\037\015\061\017\043\020" +
    "\051\021\040\022\060\024\044\025\041\026\063\033\047" +
    "\035\046\045\054\065\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\074\272\001\001\000\002\001\001\000\044\011\267\012" +
    "\045\013\062\014\037\015\061\017\043\020\051\021\040" +
    "\022\060\024\044\025\041\026\063\033\047\035\046\045" +
    "\054\056\270\065\055\001\001\000\002\001\001\000\004" +
    "\034\137\001\001\000\004\045\255\001\001\000\004\074" +
    "\253\001\001\000\004\074\251\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\033\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\021\100\030\106\031\110\033\102\035\105\036\101" +
    "\047\074\050\107\051\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\034\137\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\052\125\053\116\054\123\060\126\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\021\100\031\156\033\131\035\133\047\074" +
    "\050\107\051\076\001\001\000\022\021\100\030\132\031" +
    "\110\033\131\035\133\047\074\050\107\051\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\034\137\001" +
    "\001\000\014\052\125\053\116\054\123\060\135\061\134" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\021" +
    "\100\030\106\031\110\033\102\035\105\036\136\047\074" +
    "\050\107\051\076\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\021\100\030\151\031\110\033\131\035\133" +
    "\047\074\050\107\051\076\001\001\000\006\033\142\041" +
    "\144\001\001\000\004\057\147\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\033\142\041" +
    "\150\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\052\125\001\001\000\002\001\001\000\022\021\100\030" +
    "\154\031\110\033\131\035\133\047\074\050\107\051\076" +
    "\001\001\000\004\052\125\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\062\160\001\001\000\004\073\161" +
    "\001\001\000\042\011\162\012\045\013\062\014\037\015" +
    "\061\017\043\020\051\021\040\022\060\024\044\025\041" +
    "\026\063\033\047\035\046\045\054\065\055\001\001\000" +
    "\004\074\163\001\001\000\004\064\164\001\001\000\004" +
    "\042\165\001\001\000\002\001\001\000\004\073\167\001" +
    "\001\000\042\011\170\012\045\013\062\014\037\015\061" +
    "\017\043\020\051\021\040\022\060\024\044\025\041\026" +
    "\063\033\047\035\046\045\054\065\055\001\001\000\004" +
    "\074\171\001\001\000\002\001\001\000\004\016\203\001" +
    "\001\000\004\073\174\001\001\000\042\011\175\012\045" +
    "\013\062\014\037\015\061\017\043\020\051\021\040\022" +
    "\060\024\044\025\041\026\063\033\047\035\046\045\054" +
    "\065\055\001\001\000\002\001\001\000\004\016\177\001" +
    "\001\000\024\021\100\030\106\031\110\033\102\035\105" +
    "\036\200\047\074\050\107\051\076\001\001\000\004\063" +
    "\201\001\001\000\004\066\202\001\001\000\002\001\001" +
    "\000\024\021\100\030\106\031\110\033\102\035\105\036" +
    "\204\047\074\050\107\051\076\001\001\000\002\001\001" +
    "\000\004\062\206\001\001\000\004\073\207\001\001\000" +
    "\042\011\210\012\045\013\062\014\037\015\061\017\043" +
    "\020\051\021\040\022\060\024\044\025\041\026\063\033" +
    "\047\035\046\045\054\065\055\001\001\000\004\066\211" +
    "\001\001\000\002\001\001\000\006\033\213\041\214\001" +
    "\001\000\006\027\216\057\147\001\001\000\002\001\001" +
    "\000\022\021\100\030\233\031\110\033\131\035\133\047" +
    "\074\050\107\051\076\001\001\000\002\001\001\000\010" +
    "\033\220\047\221\071\222\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\047\225\001\001\000\002\001\001\000\004\033\227\001" +
    "\001\000\002\001\001\000\010\033\220\047\221\071\231" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\052" +
    "\125\001\001\000\022\032\241\033\142\037\242\040\237" +
    "\041\236\047\235\050\243\051\240\001\001\000\002\001" +
    "\001\000\022\032\241\033\142\037\250\040\237\041\236" +
    "\047\235\050\243\051\240\001\001\000\022\032\241\033" +
    "\142\037\247\040\237\041\236\047\235\050\243\051\240" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\032\241" +
    "\040\246\047\235\050\243\051\240\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\023\260\033\257\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\021\100\030\262\031" +
    "\110\033\131\035\133\047\074\050\107\051\076\001\001" +
    "\000\004\052\125\001\001\000\022\021\100\030\264\031" +
    "\110\033\131\035\133\047\074\050\107\051\076\001\001" +
    "\000\004\052\125\001\001\000\022\021\100\030\266\031" +
    "\110\033\131\035\133\047\074\050\107\051\076\001\001" +
    "\000\004\052\125\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\032\241\033\142\037\275\040\237\041\236\047" +
    "\235\050\243\051\240\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\033\303\001\001\000\004\070\304\001\001" +
    "\000\002\001\001\000\010\043\306\044\027\045\030\001" +
    "\001\000\002\001\001\000\004\072\310\001\001\000\004" +
    "\073\311\001\001\000\042\011\312\012\045\013\062\014" +
    "\037\015\061\017\043\020\051\021\040\022\060\024\044" +
    "\025\041\026\063\033\047\035\046\045\054\065\055\001" +
    "\001\000\004\046\314\001\001\000\016\021\322\033\323" +
    "\047\317\050\324\051\320\055\321\001\001\000\004\074" +
    "\315\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\070\331\001" +
    "\001\000\002\001\001\000\010\043\333\044\027\045\030" +
    "\001\001\000\002\001\001\000\004\072\335\001\001\000" +
    "\004\073\336\001\001\000\042\011\337\012\045\013\062" +
    "\014\037\015\061\017\043\020\051\021\040\022\060\024" +
    "\044\025\041\026\063\033\047\035\046\045\054\065\055" +
    "\001\001\000\004\074\340\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private LexicalScanner scanner;

    public Parser(LexicalScanner scanner, java_cup.runtime.SymbolFactory sf) {
        super(scanner, sf);
        this.scanner = scanner;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= START EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymSTART start_val = (SymSTART)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // START ::= STARTMAIN METFUNC DECMP 
            {
              SymSTART RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymMETFUNC a = (SymMETFUNC)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymDECMP b = (SymDECMP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymSTART(a, b);
     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // METFUNC ::= DECMETLIST 
            {
              SymMETFUNC RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymDECMETLIST a = (SymDECMETLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymMETFUNC(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METFUNC",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // METFUNC ::= DECFUNCLIST 
            {
              SymMETFUNC RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymDECFUNCLIST b = (SymDECFUNCLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymMETFUNC(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METFUNC",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // METFUNC ::= 
            {
              SymMETFUNC RESULT =null;
		 RESULT = new SymMETFUNC(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METFUNC",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECMETLIST ::= DECMET METFUNC 
            {
              SymDECMETLIST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymDECMET a = (SymDECMET)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymMETFUNC b = (SymMETFUNC)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymDECMETLIST(a, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECMETLIST",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECFUNCLIST ::= DECFUNC METFUNC 
            {
              SymDECFUNCLIST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymDECFUNC a = (SymDECFUNC)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymMETFUNC b = (SymMETFUNC)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymDECFUNCLIST(a, b, scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECFUNCLIST",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECMP ::= prog ID STARTPROC lparen ARGLIST rparen PMB INCSCOPE SENTLIST DICSCOPE end 
            {
              SymDECMP RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		SymID a = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		SymARGLIST b = (SymARGLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymSENTLIST c = (SymSENTLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new SymDECMP(a, b, c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECMP",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTLIST ::= SENT SENTLISTSEP 
            {
              SymSENTLIST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymSENT a = (SymSENT)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymSENTLISTSEP b = (SymSENTLISTSEP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymSENTLIST(a, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTLISTSEP ::= SENTLIST 
            {
              SymSENTLISTSEP RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymSENTLIST a = (SymSENTLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymSENTLISTSEP(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTLISTSEP",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTLISTSEP ::= 
            {
              SymSENTLISTSEP RESULT =null;
		 RESULT = new SymSENTLISTSEP();  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTLISTSEP",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENT ::= OUTPUT scolon 
            {
              SymSENT RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymOUTPUT a = (SymOUTPUT)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymSENT(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENT ::= INPUT scolon 
            {
              SymSENT RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymINPUT b = (SymINPUT)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymSENT(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENT ::= CONDIF endif 
            {
              SymSENT RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymCONDIF c = (SymCONDIF)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymSENT(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENT ::= WHILE DICSCOPE endloop 
            {
              SymSENT RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymWHILE d = (SymWHILE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new SymSENT(d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENT ::= REPUNTIL DICSCOPE endloop 
            {
              SymSENT RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymREPUNTIL e = (SymREPUNTIL)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new SymSENT(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENT ::= CALLPROC scolon 
            {
              SymSENT RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymCALLPROC f = (SymCALLPROC)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymSENT(f); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENT ::= ASSIGN scolon 
            {
              SymSENT RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymASSIGN g = (SymASSIGN)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymSENT(g); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENT ::= DECVAR scolon 
            {
              SymSENT RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymDECVAR h = (SymDECVAR)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymSENT(h); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENT ::= DECLARECONST scolon 
            {
              SymSENT RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymDECLARECONST i = (SymDECLARECONST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymSENT(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENT ::= DECARRAY scolon 
            {
              SymSENT RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymDECARRAY j = (SymDECARRAY)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymSENT(j); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // OPERANDX ::= OPERANDX OPARITH SUBTYPE 
            {
              SymOPERANDX RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymOPERANDX a = (SymOPERANDX)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymOPARITH b = (SymOPARITH)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymSUBTYPE c = (SymSUBTYPE)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new SymOPERANDX(a, b, c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERANDX",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // OPERANDX ::= SUBTYPE 
            {
              SymOPERANDX RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymSUBTYPE b = (SymSUBTYPE)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new SymOPERANDX(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERANDX",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // OPERANDX ::= 
            {
              SymOPERANDX RESULT =null;
		  RESULT = new SymOPERANDX(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERANDX",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SUBTYPE ::= ID 
            {
              SymSUBTYPE RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymID a = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new SymSUBTYPE(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SUBTYPE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SUBTYPE ::= IDARRAY 
            {
              SymSUBTYPE RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymIDARRAY b = (SymIDARRAY)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new SymSUBTYPE(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SUBTYPE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SUBTYPE ::= NUM 
            {
              SymSUBTYPE RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymNUM c = (SymNUM)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new SymSUBTYPE(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SUBTYPE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SUBTYPE ::= CALLPROC 
            {
              SymSUBTYPE RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymCALLPROC d = (SymCALLPROC)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new SymSUBTYPE(d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SUBTYPE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SUBTYPE ::= LOGIC 
            {
              SymSUBTYPE RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymLOGIC e = (SymLOGIC)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new SymSUBTYPE(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SUBTYPE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SUBTYPE ::= STR 
            {
              SymSUBTYPE RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymSTR f = (SymSTR)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new SymSUBTYPE(f); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SUBTYPE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CONDITION ::= OPERANDX OPERATION OPERANDX CONDEXT 
            {
              SymCONDITION RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymOPERANDX a = (SymOPERANDX)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymOPERATION b = (SymOPERATION)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymOPERANDX c = (SymOPERANDX)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymCONDEXT d = (SymCONDEXT)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymCONDITION(a, b, c, d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDITION",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CONDITION ::= ID 
            {
              SymCONDITION RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymID a = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymCONDITION(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDITION",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CONDITION ::= IDARRAY 
            {
              SymCONDITION RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymIDARRAY a = (SymIDARRAY)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymCONDITION(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDITION",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CONDEXT ::= OPERATION CONDITION 
            {
              SymCONDEXT RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymOPERATION a = (SymOPERATION)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymCONDITION b = (SymCONDITION)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymCONDEXT(a, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDEXT",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CONDEXT ::= 
            {
              SymCONDEXT RESULT =null;
		 RESULT = new SymCONDEXT(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDEXT",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OPERATION ::= ANDOR 
            {
              SymOPERATION RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymANDOR a = (SymANDOR)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymOPERATION(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERATION",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OPERATION ::= OPLOGIC 
            {
              SymOPERATION RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymOPLOGIC b = (SymOPLOGIC)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymOPERATION(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERATION",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CONDIF ::= If CONDLABEL CONDITION then CONDBRANCH INCSCOPE SENTLIST DICSCOPE ELSE CONDELSE 
            {
              SymCONDIF RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		SymCONDITION a = (SymCONDITION)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymSENTLIST b = (SymSENTLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymCONDELSE c = (SymCONDELSE)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymCONDIF(a, b, c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDIF",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CONDELSE ::= Else INCSCOPE SENTLIST DICSCOPE 
            {
              SymCONDELSE RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymSENTLIST a = (SymSENTLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymCONDELSE(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDELSE",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CONDELSE ::= 
            {
              SymCONDELSE RESULT =null;
		 RESULT = new SymCONDELSE(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDELSE",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // WHILE ::= STARTLOOP While CONDLABEL CONDITION loop CONDBRANCH INCSCOPE SENTLIST GSTARTLOOP 
            {
              SymWHILE RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		SymCONDITION a = (SymCONDITION)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymSENTLIST b = (SymSENTLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymWHILE(a, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WHILE",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // REPUNTIL ::= STARTLOOP Repeat INCSCOPE SENTLIST Until CONDLABEL CONDITION CONDBRANCHINV GSTARTLOOP 
            {
              SymREPUNTIL RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		SymSENTLIST a = (SymSENTLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymCONDITION b = (SymCONDITION)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new SymREPUNTIL(b, a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("REPUNTIL",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECMET ::= method ID STARTPROC lparen ARGLIST rparen PMB INCSCOPE SENTLIST DICSCOPE end 
            {
              SymDECMET RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		SymID a = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		SymARGLIST b = (SymARGLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymSENTLIST c = (SymSENTLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new SymDECMET(a, b, c, scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECMET",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECFUNC ::= TYPE func ID STARTPROC lparen ARGLIST rparen PMB INCSCOPE SENTLIST RETURN DICSCOPE end 
            {
              SymDECFUNC RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).right;
		SymTYPE a = (SymTYPE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-12)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		SymID b = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		SymARGLIST c = (SymARGLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymSENTLIST d = (SymSENTLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymRETURN e = (SymRETURN)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new SymDECFUNC(a, b, c, d, e, scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECFUNC",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // RETURN ::= Return RETURNTYPE scolon 
            {
              SymRETURN RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymRETURNTYPE a = (SymRETURNTYPE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymRETURN(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CALLPROC ::= ID lparen IDLIST rparen 
            {
              SymCALLPROC RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymID a = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymIDLIST b = (SymIDLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymCALLPROC(a, b, scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CALLPROC",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CALLPROC ::= ID lparen rparen 
            {
              SymCALLPROC RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymID a = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new SymCALLPROC(a, scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CALLPROC",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ASSIGN ::= ID assign OPERANDX 
            {
              SymASSIGN RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymID a = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymOPERANDX b = (SymOPERANDX)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymASSIGN(a, b, scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGN",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ASSIGN ::= IDARRAY assign OPERANDX 
            {
              SymASSIGN RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymIDARRAY a = (SymIDARRAY)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymOPERANDX b = (SymOPERANDX)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymASSIGN(a, b, scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGN",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ASSIGN ::= TYPE colons ID assign OPERANDX 
            {
              SymASSIGN RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		SymTYPE a = (SymTYPE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymID b = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymOPERANDX c = (SymOPERANDX)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new SymASSIGN(a, b, c, scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGN",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ASSIGNCONST ::= ID assign OPERANDX 
            {
              SymASSIGNCONST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymID a = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymOPERANDX b = (SymOPERANDX)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymASSIGNCONST(a, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGNCONST",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECVAR ::= TYPE colons IDLIST 
            {
              SymDECVAR RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymTYPE a = (SymTYPE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymIDLIST b = (SymIDLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new SymDECVAR(a, b, scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECVAR",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // IDLIST ::= ID IDLISTSEP 
            {
              SymIDLIST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymID a = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymIDLISTSEP b = (SymIDLISTSEP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new SymIDLIST(a, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDLIST",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // IDLISTSEP ::= comma IDLIST 
            {
              SymIDLISTSEP RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymIDLIST a = (SymIDLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new SymIDLISTSEP(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDLISTSEP",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // IDLISTSEP ::= 
            {
              SymIDLISTSEP RESULT =null;
		  RESULT = new SymIDLISTSEP(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDLISTSEP",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARECONST ::= Const TYPE colons ASSIGNCONST 
            {
              SymDECLARECONST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymTYPE a = (SymTYPE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymASSIGNCONST b = (SymASSIGNCONST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymDECLARECONST(a, b, scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARECONST",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECARRAY ::= TYPE colons ID DECLISTDIM 
            {
              SymDECARRAY RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymTYPE a = (SymTYPE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymID b = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymDECLISTDIM c = (SymDECLISTDIM)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = new SymDECARRAY(a, b, c, scanner.getLineColumn());   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECARRAY",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLISTDIM ::= DECLISTDIM lbrckt SUBRANGE rbrckt 
            {
              SymDECLISTDIM RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymDECLISTDIM a = (SymDECLISTDIM)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymSUBRANGE b = (SymSUBRANGE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		   RESULT = new SymDECLISTDIM(a, b);     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLISTDIM",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECLISTDIM ::= lbrckt SUBRANGE rbrckt 
            {
              SymDECLISTDIM RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymSUBRANGE a = (SymSUBRANGE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		   RESULT = new SymDECLISTDIM(a);     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLISTDIM",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // IDARRAY ::= ID IDLISTDIM 
            {
              SymIDARRAY RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymID a = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymIDLISTDIM b = (SymIDLISTDIM)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new SymIDARRAY(a,b);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDARRAY",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // IDLISTDIM ::= IDLISTDIM lbrckt OPERANDX rbrckt 
            {
              SymIDLISTDIM RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymIDLISTDIM a = (SymIDLISTDIM)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymOPERANDX b = (SymOPERANDX)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new SymIDLISTDIM(a,b);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDLISTDIM",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // IDLISTDIM ::= lbrckt OPERANDX rbrckt 
            {
              SymIDLISTDIM RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymOPERANDX a = (SymOPERANDX)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new SymIDLISTDIM(a);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDLISTDIM",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SUBRANGE ::= ID dotdot ID 
            {
              SymSUBRANGE RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymID a = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymID b = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = new SymSUBRANGE(a, b);     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SUBRANGE",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SUBRANGE ::= NUM dotdot NUM 
            {
              SymSUBRANGE RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymNUM a = (SymNUM)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymNUM b = (SymNUM)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = new SymSUBRANGE(a,b);     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SUBRANGE",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ARGLIST ::= ARG 
            {
              SymARGLIST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymARG a = (SymARG)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymARGLIST(a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGLIST",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ARGLIST ::= ARG comma ARGLIST 
            {
              SymARGLIST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymARG a = (SymARG)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymARGLIST b = (SymARGLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymARGLIST(a, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGLIST",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ARGLIST ::= 
            {
              SymARGLIST RESULT =null;
		 RESULT = new SymARGLIST(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGLIST",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ARG ::= TYPE ID 
            {
              SymARG RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymTYPE a = (SymTYPE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymID b = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new SymARG(a, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARG",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // TYPE ::= integer 
            {
              SymTYPE RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymTYPE(a.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // TYPE ::= string 
            {
              SymTYPE RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymTYPE(a.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // TYPE ::= logic 
            {
              SymTYPE RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymTYPE(a.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // VALUELIST ::= VALUE 
            {
              SymVALUELIST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymVALUE a = (SymVALUE)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymVALUELIST(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUELIST",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // VALUELIST ::= VALUE comma VALUELIST 
            {
              SymVALUELIST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymVALUE a = (SymVALUE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymVALUELIST b = (SymVALUELIST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymVALUELIST(a, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUELIST",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // VALUE ::= NUM 
            {
              SymVALUE RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymNUM a = (SymNUM)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymVALUE(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // VALUE ::= LOGIC 
            {
              SymVALUE RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymLOGIC b = (SymLOGIC)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymVALUE(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // VALUE ::= STR 
            {
              SymVALUE RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymSTR c = (SymSTR)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymVALUE(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OPARITH ::= add 
            {
              SymOPARITH RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymOPARITH(a.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPARITH",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OPARITH ::= sub 
            {
              SymOPARITH RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymOPARITH(b.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPARITH",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OPARITH ::= mult 
            {
              SymOPARITH RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymOPARITH(c.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPARITH",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OPARITH ::= div 
            {
              SymOPARITH RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymOPARITH(d.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPARITH",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OPLOGIC ::= gte 
            {
              SymOPLOGIC RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymOPLOGIC(a.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPLOGIC",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OPLOGIC ::= lt 
            {
              SymOPLOGIC RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymOPLOGIC(b.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPLOGIC",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OPLOGIC ::= equals 
            {
              SymOPLOGIC RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymOPLOGIC(c.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPLOGIC",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OPLOGIC ::= gt 
            {
              SymOPLOGIC RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymOPLOGIC(d.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPLOGIC",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OPLOGIC ::= lte 
            {
              SymOPLOGIC RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymOPLOGIC(e.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPLOGIC",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OPLOGIC ::= noteq 
            {
              SymOPLOGIC RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymOPLOGIC(f.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPLOGIC",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ANDOR ::= op_and 
            {
              SymANDOR RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymANDOR(a.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ANDOR",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ANDOR ::= op_or 
            {
              SymANDOR RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymANDOR(b.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ANDOR",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // RETURNTYPE ::= NUM 
            {
              SymRETURNTYPE RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymNUM a = (SymNUM)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymRETURNTYPE(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURNTYPE",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // RETURNTYPE ::= ID 
            {
              SymRETURNTYPE RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymID b = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymRETURNTYPE(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURNTYPE",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // RETURNTYPE ::= CALLPROC 
            {
              SymRETURNTYPE RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymCALLPROC c = (SymCALLPROC)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymRETURNTYPE(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURNTYPE",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // RETURNTYPE ::= LOGIC 
            {
              SymRETURNTYPE RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymLOGIC d = (SymLOGIC)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymRETURNTYPE(d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURNTYPE",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // RETURNTYPE ::= STR 
            {
              SymRETURNTYPE RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymSTR e = (SymSTR)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymRETURNTYPE(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURNTYPE",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // NUM ::= val_int 
            {
              SymNUM RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymNUM(Integer.valueOf(a.toString())); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NUM",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // LOGIC ::= True 
            {
              SymLOGIC RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymLOGIC(a.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOGIC",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // LOGIC ::= False 
            {
              SymLOGIC RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymLOGIC(b.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOGIC",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ID ::= val_id 
            {
              SymID RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymID(a.toString(), scanner.getLineColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // STR ::= val_str 
            {
              SymSTR RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymSTR(a.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STR",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // OUTPUT ::= print lparen PRINT rparen 
            {
              SymOUTPUT RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymPRINT a = (SymPRINT)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymOUTPUT(a, false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OUTPUT",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // OUTPUT ::= line lparen PRINT rparen 
            {
              SymOUTPUT RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymPRINT a = (SymPRINT)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymOUTPUT(a, true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OUTPUT",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // PRINT ::= VALUELIST PRINT 
            {
              SymPRINT RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymVALUELIST a = (SymVALUELIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymPRINT b = (SymPRINT)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymPRINT(a, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRINT",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // PRINT ::= IDLIST PRINT 
            {
              SymPRINT RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymIDLIST c = (SymIDLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymPRINT b = (SymPRINT)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymPRINT(c, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRINT",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // PRINT ::= 
            {
              SymPRINT RESULT =null;
		 RESULT = new SymPRINT(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRINT",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // INPUT ::= read lparen ID rparen 
            {
              SymINPUT RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymID a = (SymID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymINPUT(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INPUT",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // CONDLABEL ::= 
            {
              SymCONDLABEL RESULT =null;
		 RESULT = new SymCONDLABEL(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDLABEL",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // CONDBRANCH ::= 
            {
              SymCONDBRANCH RESULT =null;
		 RESULT = new SymCONDBRANCH(false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDBRANCH",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // CONDBRANCHINV ::= 
            {
              SymCONDBRANCH RESULT =null;
		 RESULT = new SymCONDBRANCH(true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDBRANCHINV",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ELSE ::= 
            {
              SymELSE RESULT =null;
		 RESULT = new SymELSE(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // STARTLOOP ::= 
            {
              SymSTARTLOOP RESULT =null;
		 RESULT = new SymSTARTLOOP(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STARTLOOP",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // GSTARTLOOP ::= 
            {
              SymGSTARTLOOP RESULT =null;
		 RESULT = new SymGSTARTLOOP(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GSTARTLOOP",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // STARTMAIN ::= 
            {
              SymSTARTMAIN RESULT =null;
		 RESULT = new SymSTARTMAIN(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STARTMAIN",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // STARTPROC ::= 
            {
              SymSTARTPROC RESULT =null;
		 RESULT = new SymSTARTPROC(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STARTPROC",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // INCSCOPE ::= 
            {
              SymINCSCOPE RESULT =null;
		 RESULT = new SymINCSCOPE(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCSCOPE",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // DICSCOPE ::= 
            {
              SymDICSCOPE RESULT =null;
		 RESULT = new SymDICSCOPE(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DICSCOPE",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // PMB ::= 
            {
              SymPMB RESULT =null;
		 RESULT = new SymPMB(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PMB",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
